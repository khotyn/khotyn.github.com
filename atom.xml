<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小径分岔的花园]]></title>
  <link href="http://khotyn.github.com/atom.xml" rel="self"/>
  <link href="http://khotyn.github.com/"/>
  <updated>2014-01-06T09:57:33+08:00</updated>
  <id>http://khotyn.github.com/</id>
  <author>
    <name><![CDATA[khotyn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[转让自用 13 寸 MacBook Pro]]></title>
    <link href="http://khotyn.github.com/blog/2014/01/01/sell-mac-book-pro/"/>
    <updated>2014-01-01T11:02:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/01/01/sell-mac-book-pro</id>
    <content type="html"><![CDATA[<p><strong>已经出售，谢谢</strong></p>

<p>转让自用的 13 寸 MacBook Pro，2009 年年中的款，型号 MB990，入手时间 2010 年初，使用时间三年不到，除了电池的续航能力有所下降，其他没有出现任何问题，内存我自己升级到了 8 G，平时的开发也都是用这台开发（你知道开个 Eclipse 或者 Intellij IDEA 是很耗资源的），也比较顺畅，<strong>价格方面是 2500</strong>，当然可刀~，暂时只接受杭州的当面交易。</p>

<p>有意向的可以直接在这篇博客下面回复，或者给我发邮件联系我，hting1#gmail.com</p>

<p>关于这个型号的 MBP 的其他参数，可以直接看下面这张图：</p>

<p><img src="http://pic.yupoo.com/khotyn/DqBJdz79/medish.jpg" alt="image" /></p>

<p>上几张本本的照片：</p>

<p>合上后，有些许划痕</p>

<p><img src="http://pic.yupoo.com/khotyn/DqBPAi4B/medish.jpg" alt="image" /></p>

<p><img src="http://pic.yupoo.com/khotyn/DqBQFoio/medish.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Guava 之 EventBus]]></title>
    <link href="http://khotyn.github.com/blog/2013/12/07/google-guava-eventbus/"/>
    <updated>2013-12-07T19:49:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/12/07/google-guava-eventbus</id>
    <content type="html"><![CDATA[<p>Google 的 Guava 库是一个 Java 程序员必须了解的库，它提供了一些非常强大的功能，比如函数式风格的集合操作，Cache Builder 等等的功能，另外 Google Guava 还提供了一个非常方便的观察者模式的实现：EventBus。这篇文章就来介绍一下 EventBus 的使用。</p>

<h3 id="eventbus-">EventBus 对象</h3>

<p>在举例说明 EventBus 的使用方式之前，我们先来看一下 EventBus 对象，EventBus 对象整个负责了观察者模式监听者的注册，事件的分发，所以，在使用 EventBus 的时候，你就省去了非常多的工作，你只要去使用 EventBus 就可以了，不用再去自己实现一个 Publisher 的类，使用 EventBus 的第一步就是你需要一个 EventBus 的实例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">EventBus</span> <span class="n">eventBus</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EventBus</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section">注册监听者</h3>

<p>使用 EventBus 监听事件，只需要在你的处理事件的方法上添加一个 <code>@Subscribe</code> 注解就可以：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kd">class</span> <span class="nc">Subscriber</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@Subscribe</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">subscribe</span><span class="o">(</span><span class="n">Event</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getWord</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里的事件对象 <code>Event</code> 可以是任何的对象，可以是 <code>Object</code>，但是也可以是任何你自定义的消息对象。</p>

<p>建立一个类以后，就可以往 EventBus 中注册 Subscriber：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">eventBus</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="k">new</span> <span class="n">Subscriber</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">分发事件</h3>

<p>在注册完事件后，就可以去分发事件了，分发的代码非常简单：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">eventBus</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Event</span><span class="o">(</span><span class="s">&quot;Hello world&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样，所有的注册在 EventBus 中的监听者，只要它的监听方法的参数是 <code>Event</code> 或者 <code>Event</code> 的超类，那么都会收到事件。</p>

<h3 id="section-2">结论</h3>

<p>EventBus 作为一个 In-JVM 的观察者模式的实现，非常使用，使用起来非常简单，可以减少不少的工作，建议在项目中可以多多使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[发泄快感]]></title>
    <link href="http://khotyn.github.com/blog/2013/11/06/abreact-pleasant/"/>
    <updated>2013-11-06T19:16:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/11/06/abreact-pleasant</id>
    <content type="html"><![CDATA[<p>前一段时间特别喜欢上知乎，觉得还是一个挺有意思的网站，同类的国外网站有 Quora，不过我英语不太好，所以平时还是喜欢逛逛知乎，但是最近逛知乎的时候发现一个问题，里面的有一些的问题的高票答案其实不是在回答问题，而是在发泄自己的情感，而这些答案往往还能够得到高票（历史上的煽动家大概也是这样的，让自己的话迎合大众的情感，以此得到他们的支持），比如下面这个：</p>

<p><img src="http://pic.yupoo.com/khotyn/Di8YyMye/medish.jpg" alt="image" /></p>

<p>正常的答案应该是列出邹孟睿的经历，但是得票第一的回答其实是在表达自己对「来往」这个产品的不满，或者是觉得「来往」并没有什么未来，当然，他自己似乎也有点不好意思，所以用了「匿名」来回答。</p>

<p>知乎上的这种答案不止这里一个，还有很多讨巧的答案，作为一个问答网站，其用户对于问题的回答应该尽量保持中立，这样的答案毫无疑问是无异于网站的形象，所以现在知乎对我的吸引力也越来越少了。</p>

<p>既然提到了快感，顺便说一句：“阅读新闻也是一种快感”，这是浪费时间的快感，不看新闻，你也不会错过任何重要的消息，所以，不如把手机上的新闻客户端给删掉，它不能给你带来任何东西。</p>

<p>哦，对了，有一个新闻客户端，素以评论见长，它提供了另一种形式的快感发泄，是的，我说的就是「网易新闻」。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jvmtop 介绍和实现分析]]></title>
    <link href="http://khotyn.github.com/blog/2013/11/02/jvmtop-impl/"/>
    <updated>2013-11-02T15:36:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/11/02/jvmtop-impl</id>
    <content type="html"><![CDATA[<h3 id="section">简介</h3>

<p>jvmtop 是一个分析工具，顾名思义，它是一个针对 jvm 的 工具，展示的方式和 unix 的 top 命令相似。</p>

<p>jvmtop 的项目地址是：<a href="https://code.google.com/p/jvmtop/">jvmtop</a>，安装 jvmtop 除了项目地址上的方式以外，还可以通过 jenv 安装：<code>jenv install jvmtop</code>。</p>

<p>jvmtop 提供了两个视图，一个是概览视图，可以展示出当前机器的所有的 JVM 的情况，命令是 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">jvmtop.sh</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>显示出的信息类似下面这样：</p>

<p><img src="http://pic.yupoo.com/khotyn/DhvVumOY/medish.jpg" alt="image" /></p>

<p>其中，各个字段的意义分别如下：</p>

<ul>
  <li>PID：进程 ID</li>
  <li>MAIN-CLASS：main 类的名字</li>
  <li>HPCUR：当前被使用的 heap 的大小</li>
  <li>HPMAX：最大可用的 heap 的大小</li>
  <li>NHCUR：当前被使用的非 heap 大小（比如：perm gen）</li>
  <li>NHMAX：最大可用的非 heap 大小</li>
  <li>CPU：CPU 的使用情况</li>
  <li>GC：消耗在 GC 上的时间比例</li>
  <li>VM：JVM 的提供者，大版本号，小版本号，图中的意思是 Apple 提供的 JDK 6U51 版本。</li>
  <li>USERNAME：当前的用户名</li>
  <li>#T：线程数量</li>
  <li>DL：是否有现成发生死锁</li>
</ul>

<p>还有一个视图是详情视图，展示一个 JVM 的详细情况，使用的命令如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">jvmtop.sh &lt;pid&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>显示的信息类似下面这样：</p>

<p><img src="http://pic.yupoo.com/khotyn/Dhw0sotX/dTwsh.png" alt="image" /></p>

<p>其中，各个字段的意义如下：</p>

<ul>
  <li>TID：线程 ID</li>
  <li>NAME：线程名</li>
  <li>STATE：线程状态</li>
  <li>CPU：线程当前的 CPU 占用情况</li>
  <li>TOTALCPU：从线程被创建开始总体的 CPU 占用情况</li>
  <li>BLOCKBY：阻塞这个线程的线程 ID</li>
</ul>

<p>更加详细的用法大家可以用下面的用 <code>jvmtop.sh -h</code> 来查看。</p>

<h3 id="section-1">实现</h3>

<p>jvmtop 的实现相对来说还是比较简单的，整个 jvmtop 才 14 个类。</p>

<p><img src="http://pic.yupoo.com/khotyn/DhwgtqPY/IYHUw.png" alt="image" /></p>

<p>其中 JvmTop.java 是入口类。</p>

<p>jvmtop 在启动后，会首先用 <code>sun.jvmstat.monitor.*</code> 下面的类以及 <code>com.sun.tools.attach.VirtualMachine</code> 获取到当前机器的所有的 JVM，然后通过 attachment api 将 <code>management-agent.jar</code> 这个 agent 加载到目标 JVM 上，这样，通过 JMX，就可以拿到当前的 JVM 的各种信息了，具体各个信息需要用什么样的 MBean 去拿，大家可以看对应的源代码。</p>

<p>其实，如果需要一个 JVM 的静态的信息，比如，PID，MAIN-CLASS，JVM-ARGS 等等静态信息，直接用 <code>sun.jvmstat.monitor.*</code> 下的 API 就可以，只有需要动态信息的时候，我们才需要通过 attachment api 把 JMX 的功能打开，通过各种 MBean 去获取这些信息。如果后续需要实现类似的功能，也可以通过这样的思路去做。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在更大的世界遇见更好的自己]]></title>
    <link href="http://khotyn.github.com/blog/2013/10/24/brave-new-world/"/>
    <updated>2013-10-24T08:31:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/10/24/brave-new-world</id>
    <content type="html"><![CDATA[<p><img src="http://pic.yupoo.com/khotyn/Dg6bDXhi/Zb6Cy.jpg" alt="image" /></p>

<p>今天和朋友聊天，说起眼见的问题，以前在业务团队的时候大家都奔着业务而去，完成业务上的需求，最多了解一下所用到的框架，鲜有关注业界的开源软件的动态。</p>

<p>而到了中间件团队，所有人都得规划、实施、推广自己的产品，如果只是做一些平庸的事情，那实在对不起你所在的团队，所以只能硬着头皮去花时间关注业界的开源软件的动态，慢慢地，也就开阔了自己的眼见，碰到一个问题以后，发现还可以用这样的方法解决，这是之前从来没有想到的。</p>

<p>最近其实一直在反思，当时这么快下决定转岗到现在的部门到底对不对？诚然，当时转岗的决定，有其他的非常私人的考虑，在新的岗位，各种不习惯，但是这里有很多新鲜的事情，可以作为学习的对象；有一些很强的人，可以作为学习的榜样。当你进入了一个更大的世界，你又重新回到了婴儿的时代，疯狂快速地吸收着周围的一切。</p>

<p>晚上跑步的时候突然想起了 Clyde 三年前和我说的他的梦想：“等我老了的时候，我希望成为一个讲故事的人”，当时我并不明白他到底想表达什么，只能随便应付几句。现在，我似乎有点想明白了，那些有着很多精彩的故事的人，无非就是旅行家，船员之类的，想要成为一个讲故事的人，必须有足够的人生经历，和这个世界有更大的交集。最近在看德田秋声的「霉」，永远待在一个地方，生活大概就像「霉」中的男女主人公过的那样，平淡，烦躁，偶尔有点阳光，能够讲述的大概也就是些平淡无奇的故事。</p>

<p>一直很佩服身边的一些朋友和同事，他们能够把一件事情坚持两三年，有些人跑地并不快，但是他们总能比你更加坚持，跑得更远，和他们相比，我的生活是不是太过肤浅，似乎从来没有坚持一件事情超过一年，对于那个超过一年的世界，我陌生无比，这大概是因为我一直都比较缺乏意志力和专注力。</p>

<p>旧世界纵然舒适无比，但是前方永远有一个更吸引人，更宽广，更深邃的世界，多年以后，希望在那个世界遇见更好的自己。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代码之美]]></title>
    <link href="http://khotyn.github.com/blog/2013/10/16/beautiful-code/"/>
    <updated>2013-10-16T00:55:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/10/16/beautiful-code</id>
    <content type="html"><![CDATA[<p>今天的工作基本上就是在重构实习生写的 JS 代码，改的昏天暗地，他们基本把整个工程的 JS 代码都放到了一个文件中，代码中一会儿以空格缩进，一会儿以 tab 缩进，到处都是不必要的变量，我的代码洁癖又犯了，忍不住直接进行了重构，对 JS 进行模块化的拆分，每一个模块都有相对独立的功能，改了之后舒畅了很多，就像拿掉了卡在喉咙中鱼刺。</p>

<p>工作这几年以来，我也遇到过几个和我一样，有着或者或少代码洁癖的人，看到 IDE 中出现的警告信息就会感到不舒服（从 Eclipse 转到 Intellij IDEA 以后，洁癖的程度越来越严重了，Intellij IDEA 会对你的代码风格做更彻底的检查），看到以 tab 来做缩进简直就像看到异教徒一样，看到代码中已经被注释掉的废弃代码那肯定得马上删掉。</p>

<p>可惜的是，工作遇到的更多的人，在这方面要随意的多，他们更多追求的是把工作完成，让功能能够跑起来，其实一定程度上来说，他们是对的，他们是更加实用主义的程序员，实用主义能够帮助我们更快地达到自己的目标，而不会被和目标无关的东西所牵绊。但是，我觉得，一个程序员在追求程序的实用主义的时候，也应该去追求程序本身的美感。</p>

<p>或许有人会问，什么是程序的美感，关于这一点，我们可以从很多的侧面去描述：</p>

<ul>
  <li>更人性化的用户体验</li>
  <li>更简洁的架构</li>
  <li>程序内一致的代码风格</li>
  <li>更易读的代码</li>
</ul>

<p>但是，“美”本身是用语言是无法完整描述的，你可以说娜塔丽•波特曼很美，你也可以说加西莫多很多，但是他们之间的差距是如此之大，除了他们都是人之外你都找不到他们的共同点。所以“美”就是“美”，只有你身在其中的时候你才能够感受到。</p>

<p>或许对于很多人而言，“代码美”根本就是个扯淡的东西。其实写代码的过程和做木工的过程是很像的，说白了，都是设计出一样东西，然后拿来用而已。看看下面的无印良品木制家居，不得不承认，它比我们平时从市面上看到的普通的木制家居要舒服地多。同样一段代码也可以比另一段代码看起来更加“舒服”，更加“美”，只是每一个人对这种“美”的感受能力不同而已，有些能够感受到，有些不能感受到（在这一点上，不得不承认，我对“代码美”的感受能力是比较差的）。</p>

<p><img src="http://pic.yupoo.com/khotyn/DePKb6au/13WWB6.png" alt="image" /></p>

<p>想要去培养这种对“程序美”的感受能力，一个很好的方式就是去阅读优秀的开源代码，比如 Tomcat，Dubbo 等等，有时候，当你看到一段不错的代码，一个简洁的有用的架构设计的时候，你会感到来自内心深处的愉悦，这就是“美”的一个侧面。我相信，培养这样的感受能力，是非常有益于身心健康的，并且我也相信那些透露出“美”的代码在某种程度上也是更加优秀的代码（内王而外圣）。</p>

<p>这个世界已经够丑陋了，如果我们已经解决了温饱问题，又有了这么多的自由时间，不如做点“漂亮”点的东西出来，写一些更有用，更“美”的代码出来~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[乐观错觉与悲观现实]]></title>
    <link href="http://khotyn.github.com/blog/2013/10/15/positive-illusion-and-depressive-realism/"/>
    <updated>2013-10-15T01:17:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/10/15/positive-illusion-and-depressive-realism</id>
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/mw690/61c0c922gw1e055mycdv7j.jpg" alt="image" /></p>

<p>近日在读阿兰•德波顿的<a href="http://book.douban.com/subject/10594802/">「写给无神论者」</a>，里面提到基督教的人性本恶的观点给人带来的好处，当你对一件事情的结果期望并不高的时候，那么当结果出现一点好处的时候，你就会感到很快乐；相反，当你对一件事情有着过高的期望，最后结果并不令人满意的时候，你就会感到失落，绝望。</p>

<p>德波顿这样捧高悲观，而贬低乐观有点太偏颇了。但是，在各种舆论阵地上，“悲观主义”都在被不公正地对待，各个社交网络上永远都是“正能量”，“乐观”，“积极向上”，每一个人似乎都非常排斥“悲观主义”，我想悲观的人大概也比较受人讨厌。</p>

<p>诚然，过分地悲观会无情地伤害你的心灵，<a href="http://zh.wikipedia.org/wiki/%E5%A4%AA%E5%AE%B0%E6%B2%BB">太宰治</a>（愿我们都不要成为他那样的人）笔下的叶藏就是个典型的例子，由于对人类普遍的失望，叶藏一直都是郁郁寡欢、懦弱怕事，不断地和遇到他的女子殉情，最终失去了为人的资格。但是适度地悲观是非常有善的。现实是现实，到了一个人的心中，就成了“心中的现实”。当一个人处于乐观的状态下的时候，往往会对高估了现实的状况，而轻微悲观的人“心中的现实”更加接近实际的现实，他们能够更加准确地估计到现实中可能存在的一些问题，并且做好相应的准备，在问题真正到来的时候不会惊慌失措，因而能够保持更加稳定，更加健康的心理状态。</p>

<p>而那些盲目的乐观主义者（我们的周围不缺乏这样的人），由于对现实有着过高的认识和期望，对问题认识不足，月盈而亏，当结果不尽如人意的时候，各种负面情绪就会出现。你以为你有光明的未来，以为有特殊的才能，但是，到最后却发现你不过是芸芸众生中平凡的一员，很多中年人的失落就是来源于此吧。</p>

<p>所以，与其做个乐观主义者，不如做个悲观的行动主义者，与其相信有那种可能性，不如自己去寻找那种可能性，并且为可能的失败做好准备（成功永远都是属于少数人的）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git flow 分支管理模型简介]]></title>
    <link href="http://khotyn.github.com/blog/2013/10/01/git-flow/"/>
    <updated>2013-10-01T10:43:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/10/01/git-flow</id>
    <content type="html"><![CDATA[<p>有一次和 <a href="https://twitter.com/imsoz">@imsoz</a> 在聊天的时候，他给我介绍了一个叫做 Git flow 的分支管理模型，我听了很有兴趣，于是昨天花了一点时间去了解了一下。</p>

<h4 id="git-flow-">Git flow 分支模型</h4>

<p>Git flow 是一个分支模型，它提供了一个经过实践检验的分支管理的模型。整个分支模型的工作图大概是下面这样样子的：</p>

<p><img src="http://nvie.com/img/2009/12/Screen-shot-2009-12-24-at-11.32.03.png" alt="image" /></p>

<p>它包含有两个长期分支和三个支持的分支：</p>

<ul>
  <li>master 分支：使用过 git 的同学应该都这个分支很熟悉，这个分支代表了可以用于生产环境的代码。</li>
  <li>develop 分支：用于开发的分支，或者叫做“集成分支”，这里的代码可以用来做 nightly build。</li>
</ul>

<p>上面两个是长期的分支，这两个分支在开发的过程中会一直存在下去。除了这两个长期分支，还有三个用于支持的分支：</p>

<ul>
  <li>feature 分支：一般上从 develop 分支拉出来，最后要 merge 回 develop 分支，或者废弃掉。feature 分支是用来开发一个在下一次的产品 release 中可能被加上去的特性的，一个 feature 分支在特性开发完毕后就结束了，所以 feature 分支只是短暂地存在。</li>
  <li>release 分支：release 分支用来支持准备一个将要被 release 的产品版本，在这个分支上，我们可能会修改版本号，做一些 release 相关的事情，或者做一些 bug 的 hotfix，release 分支从 develop 分支拉出来，当你认为你的下一次的 release 所需要的特性都已经开发完毕的时候，你就可以从 develop 分支拉出 release 分支来，最后 release 分支需要 merge 回 develop 分支和 master 分支。</li>
  <li>hotfix 分支：顾名思义，hotfix 分支就是当生产环境的代码出现了重大的 bug 的时候需要的分支，这个时候你可以从 master 分支中拉出一个 hotfix 分支，在修复完 bug 后，记得要把 hotfix 的分支合并回到 develop 和 master 分支上。</li>
</ul>

<p>上面就是 Git flow 的整个分支模型，相对来说还是比较简单的，更加具体的说明可以看这篇关于 Git flow 分支模型最原始的 blog：<a href="http://nvie.com/posts/a-successful-git-branching-model/">http://nvie.com/posts/a-successful-git-branching-model/</a></p>

<h4 id="git-flow--1">Git flow 扩展</h4>

<p>但是有一个问题就是上面的这些分支的创建，合并，删除等等操作，都是需要好几步的，比较费时间，费精力，Git flow 还提供了一个 git 的扩展，让我们可以非常方便地在项目中使用上述的分支模型，具体的使用方式作者都已经写在了 github 上，大家可以自己去看：<a href="https://github.com/nvie/gitflow">https://github.com/nvie/gitflow</a>。在 Mac 下可以用 <code>brew install git-flow</code> 来安装。</p>

<p>之前我也了解过 git 的一些使用，并且已经在一些项目中尝试去使用 git，但是在分支管理这一块一直比较头疼，而 Git flow 恰好给我提供了一个现成的经过实践的分支模型，刚好公司后面有一个项目可能也会用到 git，到时候我会尝试下在项目组中推广使用 Git flow，让实践去检验一把。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Bean 的布尔类型属性获取问题]]></title>
    <link href="http://khotyn.github.com/blog/2013/09/25/java-bean-boolean/"/>
    <updated>2013-09-25T18:38:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/09/25/java-bean-boolean</id>
    <content type="html"><![CDATA[<h3 id="velocity--java-bean-">Velocity 对 Java Bean 中布尔类型的属性的获取问题</h3>

<p>今天朋友遇到一个问题，是 Velocity 下面一个 <code>Boolean</code> 类型的变量在模板上没有办法输出，我大致简化一下这个问题，现在我们有一个简单的 Java Bean：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleBean</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">Boolean</span> <span class="n">hasKatong</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">isHasKatong</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">hasKatong</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setHasKatong</span><span class="o">(</span><span class="n">Boolean</span> <span class="n">hasKatong</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">hasKatong</span> <span class="o">=</span> <span class="n">hasKatong</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后有一个简单的模板：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">$simpleBean</span><span class="o">.</span><span class="na">hasKatong</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>模板合并的代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Properties</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class="line">    <span class="n">p</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;resource.loader&quot;</span><span class="o">,</span> <span class="s">&quot;class&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="n">p</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;class.resource.loader.class&quot;</span><span class="o">,</span>
</span><span class="line">        <span class="s">&quot;org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="n">Velocity</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class="line">    <span class="n">VelocityContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VelocityContext</span><span class="o">();</span>
</span><span class="line">    <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;simpleBean&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">SimpleBean</span><span class="o">());</span>
</span><span class="line">    <span class="n">Template</span> <span class="n">template</span> <span class="o">=</span> <span class="n">Velocity</span><span class="o">.</span><span class="na">getTemplate</span><span class="o">(</span><span class="s">&quot;mytemplate.vm&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="n">StringWriter</span> <span class="n">sw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">();</span>
</span><span class="line">    <span class="n">template</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">sw</span><span class="o">);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sw</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>大家猜测一下这段代码的输出会是什么？可能大多数人都会认为是 <code>false</code>，但是在 Velocity 1.5 下，这段代码不会输出任何东西，反而会有一个 Warning：</p>

<blockquote>
  <p>INFO: Null reference [template ‘mytemplate.vm’, line 1, column 1] : $simpleBean.hasKatong cannot be resolved.</p>
</blockquote>

<p>而在 Velocity 1.7 下，输出就是如大家所预测的那样，是 <code>false</code>。</p>

<p>具体的分析过程并不复杂，Velocity 1.5 和 1.7 在寻找 isXXXX 这样的方法的时候处理稍微有一点不一样，具体在 <code>BooleanPropertyExecutor</code> 这个类上，在找到方法，对方法的返回值的判断上有一点不一样，1.5 是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">if</span> <span class="o">(</span><span class="n">isAlive</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">getMethod</span><span class="o">().</span><span class="na">getReturnType</span><span class="o">()</span> <span class="o">!=</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">setMethod</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而 1.7 的是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">if</span> <span class="o">(</span><span class="n">isAlive</span><span class="o">())</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">    <span class="k">if</span><span class="o">(</span> <span class="n">getMethod</span><span class="o">().</span><span class="na">getReturnType</span><span class="o">()</span> <span class="o">!=</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">TYPE</span> <span class="o">&amp;&amp;</span>
</span><span class="line">        <span class="n">getMethod</span><span class="o">().</span><span class="na">getReturnType</span><span class="o">()</span> <span class="o">!=</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">class</span> <span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="n">setMethod</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到，1.7 中增加了对返回值是 <code>Boolean</code> 的支持，而 1.5 只支持返回值是 <code>boolean</code> 的方法，那么既然知道了问题的根本原因，解决方法就显而易见了，要么将 <code>hasKatong</code> 这个属性的类型从 <code>Boolean</code> 改成 <code>boolean</code>，要么修改下 velocity 的模板，将属性获取直接改成方法调用：<code>$simpleBean.isHasKatong()</code>。</p>

<h3 id="java-bean-">Java Bean 规范对布尔类型属性的定义</h3>

<p>当然，照理说像 velocity 这样的著名开源组件，不应该在这种问题上犯错误，然后我看了一下 Java Bean 的规范：</p>

<p><img src="http://pic.yupoo.com/khotyn/DbKXKmwa/medish.jpg" alt="image" /></p>

<p>其实这段话已经说的很清楚了，只有原生类型的 <code>boolean</code> 的 Accessor 方法才能够用 <strong>is</strong> 前缀，其他的都用 get，其实在 JDK 的 Introspector 的实现中，也是这样处理的。</p>

<p>那么，这么看来，Velocity 1.5 的处理是正确的，那么 1.7 增加对 <code>Boolean</code> 的支持是为什么呢？</p>

<p>其实，Java Bean 的规范在 <code>is</code> 这种 Accessor 的规定上，是有点不怎么符合开发人员的直觉的，很多人都会在这个问题上纠结：<strong><code>Boolean</code> 类型的属性的 Accessor 是不是应该用 is 开头？</strong>，我觉得大部分人的直觉对这个答案的回答应该都是<em>是</em>，所以 Velocity 这样处理只不过是顺着大多数人的直觉的意思罢了，无可厚非。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「了不起的盖茨比」]]></title>
    <link href="http://khotyn.github.com/blog/2013/09/21/the-great-gatsby/"/>
    <updated>2013-09-21T21:46:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/09/21/the-great-gatsby</id>
    <content type="html"><![CDATA[<p><img src="http://pic.yupoo.com/khotyn/DbacwzbA/T4XiW.png" alt="image" /></p>

<p>我们继续奋力向前，逆水行舟，被不断地向后推，直至回到往昔岁月。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[致加西亚的信--一本应该留在过去的书]]></title>
    <link href="http://khotyn.github.com/blog/2013/09/21/a-message-to-garcia/"/>
    <updated>2013-09-21T12:44:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/09/21/a-message-to-garcia</id>
    <content type="html"><![CDATA[<p><img src="http://pic.yupoo.com/khotyn/Db71zdyA/medish.jpg" style="float: left; margin-right: 20px;" /></p>

<p>我承认这次我又冲动了，竟然买了一本这样的一本书，本以为应该是一本不错的书，看完了却发现就是「读者」上面的那些小故事的档次啊。果然下决定看一本书之前还是得去豆瓣上稍微看一些书评，这不，一不小心又看了一本励志的、成功学的书，让人好郁闷不是。</p>

<p>当然，如果「致加西亚的信」真的是那种成功学或励志的书，也就罢了，虽然这些书大部分的时候毫无用处，但是至少在你低落的时候，还能够给你一点强行针的效果，但是「致加西亚的信」这本书却是一点吸引力都没有，情节没有任何跌倒起伏，人物也看不出有什么特点。一个军人，完成了总统交给的命令，都能够让作者联想到现在的企业的员工太矫情，上级交给的任务不能一声不吭的就直接完成，我想作者大概是被过度洗脑了吧，当然，我也不好去恶意揣测一个一百多年前的作者的想法，但是这本书对于现在来说，真的是一无是处啊。</p>

<p>「致加西亚的信」企图用军人上下级之间的关系来说明企业内部的员工的上下级关系，这样的行为显然是不对的，军队是一个要求高执行力的地方，但是企业不一样，企业不仅仅要看中一个员工的执行力，还需要看看员工的创造力，而对人性的压制必然会导致创造力的泯灭，每一个员工都有自己的特点，有自己的个性，你不能要求他像一个军人一样，接到任务就一股脑去做，做一件事情之前，了解这件事情相关的东西那都是必须的，期间必然会和上级之间有一个交流的过程，不可能拿到任务过几天就直接给上级一个结果。</p>

<p>另外，「致加西亚的信」里面还提到员工的忠诚度的问题，这个话题刚好之前和朋友聊天的时候谈到过，这位朋友的想法和我的比较接近，我们都认为个人和公司的最基本关系就在于那一张劳动合同，无所谓忠诚度。<strong>一段能够持久下去的关系（无论这是什么关系），肯定是双方相互付出的结果，一段只有单方面付出的关系是不会长久的。</strong>所以啊，当企业的管理者们在抱怨员工的忠诚度的时候，不妨也想想自己的公司能够给员工带来什么东西，是不是符合员工在这家公司所付出的东西。（<strong>「忠诚」这个词，和「感恩」是一样的，都只能是对自己的要求，而不能要求别人「忠于你」或者对你「感恩」</strong>）</p>

<p>但是不可否认，当我们在一家公司呆久了以后，肯定会存在这一些感情，但是如果你仔细分析这些感情，你会发现，这些感情都是你和某些同事之间的感情（难保你会和某些人相处地比较好，另一些相处地并不好），多年以后，你怀念的可能是某个深夜和同事们一起加班为项目做冲刺，可能是一次让你们非常怀念的 outing，所以，所谓感情，那是指人和人之间的感情，作为一个集体的公司，我认为就是只有利益罢了，我付出我的劳动，公司给我应有的回报，这些回报包括成长机会，工资，股票，还有其他的福利等等。</p>

<p>当然，「致加西亚的信」是一本销量达到 4000 万的畅销书，这样的销量肯定有其存在的理由，或许是我们这个时代的人已经和过去的时代的人大不相同了~，这是一本适合于那个时代的书，并不符合我们的时代，应该永远都留在那个时代。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理想的下午]]></title>
    <link href="http://khotyn.github.com/blog/2013/09/14/perfect-afternoon/"/>
    <updated>2013-09-14T21:50:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/09/14/perfect-afternoon</id>
    <content type="html"><![CDATA[<p>每个人都有自己理想的下午，有些人喜欢在家里宅着躺在床上，被子病了得有人照顾不是？有些人喜欢在一个秋季的阳光明媚的下午，约几个好友爬山登高，流一把汗，呼吸呼吸新鲜的空气。有些人喜欢把家里打扫的干干净净，然后美滋滋地看上一部喜欢的电影。</p>

<p>而我的理想的下午，不在家，那必须是个安静的地方，稍微有点人气，不至于感到寂寞，看一本自己喜欢的书，把自己沉浸在一个或美好，或悲伤的故事里，或者写一些代码，精炼自己的技艺，让自己对这个世界的理解更进一步。</p>

<p>理想的下午，约上几个志同道合的朋友是必须的，不必太多，一两个就成，有着一些共同的想法，追求着共同的理想，相互知道对方的一些秘密，相互之间有一些默契，需要的时候交流交流彼此的想法，从对方身上学一些东西，但也不必为各自的沉默而感到尴尬。</p>

<p>每个人都有自己状态最棒的时候，而我感觉最好的时候，便是在这样一个理想的下午，不必为生活或者工作上的事情烦心，放下心中的焦虑与不安，那是完完全全属于你自己的下午，在这样的下午，你只干自己喜欢的事情；在这样的下午，你真真切切感受到生活的温度；在这样的下午，做回真真的自己。</p>

<p>对了，就像一次长跑，完全沉浸在跑步的节奏里面，你无需知道终点到底在什么地方，需要做的只是找到自己的节奏，迈开脚步向前跑~，在这种状态下，你可以放下包袱自由地思考，思考生命和星空的意义，思考“从哪里来”、“到哪里去”这样的究级的问题，而不必担心别人说你不着边际。</p>

<p>嗯~，给自己多几个理想的下午，算是自私一点吧，在这些理想的下午，完完全全地为自己而活~</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring 事务的传播特性]]></title>
    <link href="http://khotyn.github.com/blog/2013/09/14/spring-tx-propagation/"/>
    <updated>2013-09-14T18:06:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/09/14/spring-tx-propagation</id>
    <content type="html"><![CDATA[<p>最近工作中涉及到了一个分布式事务的产品，这个产品是在 Spring 的事务上做的，我对其中涉及到的 Spring 的事务的传播特性不是很了解，所以今天花了一个下午的时间认真了解了一下，写了一堆的测试代码。</p>

<p>进入正题，Spring 的事务的传播特性分为以下的七种：</p>

<ul>
  <li>PROPAGATION_REQUIRED</li>
  <li>PROPAGATION_SUPPORTS</li>
  <li>PROPAGATION_MANDATORY</li>
  <li>PROPAGATION_REQUIRES_NEW</li>
  <li>PROPAGATION_NOT_SUPPORTED</li>
  <li>PROPAGATION_NEVER</li>
  <li>PROPAGATION_NESTED</li>
</ul>

<p>下面一种种来解释：</p>

<h4 id="propagationrequired">PROPAGATION_REQUIRED</h4>

<p>默认的事务传播特性，通常情况下我们用这个事务传播特性就可以了。如果当前事务上下文中没有事务，那么就会新创建一个事务。如果当前的事务上下文中已经有一个事务了，那么新开启的事务会开启一个新的逻辑事务范围，但是会和原有的事务共用一个物理事务，我们暂且不关心逻辑事务和物理事务的区别，先看看这样会导致怎样的代码行为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">txRollbackInnerTxRollbackPropagationRequires</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">transactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">transactionStatus</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span> <span class="s">&quot;Huang&quot;</span><span class="o">,</span>
</span><span class="line">                <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">transactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="nd">@Override</span>
</span><span class="line">                <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span>
</span><span class="line">                        <span class="s">&quot;Huang&quot;</span><span class="o">,</span> <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">                    <span class="c1">// 内部事务设置了 setRollbackOnly，</span>
</span><span class="line">                    <span class="n">status</span><span class="o">.</span><span class="na">setRollbackOnly</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">});</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">});</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这段代码在一个嵌套的事务内部（内外层的事务都是 PROPAGATION_REQUIRED 的）设置了回滚，那么对于外部的事务来说，它会收到一个 <code>UnexpectedRollbackException</code>，因为内部的事务和外部的事务是共用一个物理事务的，所以显然内部的事务必然会导致外部事务的回滚，但是因为这个回滚并不是外部事务自己设置的，所以外层事务回滚的时候会需要抛出一个 <code>UnexpectedRollbackException</code>，让事务的调用方知道这个回滚并不是外部事务自己想要回滚，是始料未及的。</p>

<p>但是，如果内层的事务不是通过设置 <code>setRollbackOnly()</code> 来回滚，而是抛出了 <code>RuntimeException</code> 来回滚，那么外层的事务接收到了内层抛出的 <code>RuntimeException</code> 也会跟着回滚，这个是可以预料到的行为，所以不会有 <code>UnexpectedRollbackException</code> 。</p>

<h4 id="propagationsupports">PROPAGATION_SUPPORTS</h4>

<p>PROPAGATION_SUPPORTS 的特性是如果事务上下文中已经存在一个事务，那么新的事务（传播特性为 PROPAGATION_SUPPORTS）就会和原来的事务共用一个物理事务，其行为和 PROPAGATION_REQUIRED 一样。但是，如果当前事务上下文中没有事务，那么 PROPAGATION_SUPPORTS 就按无事务的方式执行代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">txRollbackInnerTxRollbackPropagationSupports</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">supportsTransactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span> <span class="s">&quot;Huang&quot;</span><span class="o">,</span>
</span><span class="line">                <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="k">throw</span> <span class="k">new</span> <span class="nf">CustomRuntimeException</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">});</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看上面这段代码，虽然我们在事务（PROPAGATION_SUPPORTS 的）中抛出了一个 <code>RuntimeException</code>，但是因为其事务上下文中没有事务存在，所以这段代码实际上是以无事务的方式执行的，因此代码中的 <code>jdbcTemplate.update()</code> 操作也不会被回滚。</p>

<h4 id="propagationmandatory">PROPAGATION_MANDATORY</h4>

<p>PROPAGATION_MANDATORY 要求事务上下文中必须存在事务，如果事务上下文中存在事务，那么其行为和 <code>PROPAGATION_REQUIRED</code> 一样。如果当前事务上下文中没有事务，那么就会抛出 <code>IllegalTransactionStateException</code>，比如下面这段代码就会这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">txRollbackInnerTxRollbackPropagationMandatory</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">mandatoryTransactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">transactionStatus</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span> <span class="s">&quot;Huang&quot;</span><span class="o">,</span>
</span><span class="line">                <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">});</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="propagationrequiresnew">PROPAGATION_REQUIRES_NEW</h4>

<p>PROPAGATION_REQUIRES_NEW 无论当前事务上下文中有没有事务，都会开启一个新的事务，并且和原来的事务完全是隔离的，外层事务的回滚不会影响到内层的事务，内层事务的回滚也不会影响到外层的事务（<strong>这个说法得稍微打点折扣：因为如果内层抛出 <code>RuntimeException</code> 的话，那么外层还是会收到这个异常并且触发回滚</strong>），我们分析下几段代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">txRollbackInnerTxRollbackPropagationRequiresNew</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">transactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">transactionStatus</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="n">requiresNewTransactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="nd">@Override</span>
</span><span class="line">                <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span>
</span><span class="line">                        <span class="s">&quot;Huang&quot;</span><span class="o">,</span> <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">});</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// 外部事务发生回滚，内部事务应该不受影响还是能够提交</span>
</span><span class="line">            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">});</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这段代码外层的事务回滚了，但是不会影响到内层的事务的提交，内层事务不受外层的事务的影响。再看：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">txRollbackInnerTxRollbackPropagationRequiresNew2</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">transactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">transactionStatus</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span> <span class="s">&quot;Huang&quot;</span><span class="o">,</span>
</span><span class="line">                <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="c1">// Nested transaction committed.</span>
</span><span class="line">            <span class="n">requiresNewTransactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="nd">@Override</span>
</span><span class="line">                <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span>
</span><span class="line">                        <span class="s">&quot;Huang&quot;</span><span class="o">,</span> <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">                    <span class="c1">// 内部事务发生回滚，但是外部事务不应该发生回滚</span>
</span><span class="line">                    <span class="n">status</span><span class="o">.</span><span class="na">setRollbackOnly</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">});</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">});</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这段代码在内层事务上设置了 <code>setRollbackOnly</code>，内层事务肯定会回滚，但是由于内层事务和外层事务是隔离的，所以外层事务不会被回滚。再看：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">txRollbackInnerTxRollbackPropagationRequiresNew3</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">transactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">transactionStatus</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span> <span class="s">&quot;Huang&quot;</span><span class="o">,</span>
</span><span class="line">                <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">            <span class="n">requiresNewTransactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="nd">@Override</span>
</span><span class="line">                <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span>
</span><span class="line">                        <span class="s">&quot;Huang&quot;</span><span class="o">,</span> <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">                    <span class="c1">// 内部事务抛出 RuntimeException，外部事务接收到异常，依旧会发生回滚</span>
</span><span class="line">                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">});</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">});</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这段代码在内层事务抛出了一个 <code>RuntimeException</code>，虽然内层事务和外层事务在事务上是隔离，但是 <code>RuntimeException</code> 显然还会抛到外层去，所以外层事务也会发生回滚。</p>

<h4 id="propagationnotsupported">PROPAGATION_NOT_SUPPORTED</h4>

<p>PROPAGATION_NOT_SUPPORTED 不管当前事务上下文中有没有事务，代码都会在按照无事务的方式执行，看下面这段代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">txRollbackInnerTxRollbackPropagationNotSupport</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">transactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">transactionStatus</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span> <span class="s">&quot;Huang&quot;</span><span class="o">,</span>
</span><span class="line">                <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">notSupportedTransactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="nd">@Override</span>
</span><span class="line">                <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span>
</span><span class="line">                        <span class="s">&quot;Huang&quot;</span><span class="o">,</span> <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">});</span>
</span><span class="line">            <span class="c1">// 外部事务回滚，不会把内部的也连着回滚 </span>
</span><span class="line">            <span class="n">transactionStatus</span><span class="o">.</span><span class="na">setRollbackOnly</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">});</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面这段代码中虽然外部事务发生了回滚，但是由于内部的事务是 PROPAGATION_NOT_SUPPORTED，根本不在外层的事务范围内，所以内层事务不会发生回滚。</p>

<h4 id="propagationnever">PROPAGATION_NEVER</h4>

<p>PROPAGATION_NEVER 如果当前事务上下文中存在事务，就会抛出 <code>IllegalTransactionStateException</code> 异常，自己也会按照非事务的方式执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">txRollbackInnerTxRollbackPropagationNever2</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">transactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">transactionStatus</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span> <span class="s">&quot;Huang&quot;</span><span class="o">,</span>
</span><span class="line">                <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">neverTransactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="nd">@Override</span>
</span><span class="line">                <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span>
</span><span class="line">                        <span class="s">&quot;Huang&quot;</span><span class="o">,</span> <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">});</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">});</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>比如上面这段代码，在一个 PROPAGATION_REQUIRES 里面嵌入了一个 PROPAGATION_NEVER，内层就会抛出一个 <code>IllegalTransactionStateException</code>，导致外层事务被回滚。</p>

<h4 id="propagationnested">PROPAGATION_NESTED</h4>

<p>PROPAGATION_NESTED 只能应用于像 DataSource 这样的事务，可以通过在一个事务内部开启一个 PROPAGATION_NESTED 而达到一个事务内部有多个保存点的效果，一个内嵌的事务发生回滚，只会回滚到它自己的保存点，外层事务还会继续，比如下面这段代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">txRollbackInnerTxRollbackPropagationNested</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">nestedTransactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">transactionStatus</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span> <span class="s">&quot;Huang&quot;</span><span class="o">,</span>
</span><span class="line">                <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">            <span class="n">nestedTransactionTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">TransactionCallbackWithoutResult</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="nd">@Override</span>
</span><span class="line">                <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doInTransactionWithoutResult</span><span class="o">(</span><span class="n">TransactionStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;insert into user (name, password) values (?, ?)&quot;</span><span class="o">,</span>
</span><span class="line">                        <span class="s">&quot;Huang&quot;</span><span class="o">,</span> <span class="s">&quot;1111112&quot;</span><span class="o">);</span>
</span><span class="line">                    <span class="c1">// 内部事务设置了 rollbackOnly，外部事务应该不受影响，可以继续提交</span>
</span><span class="line">                    <span class="n">status</span><span class="o">.</span><span class="na">setRollbackOnly</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">});</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">});</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>内层的事务发生了回滚，只会回滚其内部的操作，不会影响到外层的事务。</p>

<h3 id="section">总结</h3>

<p>Spring 的事务传播特性种类繁多，大多数都来自于 EJB 的事务，大家可以自己写一些小的程序来测试 Spring 各个事务特性的行为，加深印象，我自己也写了一个工程，通过单元测试去测试各个事务传播特性的行为，大家有兴趣的话，可以下过来跑一下：<a href="https://github.com/khotyn/spring-tx-test">https://github.com/khotyn/spring-tx-test</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从 JVM 中 dump class 的几种方法]]></title>
    <link href="http://khotyn.github.com/blog/2013/08/03/dumping-class-from-jvm/"/>
    <updated>2013-08-03T14:04:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/08/03/dumping-class-from-jvm</id>
    <content type="html"><![CDATA[<p>前几天在 HotCode 的用户群里面，有同学问起“如何将 JVM 中的 class dump 出来”，当时我下意识的回答就是“可以在 JVM 启动的时候挂一个 agent 上去，然后通过 Instrumentation API 在 class 加载的时候做拦截，把类 dump 出来。”，今天无聊在翻 <a href="http://weibo.com/rednaxelafx">R 大</a>的<a href="http://rednaxelafx.iteye.com/blog/727938">博客</a>的时候，发现还可以通过 sa-jdi.jar 里面的一个类做 dump，这里就集中介绍一下这几个方法，然后介绍我在 sa-jdi.jar 基础上改的一个小工具。</p>

<h3 id="classloadergetresourceasstream">采用 classLoader.getResourceAsStream()</h3>

<p>将一个类从 JVM 中 dump 出来，最简单的方法当然就是直接从 jar 包中把对应的 class 文件找到，然后 dump 出来了，我们可以用 <code>classLoader</code> 的 <code>getResourceAsStream</code> 来做：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">ClassLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getContextClassLoader</span><span class="o">();</span>
</span><span class="line"><span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;com/khotyn/Test.class&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>拿到 InputStream 后，你就可以随便玩了。</p>

<p>这个方法简单是简单，但是缺点也很明显，在有些 Java 程序中，类不一定是从 Class 文件中过来，有些是在运行时生成的，有些则在载入到 JVM 之前被增强过，所以这个方法有些类是 dump 不出来的，有些类则 dump 出来不是你想要的。</p>

<h3 id="javaagent">采用 javaagent</h3>

<p>另外一个方法是通过在 JVM 启动的时候挂在一个 javaagent，然后用 Instrucmentation API 在类被加载到虚拟机之前做拦截，参考代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">khotyn</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.lang.instrument.ClassFileTransformer</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.lang.instrument.IllegalClassFormatException</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.lang.instrument.Instrumentation</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.security.ProtectionDomain</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.commons.io.FileUtils</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * A demo to demonstrate how to use JVM ti to dump class file from JVM.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * @author khotyn.huangt 13-8-3 PM2:21</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AgentMain</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">premain</span><span class="o">(</span><span class="n">String</span> <span class="n">agentArgs</span><span class="o">,</span> <span class="n">Instrumentation</span> <span class="n">inst</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">inst</span><span class="o">.</span><span class="na">addTransformer</span><span class="o">(</span><span class="k">new</span> <span class="n">ClassFileTransformer</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">transform</span><span class="o">(</span><span class="n">ClassLoader</span> <span class="n">loader</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">classBeingRedefined</span><span class="o">,</span>
</span><span class="line">                                    <span class="n">ProtectionDomain</span> <span class="n">protectionDomain</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">classfileBuffer</span><span class="o">)</span>
</span><span class="line">                                                                                              <span class="kd">throws</span> <span class="n">IllegalClassFormatException</span> <span class="o">{</span>
</span><span class="line">                <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">FileUtils</span><span class="o">.</span><span class="na">writeByteArrayToFile</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/tmp/&quot;</span> <span class="o">+</span> <span class="n">className</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;.&#39;</span><span class="o">,</span> <span class="sc">&#39;/&#39;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;.class&quot;</span><span class="o">),</span>
</span><span class="line">                                                   <span class="n">classfileBuffer</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="c1">// Quite</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">});</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将上面的代码打成一个 jar 包（<em>注意把依赖的 apache commons.io 也打入，也可以直接下载我的 demo 工程：<a href="http://pan.baidu.com/share/link?shareid=778648109&amp;uk=607430891">agentDumpClass.zip</a></em>），然后在 jar 包的 <code>META-INF/MANIFEST.MF</code> 中填上如下的内容：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Manifest</span><span class="o">-</span><span class="nl">Version:</span> <span class="mf">1.0</span>
</span><span class="line"><span class="n">Boot</span><span class="o">-</span><span class="n">Class</span><span class="o">-</span><span class="nl">Path:</span> <span class="n">agentDump</span><span class="o">.</span><span class="na">jar</span>
</span><span class="line"><span class="n">Built</span><span class="o">-</span><span class="nl">By:</span> <span class="n">apple</span>
</span><span class="line"><span class="n">Build</span><span class="o">-</span><span class="nl">Jdk:</span> <span class="mf">1.7</span><span class="o">.</span><span class="mi">0</span><span class="n">_17</span>
</span><span class="line"><span class="n">Class</span><span class="o">-</span><span class="nl">Path:</span> <span class="n">lib</span><span class="o">/</span><span class="n">commons</span><span class="o">-</span><span class="n">io</span><span class="o">-</span><span class="mf">2.4</span><span class="o">.</span><span class="na">jar</span>
</span><span class="line"><span class="n">Premain</span><span class="o">-</span><span class="nl">Class:</span> <span class="n">com</span><span class="o">.</span><span class="na">khotyn</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">AgentMain</span>
</span><span class="line"><span class="n">Created</span><span class="o">-</span><span class="nl">By:</span> <span class="n">Apache</span> <span class="n">Maven</span>
</span><span class="line"><span class="n">Can</span><span class="o">-</span><span class="n">Redefine</span><span class="o">-</span><span class="nl">Classes:</span> <span class="kc">true</span>
</span><span class="line"><span class="n">Archiver</span><span class="o">-</span><span class="nl">Version:</span> <span class="n">Plexus</span> <span class="n">Archiver</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后你就可以执行类似于下面的命令来进行 dump 了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">java</span> <span class="o">-</span><span class="nl">javaagent:</span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">apple</span><span class="o">/</span><span class="n">workspace</span><span class="o">/</span><span class="n">agentDumpClass</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">agentDump</span><span class="o">.</span><span class="na">jar</span> <span class="n">Test</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>由于 premain 方法是在 java 程序的 main 方法执行之前执行的，所以这个方法几乎可以拦截到所有的类，另外，由于注册的 ClassFileTransformer 是 ClassLoader 加载 class 之后，JVM 定义 class 之前被执行的，所以无论是在运行时生成的类，还是经过增强后的类，这个方法都能够 dump 出来，比第一种方法要强很多。然而这个方法还是有一些缺点：</p>

<ul>
  <li>需要在 JVM 启动时增加特别的参数。</li>
  <li>只能随 class 被加载进行 dump，不能随时进行 dump</li>
</ul>

<h3 id="sa-jdijar--classdump-">采用 sa-jdi.jar 的 ClassDump 工具</h3>

<p>这个方式是 R 大在博客中介绍的方法，可以说是最强大的方法，不像前面的两个方法，这个方法可以在 JVM 进程外执行，且像 javaagent 的那个方法一样，都可以将运行时和被增强过的类 dump 出来，非常方便，至于具体的用法大家就直接看 <a href="http://rednaxelafx.iteye.com/blog/727938">R 大的文章</a>吧。</p>

<h3 id="classdump">改进 ClassDump</h3>

<p>ClassDump 工具虽然强大，但是命令略显繁琐，特别是当你只需要 dump 特定的类的时候，还需要专门写一个 ClassFilter 的实现类，这么好的工具，应该直接做成命令行工具才好，于是我修改了 ClassDump 的代码，让它可以支持正则表达式的方式来对需要 dump 的类进行过滤，改进后的 ClassDump 放在了我的 github 仓库上：<a href="https://github.com/khotyn/tools">https://github.com/khotyn/tools</a></p>

<p>大家可以直接用下面的方式来使用这个改进版：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">sudo</span> <span class="n">classDump</span> <span class="mi">17118</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">khotyn</span><span class="o">.*</span><span class="err">&#39;</span> <span class="n">dump</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>classDump 这个命令的第一个参数是目标 JVM 的 PID，第二个参数是一个正则表达式，表示你所要 Dump 出来的类，第三个参数可选，是 dump 的目录。</p>

<p>但是这个工具有一个缺点，就是目前只能在 Mac 下用（因为我用 Mac，呵呵，我把修改后的类直接打入到了 Mac 的 jdk 的 sa-jdi.jar 下面），不过要做其他的平台的也很简单啦，只要按照以下步骤来打包出自己的 sa-jdi.jar 就可以：</p>

<ul>
  <li>下载我修改过的两个类：<a href="http://pan.baidu.com/share/link?shareid=780474506&amp;uk=607430891">ClassDump.class</a>，<a href="http://pan.baidu.com/share/link?shareid=782905423&amp;uk=607430891">RegexClassFilter.class</a></li>
  <li>从 jdk 目录下拷贝一份 sa-jdi.jar 出来</li>
  <li>用下面的命令将修改过的两个类打到 sa-jdi.jar 中去：<code>jar uf sa-jdi.jar sun/jvm/hotspot/tools/jcore/ClassDump.class sun/jvm/hotspot/tools/jcore/RegexClassFilter.class</code></li>
  <li>然后配合仓库中的 classDump 脚本就可以用了。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Sed & Awk」阅读笔记之 Sed 高级命令]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/30/sed-part-two/"/>
    <updated>2013-07-30T21:41:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/30/sed-part-two</id>
    <content type="html"><![CDATA[<p>上一篇文章中，我介绍了一下 <a href="../../../../2013/07/28/sed-and-awk-part-one/">sed 的基础</a>，包括执行方式、地址选择器以及基本命令，在这一篇文章中，我们继续来了解一下 sed 的高级命令，之所以称它们为高级命令，是因为这些命令会改变 sed 的执行流，废话不说，我们来看看这些命令吧：</p>

<h3 id="section">高级命令</h3>

<h4 id="n-next">N (Next)</h4>

<p>这里要介绍的第一个命令是 <code>N</code>，它和我们前面介绍过的 <code>n</code> 命令很像，也是要读取下一行的内容，不同的是，<code>N</code> 读取下一行的内容并且将这些内容附加到 pattern space 当前的内容后面。这样，当你需要连着处理多行内容的时候，<code>N</code> 命令就会特别有用，比如，我们有下面一段文本：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">one two three four
</span><span class="line">one two three 
</span><span class="line">four three two
</span><span class="line">three four</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果我们要把 <code>two three four</code> 替换成 <code>2 3 4</code>，注意例子中的 <code>two three four</code> 可能在不同的行中，那么我们就可以用 <code>N</code> 命令来处理：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">N
</span><span class="line">s/\n/ /
</span><span class="line">s/two three four/2 3 4/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出的内容为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">one 2 3 4 one two three
</span><span class="line">four three 2 3 4</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个结果不是我们想要的，不过的确是符合了上面的 sed 脚本的执行结果：</p>

<ol>
  <li>首先，sed 脚本读取了文本的第一行，这个时候 pattern space 中的内容为 <code>one two three four</code></li>
  <li>然后 sed 脚本执行 N 命令，将下一行读取并附加到当前的 pattern space 内容的后面，这个时候，pattern space 中的内容就变为 <code>one two three four\none two three</code></li>
  <li>下一个命令，将换行符 <code>\n</code> 替换成一个空格，pattern space 中的内容为 <code>one two three four one two three</code></li>
  <li>然后下一个命令，将 pattern space 中的 <code>two three four</code> 替换成 <code>2 3 4</code>，这个时候 pattern space 中的内容为 <code>one 2 3 4 one two three</code></li>
  <li>到达脚本的结尾，输出 pattern space 中的内容，也就是我们输出内容的第一行。</li>
  <li>然后 sed 脚本读取文本的下一行，注意因为之前第二行已经被 <code>N</code> 命令读取了，所以 sed 脚本开始读取第三行，依旧按照前面的命令执行，最后就输出了输出内容中的第二行。</li>
</ol>

<p>虽然这个结果不是我们想要的，不过算是了解了 N 的作用了。</p>

<h4 id="d-delete">D (Delete)</h4>

<p>同样，前面我们介绍过 <code>d</code> 命令，它用来删除 pattern space 中的内容，并且读取下一行到 pattern space 中，sed 脚本也随之从头开始执行。<code>D</code> 命令和 <code>d</code> 命令稍微有点不同，<code>D</code> 命令会删除 pattern space 中的第一行的内容，它不会从文本中读取新的行进来，当然 sed 脚本还是会从头开始执行，如果我们有这么一个文本：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">blank
</span><span class="line">blank
</span><span class="line">
</span><span class="line">
</span><span class="line">blank
</span><span class="line">
</span><span class="line">blank
</span><span class="line">
</span><span class="line">
</span><span class="line">blank
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line">blank</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个文本中的有些段落之间有多个空行，我们希望把多余的空行去掉，也就是如果段落之间有多个空行，就删掉只剩下一个，我们的 sed 脚本可以这么写：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/^$/{
</span><span class="line">	N
</span><span class="line">	/^\n$/D
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个脚本先匹配出空行，然后读取空行的下一行，如果两行都是空行的话，就把 pattern space 中的第一个空行删除掉，然后继续读取下一行到 pattern space 中，结果就是把多余的空行都删除掉，只剩下一个空行了。</p>

<h4 id="p-print">P (Print)</h4>

<p><code>P</code> 命令和 <code>p</code> 命令也稍微不同，<code>P</code> 命令不像 <code>p</code> 命令那样会把 pattern space 中的所有内容打印出来，它只会将 pattern space 的第一行打印出来，这里就不做过多的介绍了。</p>

<h4 id="h-hold-h-hold-g-get-g-get-x-exchange">h (hold), H (Hold), g (get), G (Get), x (exchange)</h4>

<p>这里面有五个命令，之所以一起介绍是因为，这五个命令都是操作 hold space 的，之前我们已经知道了 pattern space 了，hold space 可以认为就是一个内容的临时存放点，你可以将 pattern space 中的内容放到 hold space 中，等到需要使用的时候再将 hold space 中的内容拿回到 pattern space 中，我们来看一下这五个命令的作用吧：</p>

<ul>
  <li>h：将 pattern space 中的内容拷贝到 hold space 中，hold space 中原来的内容会被覆盖。</li>
  <li>H：将 pattern space 中的内容添加到 hold space 当前内容的后面。</li>
  <li>g：将 hold space 中的内容拷贝到 pattern space 中，pattern space 中原来的内容将会被覆盖。</li>
  <li>G：将 hold space 中的内容添加到 pattern space 中目前的内容后面。</li>
  <li>x：交换 pattern space 和 hold space 中的内容。</li>
</ul>

<p>下面我们来看一个简单的例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">1
</span><span class="line">
2
</span><span class="line">
11
</span><span class="line">
22
</span><span class="line">
111
</span><span class="line">
222</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在我们要将上面的 1 和 2 的位置调换，就是先出现 2 再出现 1，我们的脚本可以这么写：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/1/{
</span><span class="line">	h
</span><span class="line">	d
</span><span class="line">}
</span><span class="line">/2/{
</span><span class="line">	G
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这段脚本先匹配 1 所在的行，然后放到 hold space 中，将 pattern space 中的内容清除掉，然后匹配到 2 所在的行，将 hold space 中的内容添加到 pattern space 后面，这样，pattern space 中就是先有 2，再有 1 了。</p>

<p>最后，我们得到的结果就是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">2
</span><span class="line">1
</span><span class="line">22
</span><span class="line">11
</span><span class="line">222
</span><span class="line">111</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="b">b</h4>

<p><code>b</code> 命令是一个跳转命令，它是无条件的，它的语法是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[address]b [label]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[label] 是要跳转到的标签，你可以在 sed 脚本中用 <code>:</code> 开头来表示一个标签，比如下面的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">:start
</span><span class="line">s/start/end/g
</span><span class="line">b start</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果 <code>b</code> 后面不带参数，那么就表示直接跳到脚本的末尾了。</p>

<h4 id="t">t</h4>

<p>除了 <code>b</code> 这样一个跳转命令以外，sed 还有一个 <code>t</code> 的条件跳转命令，如果在当前行有一个替换被成功执行了，那么 <code>t</code> 就会跳转到特定的标签上，它的语法 <code>b</code> 是类似的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[address]t [label]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看下面这段代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">:begin
</span><span class="line">s/start/end/
</span><span class="line">t begin</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这条 <code>t</code> 命令只有在当前行的 start 成功被替换成 end 的时候才会跳转到 :begin 标签那里。</p>

<h3 id="section-1">总结</h3>

<p>sed 的高级命令相对于基本命令来说不怎么常用，但是在处理特定的问题的时候，这些命令还是很有用的。不过，不管怎么说，sed 都不是一门完备的语言，所以其适用的问题域也是比较有限的，sed 最大的优势在于逐行处理文本上，用适当的工具处理适当的问题，才能发挥出工具最大的威力。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Sed & awk」阅读笔记之 sed 基础]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/28/sed-and-awk-part-one/"/>
    <updated>2013-07-28T16:39:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/28/sed-and-awk-part-one</id>
    <content type="html"><![CDATA[<p>之前写的一篇文章有提到采用 sed 来<a href="../../../../blog/2013/07/24/match-line-not-contain-a-string/">匹配不包含连续字符串的行</a>，平时在做日志分析的时候也经常要用到 sed，但是仅仅用了 sed 的字符串替换的功能，没有系统地去学习过 sed 用法，这次找到一本叫<a href="http://book.douban.com/subject/1741933/">「sed &amp; awk」</a>的书，便花时间对 sed 做了系统的学习。</p>

<h3 id="sed-">sed 的执行方式</h3>

<p>要了解 sed，必须了解 sed 的执行方式，sed 是一个行处理器，脱胎于 <a href="http://www.gnu.org/software/ed/manual/ed_manual.html">ed</a>（ed 是一个行编辑器，awk 和 grep 也是基于 ed 的），简单地说，sed 的执行方式是这样的：<strong>sed 会从输入的文本中读取一行，放到 pattern space 中，然后用 sed 脚本去处理，处理完后继续读取下一行，继续处理。</strong></p>

<p>假设我们有下面一段文本需要处理：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">John Daggett, 341 King Road, Plymouth MA
</span><span class="line">Alice Ford, 22 East Broadway, Richmond VA
</span><span class="line">Orville Thomas, 11345 Oak Bridge Road, Tulsa OK
</span><span class="line">Terry Kalkas, 402 Lans Road, Beaver Falls PA
</span><span class="line">Eric Adams, 20 Post Road, Sudbury MA
</span><span class="line">Hubert Sims, 328A Brook Road, Roanoke VA
</span><span class="line">Amy Wilde, 334 Bayshore Pkwy, Mountain View CA
</span><span class="line">Sal Carpenter, 73 6th Street, Boston MA</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们要把文本中的 CA 替换成 California，OK 替换成 Oklahoma，于是我们写了下面一段 sed 脚本：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">s/CA/California/
</span><span class="line">s/OK/Oklahoma/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>那么 sed 的执行方式是这样的：</p>

<ol>
  <li>先读取第一行 <code>John Daggett, 341 King Road, Plymouth MA</code> 到 pattern space</li>
  <li>然后执行脚本的第一行命令，将其中的 CA 替换成 California。</li>
  <li>然后执行脚本的第二行命令，将其中的 OK 替换成 Oklahoma。</li>
  <li>文本的第一行处理完毕，继续读取文本的下一行。</li>
  <li>继续第 2 步和第 3 步。</li>
</ol>

<p>当然，这只是大部分情况下 sed 的执行方式，sed 的基本命令都是按照这种方式来执行的，一些高级命令可以改变 sed 的执行流。不过在了解这些 sed 命令之前，我们先了解下 sed 的地址选择器，它是很多命令的组成部分。</p>

<h3 id="sed--1">sed 的地址选择器</h3>

<p>默认的情况，sed 脚本会对文本的每一行做处理，但是有时候我们只希望我们的命令作用于特定的几行，这个时候，我们就可以用 sed 的地址选择器，sed 的地址选择器可以是一个正则表达式（sed 的正则表达式总是放在两个 <code>/</code> 中间），行号，或者地址符号（<em>这个是什么东西？我也不清楚</em>），具体的使用方式如下：</p>

<ul>
  <li>如果没有指定地址选择器，那么命令默认会应用在每一行上。</li>
  <li>如果只有一个地址选择器，那么命令会作用在每一个符合这个地址选择器的行上。</li>
  <li>如果是两个用 <code>,</code> 分割的地址，那么命令会先作用到第一个符合第一个地址选择器的行上，然后继续作用于后续的行，直到（包括）第一个符合第二个地址选择器的行为止。</li>
  <li>地址选择器后面可以跟上一个 <code>!</code>，表示反向选择。</li>
</ul>

<p>另外在一个地址选择器中，你可以用一对 <code>{}</code> 将多个命令包含在其中，下面我们来看一个例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/^\.TS/,/^\.TE/{
</span><span class="line">     /^$/d
</span><span class="line">     s/^\.ps 10/.ps 8/
</span><span class="line">     s/^\.vs 12/.vs 10/
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个 sed 脚本的第一行就是一个地址选择器，由 <code>,</code> 分开的两个地址选择器组成，都是正则表达式形式的，表示后面 <code>{}</code> 中的命令会从第一个以 <code>.TS</code> 开头的行一直作用到第一个以 <code>.TE</code> 开头的行为止。</p>

<h3 id="sed--2">sed 的基本命令</h3>

<p>了解完 sed 的地址选择器后，我们就可以继续了解 sed 的基本命令了。</p>

<h4 id="substitution">替换（substitution）</h4>

<p>sed 的文本替换命令是我最常用的命令，它的语法是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[address]s/pattern/replacement/flags</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>它由这几个部分组成：</p>

<ul>
  <li>最前面是一个地址选择器，是可选的。</li>
  <li>然后后面是一个命令 <code>s</code>，表示是替换命令。</li>
  <li>后面紧跟一个正则表达式，表示要被替换的文本。</li>
  <li>再后面是希望替换成的文本。</li>
  <li>最后是标记位。</li>
</ul>

<p>其中标记位可以是：</p>

<ul>
  <li>n：一个从 1 到 512 的数字，表示只替换第 n 个符合 pattern 子串。</li>
  <li>g：默认情况下，替换命令只会替换一行中第一个符合 pattern 的子串，加上 <code>g</code> 以后会将行中所有符合 pattern 的子串都进行替换。</li>
  <li>p：将 pattern space 中的内容打印出来。</li>
  <li>w <em>file</em> ：将 pattern space 中的内容写到文件中。</li>
</ul>

<p>举一个例子，假设我们要将第一个例子中的最后一行的 MA 换成 Massachusetts，就可以这样写：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$s/MA/Massachusetts/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中的 <code>$</code> 是一个地址选择器，表示最后一行。</p>

<p>替换命令的替换文本基本上就是一个字符串，但是还是有一些特殊字符：<code>\</code>，<code>&amp;</code> 和 <code>\n</code>，其中：</p>

<ul>
  <li><code>\</code>：转义，转义特殊字符。</li>
  <li><code>&amp;</code>：代表要被替换的文本，也就是符合 pattern 的子串。</li>
  <li><code>\n</code>：当前面的正则表达式中有捕获部分的时候（即，正则表达式的 <code>()</code> 语法），可以在替换文本中用这种反向引用的方式进行引用。</li>
</ul>

<p>这些特殊字符在当你需要将匹配的文本中的某些部分放到替换文本中的时候会特别有用。</p>

<h4 id="delete">删除（delete）</h4>

<p>删除命令很简单，它的语法是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[address]d</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>前面可以带一个地址选择器，后面是一个 d，表示删除命令，举一个简单的例子，假设我们要筛选出不包含 <code>abc</code> 的行，可以这样写：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/abc/d</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>把包含 abc 的行全部都删除掉，这样就筛选出了不包含 <code>abc</code> 的行。</p>

<h4 id="appendinsertchange">追加，插入和变化（append，insert，change）</h4>

<p>这三个命令的作用分别是：insert 将提供的文本插入到 pattern space 的当前行前面，append 将提供的文本追加到 pattern space 的当前行后面，change 命令替换 pattern space 中的内容，之所以将这三个命令放到一起说，是因为这三个命令需要将提供的文本放在命令的第二行，它们的语法分别是这样的：</p>

<p>append</p>

<pre><code>[line-address]a\
text
</code></pre>

<p>insert</p>

<pre><code>[line-address]i\

text
</code></pre>

<p>changae</p>

<pre><code>[address]c\

text
</code></pre>

<p>来一个例子，我们有下面一段文本：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">I want to see @f1(what will happen) if we put the
</span><span class="line">font change commands @f1(on a set of lines).
</span><span class="line">If I understand things (correctly), the @f1(third) line causes problems. (No?).
</span><span class="line">Is this really the case, or is it (maybe) just something else?
</span><span class="line">Let's test having two on a line @f1(here) and @f1(there) as
</span><span class="line">well as one that begins on one line and ends @f1(somewhere
</span><span class="line">on another line).
</span><span class="line">What if @f1(it is here) on the line?
</span><span class="line">Another @f1(one).</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>假设为了阅读的美观，我们希望段落之间能够空出一行来，段落结束的标记我们暂且简单地假设以 <code>.</code> 结尾，我们要做的就是在每一个以 <code>.</code> 结尾的行后面再插入一行，除了最后一行之外，那么我们的 sed 脚本就可以这么写：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$!{
</span><span class="line">	/\.$/a\
</span><span class="line">	\
</span><span class="line">
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>来说明一下这段脚本，第一行是一个地址选择器，表示选择除最后一行以外的行，因为我们不希望在最后一个段落后面也加上一个空行，然后里面的命令是对所有的以 <code>.</code> 结尾的行运用 a 命令去追加一个空行。</p>

<h4 id="list">列出（list）</h4>

<p>列出命令和打印命令其实很像，不同的是列出命令会将不可见字符给列出来，比如 windows 下的换行符，假设我们有下面一段文本（<code>^M</code> 可以用 Ctrl+V，然后 Ctrl+M 来输入）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">^M^M
</span><span class="line">^M
</span><span class="line">^M^M^M</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面一段文本用 <code>sed -n 'l'</code> 输出的内容是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">\r\r$
</span><span class="line">\r$
</span><span class="line">\r\r\r$</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而用 <code>sed -n 'p'</code> 输出的内容是三个空空的行。</p>

<p>列出命令将不可见字符打印出来了，而打印命令则没有。</p>

<h4 id="transform">转换（transform）</h4>

<p>转换命令和替换命令听起来是一样，但是它们还是不同的，转换命令就像是多个 <code>tr</code> 命令用管道连在一起作用一样，它的语法是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[address]y/abc/xyz/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>转换命令的一个使用的场景就是大小写的转换：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面这个命令会将文本中所有的小写字母转换成大写字母。</p>

<h4 id="print">打印（print）</h4>

<p>打印命令其实就是一个简单的 <code>p</code>，将 pattern space 中的内容打印出来，比如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$!p</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>表示将除最后一行以外的内容全部打印出来。需要注意的是，默认情况下 sed 会将 pattern space 中的内容都打印出来，要关闭这个功能，可以加上一个 <code>-n</code> 参数，就像我在介绍列出命令的时候做的那样。</p>

<h4 id="section">打印行号</h4>

<p>打印行号也就是一个简单的 <code>=</code> 号，大家可以去试一下，这里不再多讲了。</p>

<h4 id="next">下一个（next）</h4>

<p>next 命令是一个 <code>n</code>，它的作用是将 pattern space 中的内容立即输出，然后将下一行读入到 pattern space 中，然后继续执行接下来的命令，比如：</p>

<pre><code>/H1/{

n

/^$/d

}
</code></pre>

<p>就是先匹配到含有 H1 的行，然后将这一行打印出来，接着读取下一行到 pattern space，如果是空的话，就删除掉。</p>

<h4 id="readwrite">读取和写入文件（read，write）</h4>

<p>sed 的读取文件的功能可以将文件中的内容追加到 pattern space 后面，前面那个在段落后面添加空行的例子我们可以这么做：首先创建一个只包含一个空行的文件叫做 temp，接着我们就可以用下面的命令来达到我们的目的了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$!{
</span><span class="line">    /\.$/r temp
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>sed 的写入文件的功能和读取文件的功能类似，语法是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[address]w file</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>表示将 pattern space 中的内容写入到文件。</p>

<h4 id="quit">退出（quit）</h4>

<p>sed 的退出命令是让 sed 停止读取新的行，也停止输出，基本上就是让 sed 退出了，它的命令的语法是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[line-address]q</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>它只能作用在单行的地址选择器上。</p>

<h3 id="section-1">总结</h3>

<p>sed 的基本命令相对来说还是比较简单的，最主要的还是要用好地址选择器，在下一篇中，我会介绍一些 sed 的高级命令。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再论如何匹配不包含连续字符串的行]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/24/match-line-not-contain-a-string/"/>
    <updated>2013-07-24T22:35:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/24/match-line-not-contain-a-string</id>
    <content type="html"><![CDATA[<p>在前一篇文章中，我讨论过如何使用<a href="http://blog.khotyn.com/blog/2013/07/24/zero-width-assert/">使用零宽断言来匹配不包含连续字符串的行</a>，这个方法采用了零宽断言这种不怎么常见的正则表达式用法，虽然行之有效，但是总归是个麻烦的方法，而且，零宽断言很多的正则表达式解释器都不支持，用 grep 的话，得加上 -P 参数，让 grep 采用 Perl 的方式解释正则表达式，更加遗憾的一点是 -P 参数似乎只有在 GNU 的版本中才有，在我的 Mac 上的 BSD 版本的 grep 中，并没有这个参数。</p>

<p>所幸的是今天无聊翻了翻 grep 的 man page，发现了几个更加方便的方法也更加通用的办法，在这里和大家分享一下：</p>

<h3 id="grep--invert-match">grep 的 invert match</h3>

<p>今天翻 grep 的 man page，发现了一个 <code>-v</code> 参数，它的说明是这样的：</p>

<blockquote>
  <p>Selected lines are those not matching any of the specified patterns.</p>
</blockquote>

<p>正是我们想要，可以传入一个正则表达式，它帮你匹配不符合这个正则表达式的行，而且 <code>-v</code> 参数各个 grep 的版本都支持，无需担心换个系统就不能用的情况。</p>

<h3 id="sed--pattern-">采用 sed 来删除符合某个 pattern 的行</h3>

<p>其实不用 grep，用 sed 也可以做到这个需求，sed 本身就是一个强大的行处理工具，sed 可以用如下的方式把符合某个 pattern 的行给删除掉：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sed '/pattern/D'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>怎么样？也是非常方便的吧，它可以做到和 grep 一样的功能，非常有效。</p>

<h3 id="sed--pattern--1">采用 sed 来打印不符合某个 pattern 的行</h3>

<p>要用 sed 来解决这个问题，其实不止上面一个方法，还可以用以下的方法来做：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sed -n '/pattern/!p'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>解释一下这段 sed 脚本的作用，首先是 <code>-n</code> 参数，大家知道 sed 的默认将处理和没有处理过的行都定向到输出流上，而 <code>-n</code> 参数是用来关闭这个功能，我们当然不希望 sed 将所有的行都打印出来。然后脚本的开始是一个行的选择器，前面是一个正则表达式（sed 的正则表达式都是放在两个斜杠之间的），后面的是一个<code>!</code>号，这样就表示选择反向选择，即选择不符合 pattern 的行，然后最后是一个 <code>p</code> 命令，把这样的行打印出来，这里的 pattern 当然可以是需求中的那个连续的字符串，这样，我们就达到了需求的目的了。</p>

<p>总结一下，推荐大家还是用 grep 的 invert match 或者 sed 来完成这个功能，零宽断言在解决这个问题上感觉有点杀鸡焉用牛刀（<strong>零宽断言还有很多适用的场景，不仅仅可以用来解决这个问题</strong>）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用零宽断言来匹配不包含连续字符串的行]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/24/zero-width-assert/"/>
    <updated>2013-07-24T16:34:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/24/zero-width-assert</id>
    <content type="html"><![CDATA[<p>最近在工作中遇到一个问题，有 N 个字符串，需要用正则表达式去过滤掉不包含某一个特定连续字符串(比如abc)的字符串。</p>

<p>在网上搜罗了一大把，找到了在 Perl 5 的正则表达式中有零宽断言这个东西，非常强大，先来了解下零宽断言倒是是什么？</p>

<p>简单的说，零宽断言是查找在某些内容之前或者之后的东西，这样解释起来可能比较抽象，我们来具体看下几种零宽断言：</p>

<ul>
  <li>(?=exp)：这个零宽断言用来断言自身出现的位置之后能够匹配到表达式 exp，考虑下面这一个正则表达式 q(?=u)，这个正则表达式表示匹配后面的字符是 u 的 q</li>
  <li>(?!exp)：这个零宽断言用来断言自身出现的位置之后不能够匹配到表达式 exp，看下面这一个正则表达式 q(?!u)，这个正则表达式表示匹配后面的字符不是 u 的 q</li>
  <li>(?&lt;=exp)：这个零宽断言用来断言自身出现的位置之前能够匹配到表达式 exp</li>
  <li>(?&lt;!exp)：这个零宽断言用来断言自身出现的位置之前不能够匹配到表达式 exp</li>
</ul>

<p>在理解零宽断言的时候需要注意的一点是它是一种断言，也就是说零宽断言只会告诉你匹不匹配，但是不会“消费”掉字符串内的内容，我用下面的这一个例子来解释这个情况：</p>

<p>我们有一个正则表达式 <code>k(?=h)otyn</code>，用它去匹配 khotyn，乍看一下这个匹配是会成功的，但是由于零宽断言只做断言，而不会”<strong>消费</strong>“掉匹配到的字符串，所以事实上，这个正则表达式匹配是一个后面是 h 的 k，并且这个 k 的后面是 otyn，这样这个正则表达式无论什么字符串都会匹配失败(正确的应该是 <code>k(?=h)hotyn</code>，不过这样加不加零宽断言并没有意义)。</p>

<p>在理解零宽断言以后，我们来看一下如何来匹配出不包含“abc”的字符串，下面是我写出的结果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">((?!abc).)+</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>首先我们看这个正则表达式里面的 <code>(?!abc).</code> 部分，这个部分断言一个空字符后面不能够匹配到字符串abc，并且这个空字符串后面是一个任意字符。</p>

<p>我们来看下下面这一段代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Pattern</span> <span class="n">pattern</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Perl5Compiler</span><span class="o">().</span><span class="na">compile</span><span class="o">(</span><span class="s">&quot;((?!abc).)+&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">Perl5Matcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Perl5Matcher</span><span class="o">();</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">matcher</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="s">&quot;abc&quot;</span><span class="o">,</span> <span class="n">pattern</span><span class="o">));</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">matcher</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="s">&quot;abdas dfas&quot;</span><span class="o">,</span> <span class="n">pattern</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这段代码的执行结果是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kc">false</span>
</span><span class="line"><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>第一个匹配失败是因为在字符 ‘a’ 前面的空字符后面匹配到了字符串 “abc”，因此断言失败，从而匹配失败。</p>

<p>第二个匹配成功是因为没有任何一个空字符后面有出现 “abc” ，因为匹配成功。</p>

<p>最后加上 + 号的原因是因为能够做到完全匹配，因为任何一个字符只要其本身不是 ‘a’，并且后面不是 ‘bc’，那么就是能够匹配 “(?!abc).” 的，因此，只要一个字符串里面不包含 abc，那么它就能够完全匹配 ((?abc).)+</p>

<p><strong>PS：这片文章其实是前几年写的，之前的博客被关闭了，数据丢了，幸好当时在 Iteye 上还有一份，于是就迁移过来。这几年我经常用这个方式来分析线上服务器的日志，可以说，有了零宽断言，省去了非常多的麻烦~，定位问题的速度也快了不少，零宽断言的确是一个非常犀利的东西。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cURL 使用简介]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/18/curl/"/>
    <updated>2013-07-18T22:05:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/18/curl</id>
    <content type="html"><![CDATA[<p><a href="http://curl.haxx.se/">cURL</a> 这个神器相信很多人都已经用过，简单地说，cURL 就是一个和服务器端通信的工具，至于用什么协议，cURL 支持各种各样的协议，包括 HTTP，FTP，SMTP 等等协议，可以说是应有尽有。</p>

<p>cURL 的可用的参数非常非常多，你能想到的基本上都有，不过一般使用的就那么几个参数吧，这里就介绍下我常常用到的两个：</p>

<h3 id="post-">使用 Post 提交数据</h3>

<p>有些服务器端限制了你只能用 POST 的方式提交数据，这个时候如果你就不能通过在 URL 上加上参数的方式来提交数据了，cURL 提供了一个 <code>-d</code> 参数来让你可以用 POST 的方式把数据提交上去，例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl http://ka.178.com/receive/index -d "activity_id=3403"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个请求只用了一个参数，多个参数可以 <code>&amp;</code> 符号作链接。</p>

<h3 id="cookie-">附带 Cookie 到请求上</h3>

<p>使用 cURL 的另一个经常需要做的事情就是需要拿到用户的登录信息，这些登录信息往往放在 cookie 里面，这样你就需要把 cookie 信息附加在请求上提交到服务器，让服务器认为你是处于登录的状态，cURL 提供了一个 <code>--cookie</code> 的参数让你可以附上 cookie：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl http://ka.178.com/receive/index -cookie "__utma=2582276614.13325.133516.3;"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果嫌 <code>--cookie</code> 太长，可以用 <code>-b</code>，<code>-b</code> 是 <code>--cookie</code> 的简写。</p>

<h3 id="section">显示出请求的头信息</h3>

<p>对于有一些请求，比如那些返回 302 状态码的请求，cURL 默认情况下是不会输出任何内容的，这种请求下，我们就不知道它是返回了 200 而响应体里面没有任何内容还是因为是 302 而没有任何内容呢，这个时候我们就可以通过 <code>-D</code>（<code>--dump-header</code>）参数来显示请求的响应头，不过 <code>-D</code> 参数后面要加上一个文件，如果我们想直接输出到终端，那么就可以这么干：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl -D /dev/stdout http://xxxxx.com/xxxx.html</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>直接将内容输出到设备 stdout 下就可以（感谢 Unix，一切皆文件！）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 并发编程之 ConcurrentHashMap]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/12/juc-concurrenthashmap/"/>
    <updated>2013-07-12T23:02:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/12/juc-concurrenthashmap</id>
    <content type="html"><![CDATA[<p><strong>此篇文章是作者两年前发布在<a href="http://www.goldendoc.org/2011/06/juc_concurrenthashmap/">黄金档</a>的文章。</strong></p>

<p>ConcurrentHashMap 是一个线程安全的 Hash Table，它的主要功能是提供了一组和 HashTable 功能相同但是线程安全的方法。ConcurrentHashMap 可以做到读取数据不加锁，并且其内部的结构可以让其在进行写操作的时候能够将锁的粒度保持地尽量地小，不用对整个 ConcurrentHashMap 加锁。</p>

<h3 id="concurrenthashmap-">ConcurrentHashMap 的内部结构</h3>

<p>ConcurrentHashMap 为了提高本身的并发能力，在内部采用了一个叫做 Segment 的结构，一个 Segment 其实就是一个类 Hash Table 的结构，Segment 内部维护了一个链表数组，我们用下面这一幅图来看下 ConcurrentHashMap 的内部结构：</p>

<p><img src="http://pic.yupoo.com/goldendoc/Ba4GCFe1/nuEZ0.png" alt="image" /></p>

<p>从上面的结构我们可以了解到，ConcurrentHashMap 定位一个元素的过程需要进行两次 Hash 操作，第一次 Hash 定位到 Segment，第二次 Hash 定位到元素所在的链表的头部，因此，这一种结构的带来的副作用是 Hash 的过程要比普通的 HashMap 要长，但是带来的好处是写操作的时候可以只对元素所在的 Segment 进行加锁即可，不会影响到其他的 Segment，这样，在最理想的情况下，ConcurrentHashMap 可以最高同时支持 Segment 数量大小的写操作（刚好这些写操作都非常平均地分布在所有的 Segment 上），所以，通过这一种结构，ConcurrentHashMap 的并发能力可以大大的提高。</p>

<h3 id="segment">Segment</h3>

<p>我们再来具体了解一下Segment的数据结构：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Segment</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">ReentrantLock</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">transient</span> <span class="kd">volatile</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span><span class="line">    <span class="kd">transient</span> <span class="kt">int</span> <span class="n">modCount</span><span class="o">;</span>
</span><span class="line">    <span class="kd">transient</span> <span class="kt">int</span> <span class="n">threshold</span><span class="o">;</span>
</span><span class="line">    <span class="kd">transient</span> <span class="kd">volatile</span> <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;[]</span> <span class="n">table</span><span class="o">;</span>
</span><span class="line">    <span class="kd">final</span> <span class="kt">float</span> <span class="n">loadFactor</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>详细解释一下 Segment 里面的成员变量的意义：</p>

<ul>
  <li>count：Segment 中元素的数量</li>
  <li>modCount：对 table 的大小造成影响的操作的数量（比如 put 或者 remove 操作）</li>
  <li>threshold：阈值，Segment 里面元素的数量超过这个值依旧就会对 Segment 进行扩容</li>
  <li>table：链表数组，数组中的每一个元素代表了一个链表的头部</li>
  <li>loadFactor：负载因子，用于确定 threshold</li>
</ul>

<h3 id="concurrenthashmap--1">ConcurrentHashMap 的初始化</h3>

<p>下面我们来结合源代码来具体分析一下 ConcurrentHashMap 的实现，先看下初始化方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="nf">ConcurrentHashMap</span><span class="o">(</span><span class="kt">int</span> <span class="n">initialCapacity</span><span class="o">,</span>
</span><span class="line">                         <span class="kt">float</span> <span class="n">loadFactor</span><span class="o">,</span> <span class="kt">int</span> <span class="n">concurrencyLevel</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(!(</span><span class="n">loadFactor</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">||</span> <span class="n">initialCapacity</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">concurrencyLevel</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class="line">        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">concurrencyLevel</span> <span class="o">&gt;</span> <span class="n">MAX_SEGMENTS</span><span class="o">)</span>
</span><span class="line">        <span class="n">concurrencyLevel</span> <span class="o">=</span> <span class="n">MAX_SEGMENTS</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Find power-of-two sizes best matching arguments</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">sshift</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">ssize</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">    <span class="k">while</span> <span class="o">(</span><span class="n">ssize</span> <span class="o">&lt;</span> <span class="n">concurrencyLevel</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="o">++</span><span class="n">sshift</span><span class="o">;</span>
</span><span class="line">        <span class="n">ssize</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="n">segmentShift</span> <span class="o">=</span> <span class="mi">32</span> <span class="o">-</span> <span class="n">sshift</span><span class="o">;</span>
</span><span class="line">    <span class="n">segmentMask</span> <span class="o">=</span> <span class="n">ssize</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">    <span class="k">this</span><span class="o">.</span><span class="na">segments</span> <span class="o">=</span> <span class="n">Segment</span><span class="o">.</span><span class="na">newArray</span><span class="o">(</span><span class="n">ssize</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">initialCapacity</span> <span class="o">&gt;</span> <span class="n">MAXIMUM_CAPACITY</span><span class="o">)</span>
</span><span class="line">        <span class="n">initialCapacity</span> <span class="o">=</span> <span class="n">MAXIMUM_CAPACITY</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">initialCapacity</span> <span class="o">/</span> <span class="n">ssize</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">*</span> <span class="n">ssize</span> <span class="o">&lt;</span> <span class="n">initialCapacity</span><span class="o">)</span>
</span><span class="line">        <span class="o">++</span><span class="n">c</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">cap</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">    <span class="k">while</span> <span class="o">(</span><span class="n">cap</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">)</span>
</span><span class="line">        <span class="n">cap</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="o">.</span><span class="na">segments</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">segments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Segment</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;(</span><span class="n">cap</span><span class="o">,</span> <span class="n">loadFactor</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>CurrentHashMap 的初始化一共有三个参数，一个 initialCapacity，表示初始的容量，一个 loadFactor，表示负载参数，最后一个是 concurrentLevel，代表 ConcurrentHashMap 内部的 Segment 的数量，ConcurrentLevel 一经指定，不可改变，后续如果 ConcurrentHashMap 的元素数量增加导致 ConrruentHashMap 需要扩容，ConcurrentHashMap 不会增加 Segment 的数量，而只会增加 Segment 中链表数组的容量大小，这样的好处是扩容过程不需要对整个 ConcurrentHashMap 做 rehash，而只需要对 Segment 里面的元素做一次 rehash 就可以了。</p>

<p>整个 ConcurrentHashMap 的初始化方法还是非常简单的，先是根据 concurrentLevel 来 new 出 Segment，这里 Segment 的数量是不小于 concurrentLevel 的最大的 2 的指数，就是说 Segment 的数量永远是 2 的指数个，这样的好处是方便采用移位操作来进行 hash，加快 hash 的过程。接下来就是根据 intialCapacity 确定 Segment 的容量的大小，每一个 Segment 的容量大小也是 2 的指数，同样是为了加快 hash 的过程。</p>

<p>这边需要特别注意一下两个变量，分别是 segmentShift 和 segmentMask，这两个变量在后面将会起到很大的作用，假设构造函数确定了 Segment 的数量是 2 的 n 次方，那么 segmentShift 就等于 32 减去 n，而 segmentMask 就等于 2 的 n 次方减一。</p>

<h3 id="concurrenthashmap--get-">ConcurrentHashMap 的 get 操作</h3>

<p>前面提到过 ConcurrentHashMap 的 get 操作是不用加锁的，我们这里看一下其实现：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">segmentFor</span><span class="o">(</span><span class="n">hash</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看第三行，segmentFor 这个函数用于确定操作应该在哪一个 segment 中进行，几乎对 ConcurrentHashMap 的所有操作都需要用到这个函数，我们看下这个函数的实现：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">final</span> <span class="n">Segment</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">segmentFor</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">segments</span><span class="o">[(</span><span class="n">hash</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">segmentShift</span><span class="o">)</span> <span class="o">&amp;</span> <span class="n">segmentMask</span><span class="o">];</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个函数用了位操作来确定 Segment，根据传入的 hash 值向右无符号右移 segmentShift 位，然后和 segmentMask 进行与操作，结合我们之前说的 segmentShift 和 segmentMask 的值，就可以得出以下结论：假设 Segment 的数量是 2 的n次方，根据元素的 hash 值的高 n 位就可以确定元素到底在哪一个 Segment 中。</p>

<p>在确定了需要在哪一个 segment 中进行操作以后，接下来的事情就是调用对应的 Segment 的 get 方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// read-volatile</span>
</span><span class="line">        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">getFirst</span><span class="o">(</span><span class="n">hash</span><span class="o">);</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                <span class="n">V</span> <span class="n">v</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">v</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">                    <span class="k">return</span> <span class="n">v</span><span class="o">;</span>
</span><span class="line">                <span class="k">return</span> <span class="nf">readValueUnderLock</span><span class="o">(</span><span class="n">e</span><span class="o">);</span> <span class="c1">// recheck</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>先看第二行代码，这里对 count 进行了一次判断，其中 count 表示 Segment 中元素的数量，我们可以来看一下 count 的定义：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">transient</span> <span class="kd">volatile</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到 count 是 volatile 的，实际上这里里面利用了 volatile 的语义：</p>

<blockquote>
  <p>对volatile字段的写入操作happens-before于每一个后续的同一个字段的读操作。</p>
</blockquote>

<p>因为实际上 put、remove 等操作也会更新 count 的值，所以当竞争发生的时候， volatile 的语义可以保证写操作在读操作之前，也就保证了写操作对后续的读操作都是可见的，这样后面 get 的后续操作就可以拿到完整的元素内容。</p>

<p>然后，在第三行，调用了 getFirst() 来取得链表的头部：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">getFirst</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;[]</span> <span class="n">tab</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">tab</span><span class="o">[</span><span class="n">hash</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">tab</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)];</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同样，这里也是用位操作来确定链表的头部，hash 值和 HashTable 的长度减一做与操作，最后的结果就是 hash 值的低 n 位，其中 n 是 HashTable 的长度以 2 为底的结果。</p>

<p>在确定了链表的头部以后，就可以对整个链表进行遍历，看第 4 行，取出 key 对应的 value 的值，如果拿出的 value 的值是 null，则可能这个 key，value 对正在 put 的过程中，如果出现这种情况，那么就加锁来保证取出的 value 是完整的，如果不是 null，则直接返回 value。</p>

<h3 id="concurrenthashmap--put-">ConcurrentHashMap 的 put 操作</h3>

<p>看完了 get 操作，再看下 put 操作，put 操作的前面也是确定 Segment 的过程，这里不再赘述，直接看关键的 segment 的 put 方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">V</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">onlyIfAbsent</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">lock</span><span class="o">();</span>
</span><span class="line">    <span class="k">try</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">count</span><span class="o">;</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">c</span><span class="o">++</span> <span class="o">&gt;</span> <span class="n">threshold</span><span class="o">)</span> <span class="c1">// ensure capacity</span>
</span><span class="line">            <span class="n">rehash</span><span class="o">();</span>
</span><span class="line">        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;[]</span> <span class="n">tab</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">hash</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">tab</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">first</span> <span class="o">=</span> <span class="n">tab</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
</span><span class="line">        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">!=</span> <span class="n">hash</span> <span class="o">||</span> <span class="o">!</span><span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)))</span>
</span><span class="line">            <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">V</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">oldValue</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(!</span><span class="n">onlyIfAbsent</span><span class="o">)</span>
</span><span class="line">                <span class="n">e</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">else</span> <span class="o">{</span>
</span><span class="line">            <span class="n">oldValue</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">            <span class="o">++</span><span class="n">modCount</span><span class="o">;</span>
</span><span class="line">            <span class="n">tab</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">first</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class="line">            <span class="n">count</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span> <span class="c1">// write-volatile</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">        <span class="n">unlock</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>首先对 Segment 的 put 操作是加锁完成的，然后在第五行，如果 Segment 中元素的数量超过了阈值（由构造函数中的 loadFactor 算出）这需要进行对 Segment 扩容，并且要进行 rehash，关于 rehash 的过程大家可以自己去了解，这里不详细讲了。</p>

<p>第 8 和第 9 行的操作就是 getFirst 的过程，确定链表头部的位置。</p>

<p>第 11 行这里的这个 while 循环是在链表中寻找和要 put 的元素相同 key 的元素，如果找到，就直接更新更新 key 的 value，如果没有找到，则进入 21 行这里，生成一个新的 HashEntry 并且把它加到整个 Segment 的头部，然后再更新 count 的值。</p>

<h3 id="concurrenthashmap--remove-">ConcurrentHashMap 的 remove 操作</h3>

<p>Remove 操作的前面一部分和前面的 get 和 put 操作一样，都是定位 Segment 的过程，然后再调用 Segment 的 remove 方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">V</span> <span class="nf">remove</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">lock</span><span class="o">();</span>
</span><span class="line">    <span class="k">try</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;[]</span> <span class="n">tab</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">hash</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">tab</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">first</span> <span class="o">=</span> <span class="n">tab</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
</span><span class="line">        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">!=</span> <span class="n">hash</span> <span class="o">||</span> <span class="o">!</span><span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)))</span>
</span><span class="line">            <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">V</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">V</span> <span class="n">v</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">value</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">v</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                <span class="n">oldValue</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
</span><span class="line">                <span class="c1">// All entries following removed node can stay</span>
</span><span class="line">                <span class="c1">// in list, but all preceding ones need to be</span>
</span><span class="line">                <span class="c1">// cloned.</span>
</span><span class="line">                <span class="o">++</span><span class="n">modCount</span><span class="o">;</span>
</span><span class="line">                <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">newFirst</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class="line">                <span class="k">for</span> <span class="o">(</span><span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span> <span class="n">p</span> <span class="o">!=</span> <span class="n">e</span><span class="o">;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">)</span>
</span><span class="line">                    <span class="n">newFirst</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;(</span><span class="n">p</span><span class="o">.</span><span class="na">key</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">hash</span><span class="o">,</span>
</span><span class="line">                                                  <span class="n">newFirst</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class="line">                <span class="n">tab</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">newFirst</span><span class="o">;</span>
</span><span class="line">                <span class="n">count</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span> <span class="c1">// write-volatile</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">        <span class="n">unlock</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>首先 remove 操作也是确定需要删除的元素的位置，不过这里删除元素的方法不是简单地把待删除元素的前面的一个元素的 next 指向后面一个就完事了，我们之前已经说过 HashEntry 中的 next 是 final 的，一经赋值以后就不可修改，在定位到待删除元素的位置以后，程序就将待删除元素前面的那一些元素全部复制一遍，然后再一个一个重新接到链表上去，看一下下面这一幅图来了解这个过程：</p>

<p><img src="http://pic.yupoo.com/goldendoc/Ba3OfBv8/medish.jpg" alt="image" /></p>

<p>假设链表中原来的元素如上图所示，现在要删除元素 3，那么删除元素 3 以后的链表就如下图所示：</p>

<p><img src="http://pic.yupoo.com/goldendoc/Ba3OfPQE/medish.jpg" alt="image" /></p>

<h3 id="concurrenthashmap--size-">ConcurrentHashMap 的 size 操作</h3>

<p>在前面的章节中，我们涉及到的操作都是在单个 Segment 中进行的，但是 ConcurrentHashMap 有一些操作是在多个 Segment 中进行，比如 size 操作，ConcurrentHashMap 的 size 操作也采用了一种比较巧的方式，来尽量避免对所有的 Segment 都加锁。</p>

<p>前面我们提到了一个 Segment 中的有一个 modCount 变量，代表的是对 Segment 中元素的数量造成影响的操作的次数，这个值只增不减，size 操作就是遍历了两次 Segment，每次记录 Segment 的 modCount 值，然后将两次的 modCount 进行比较，如果相同，则表示期间没有发生过写入操作，就将原先遍历的结果返回，如果不相同，则把这个过程再重复做一次，如果再不相同，则就需要将所有的 Segment 都锁住，然后一个一个遍历了，具体的实现大家可以看 ConcurrentHashMap 的源码，这里就不贴了。</p>
]]></content>
  </entry>
  
</feed>
