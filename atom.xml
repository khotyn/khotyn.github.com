<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小径分岔的花园]]></title>
  <link href="http://khotyn.github.com/atom.xml" rel="self"/>
  <link href="http://khotyn.github.com/"/>
  <updated>2020-08-09T10:35:15+08:00</updated>
  <id>http://khotyn.github.com/</id>
  <author>
    <name><![CDATA[khotyn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「最后的生还者：第二篇章」游戏体验]]></title>
    <link href="http://khotyn.github.com/blog/2020/08/09/tlou2/"/>
    <updated>2020-08-09T10:08:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2020/08/09/tlou2</id>
    <content type="html"><![CDATA[<p><img src="http://khotyn.github.com/images/tlou2.jpeg" alt="" /></p>

<p>经过了将近两个月的时间，终于把顽皮狗最新的作品「最后的生还者：第二篇章」（简称 TLOU2）通关了，我订阅的播客列表里面也有很多关于 TLOU2 的讨论，包括机核的以及硬影像的，为了能够有完整的游戏体验，我一直都把这几期的播客放到了最后听，这个应该是今年玩得最认真的一个游戏了。</p>

<p>的确，TLOU2 的游戏剧情并不太讨人喜欢，我也不太喜欢这个剧情，游戏刚开始乔尔就这么随随便便地死了，最终艾莉最终还是没有把埃比杀死，最终也没有给乔尔复仇，艾莉的爱人也离她而去，最终似乎什么都没有得到，白白走了一场，还断了两根手指。不过我认为这倒是真实的一种体现，生活中很多事情的确就会这样，努力过了，最终出现无疾而终的情况，所以我虽然不太喜欢，但的确没有那么不喜欢。</p>

<p>除了游戏的剧情之外，其他的方面我觉得 TLOU2 做得还是非常不错，包括射击的手感，游戏的流畅程度，画面的精细程度等等。最让人家惊艳的演职员表中艾利和乔尔合唱的 <a href="https://www.bilibili.com/video/BV13g4y1v7fi">Wayfaring Stranger</a>，让整个游戏游玩结束那种略微悲伤的感觉得到升华。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDK13 新特性之 Dynamic CDS]]></title>
    <link href="http://khotyn.github.com/blog/2019/10/08/jdk13-dynamic-cds/"/>
    <updated>2019-10-08T20:51:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2019/10/08/jdk13-dynamic-cds</id>
    <content type="html"><![CDATA[<p>一年多以前，我写过一篇文章<a href="http://khotyn.github.com/blog/2018/03/21/app-cds/">Java 10 新特性之 AppCDS</a>，文章的最后有一个结论：</p>

<blockquote>
  <p>虽然 AppCDS 号称可以支持自定义的 Classloader，但是我试了一个 SpringBoot 的应用，发现对于没有在 -classpath 中指定的 JAR 包中的类，并不会有效果。</p>
</blockquote>

<p>在 Java 的世界中，自定义的 Classloader 情况太多了，这个大大限制了 AppCDS 的应用，不过，这次看了 JDK13 的 Release Note，很开心看到 JDK13 对 CDS 的功能进行了增强，本次对 CDS 的增强主要是两个方面：</p>

<ul>
  <li>一个是简化了 CDS 的使用，在原来的步骤中，需要生成能够 dump 的 Class 文件的列表，然后再根据这份文件生成 dump 的内容，然后再使用 dump 的内容进行启动的加速。现在一步就可以直接生成 dump 文件了拿过来做启动的加速了，比原来少了一步。</li>
  <li>另一个增强是现在 CDS 不仅仅会 dump <code>-cp</code> 指定的类路径下的 Class，并且会 dump 在应用退出之前所有已经加载的类，有个这个特性，CDS 就能够用在各种场景下了。</li>
</ul>

<p>接下来，我们就尝试一下在 SOFABoot 中使用 Dynamic CDS，首先新建一个 Spring Boot 的应用，并且把 parent 替换为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;parent&gt;</span>
</span><span class="line">    <span class="nt">&lt;groupId&gt;</span>com.alipay.sofa<span class="nt">&lt;/groupId&gt;</span>
</span><span class="line">    <span class="nt">&lt;artifactId&gt;</span>sofaboot-dependencies<span class="nt">&lt;/artifactId&gt;</span>
</span><span class="line">    <span class="nt">&lt;version&gt;</span>3.1.5<span class="nt">&lt;/version&gt;</span>
</span><span class="line"><span class="nt">&lt;/parent&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后我们可以编译并且启动一下，看下耗时情况：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">➜  time java -jar target/dynamiccds-0.0.1-SNAPSHOT.jar
</span><span class="line">
</span><span class="line">  .   ____          _            __ _ _
</span><span class="line"> /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
</span><span class="line">( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
</span><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
</span><span class="line">  &#39;  |____| .__|_| |_|_| |_\__, | / / / /
</span><span class="line"> =========|_|==============|___/=/_/_/_/
</span><span class="line"> :: Spring Boot ::        (v2.1.0.RELEASE)
</span><span class="line">
</span><span class="line">2019-10-08 23:16:55.768  INFO 69815 --- [           main] c.e.dynamiccds.DynamiccdsApplication     : Starting DynamiccdsApplication v0.0.1-SNAPSHOT on lotus.local with PID 69815 (/Users/khotyn/Downloads/dynamiccds/target/dynamiccds-0.0.1-SNAPSHOT.jar started by khotyn in /Users/khotyn/Downloads/dynamiccds)
</span><span class="line">2019-10-08 23:16:55.772  INFO 69815 --- [           main] c.e.dynamiccds.DynamiccdsApplication     : No active profile set, falling back to default profiles: default
</span><span class="line">2019-10-08 23:16:56.377  INFO 69815 --- [           main] c.e.dynamiccds.DynamiccdsApplication     : Started DynamiccdsApplication in 0.981 seconds (JVM running for 1.411)
</span><span class="line">java -jar target/dynamiccds-0.0.1-SNAPSHOT.jar  4.14s user 0.29s system 301% cpu 1.473 total
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>耗时时间是 4.14s。</p>

<p>然后我们用如下的命令生成一下 Class 的 Dump：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">java -XX:ArchiveClassesAtExit=dcds.jsa -jar target/dynamiccds-0.0.1-SNAPSHOT.jar
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后我们再执行以下命令就可以使用刚才 Dump 出来的文件了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">time java -XX:SharedArchiveFile=dcds.jsa -jar target/dynamiccds-0.0.1-SNAPSHOT.jar
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看下输出：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">➜  time java -XX:SharedArchiveFile=dcds.jsa -jar target/dynamiccds-0.0.1-SNAPSHOT.jar
</span><span class="line">
</span><span class="line">  .   ____          _            __ _ _
</span><span class="line"> /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
</span><span class="line">( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
</span><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
</span><span class="line">  &#39;  |____| .__|_| |_|_| |_\__, | / / / /
</span><span class="line"> =========|_|==============|___/=/_/_/_/
</span><span class="line"> :: Spring Boot ::        (v2.1.0.RELEASE)
</span><span class="line">
</span><span class="line">2019-10-08 23:20:44.078  INFO 70738 --- [           main] c.e.dynamiccds.DynamiccdsApplication     : Starting DynamiccdsApplication v0.0.1-SNAPSHOT on lotus.local with PID 70738 (/Users/khotyn/Downloads/dynamiccds/target/dynamiccds-0.0.1-SNAPSHOT.jar started by khotyn in /Users/khotyn/Downloads/dynamiccds)
</span><span class="line">2019-10-08 23:20:44.083  INFO 70738 --- [           main] c.e.dynamiccds.DynamiccdsApplication     : No active profile set, falling back to default profiles: default
</span><span class="line">2019-10-08 23:20:44.636  INFO 70738 --- [           main] c.e.dynamiccds.DynamiccdsApplication     : Started DynamiccdsApplication in 0.91 seconds (JVM running for 1.462)
</span><span class="line">java -XX:SharedArchiveFile=dcds.jsa -jar target/dynamiccds-0.0.1-SNAPSHOT.jar  2.94s user 0.30s system 210% cpu 1.540 total
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>耗时是 2.94s，时间快了将近一秒多，这个时间可能相比于有大量业务逻辑的应用来说意义不大，但是也算是非常可观了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新西兰游记]]></title>
    <link href="http://khotyn.github.com/blog/2019/10/06/new-zealand/"/>
    <updated>2019-10-06T05:03:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2019/10/06/new-zealand</id>
    <content type="html"><![CDATA[<p>前段时间工作忙得飞起，一直想着找个时间可以出去放松一下，逃离下钉钉的轰炸。另外从和老婆结婚以来，一直都没有和她一起出国玩过，也想趁着这次机会，弥补一下这个空白。为什么要选择新西兰呢，一方面是因为知道它是魔界的取景地，风景非常优美，另一方面在网上看过皇后镇的照片，看起来就像人间天堂一样，最后也是因为在做攻略的时候发现了<a href="https://www.newzealand.com/cn/">100% 纯净新西兰</a>这个网站，了解到新西兰有大量的徒步路线，对于喜欢户外活动的我来说，真的是有非常大的吸引力。</p>

<h3 id="section">皇后镇</h3>

<p>到了新西兰，怎么能不去皇后镇呢，皇后镇除了本身非常美之外，还可以从镇上出发去周边的各种地方玩，往北可以去瓦纳卡，库克山，往南可以去米尔福德峡湾，是在南岛玩非常理想的据点。</p>

<p>如果预算足够的话，可以定一个在瓦卡蒂普湖旁边的酒店，这样醒来之后，拉开窗帘就可以直接看到清澈的瓦卡蒂普湖，再远点儿就是雪山，那是一种非常享受的感觉。</p>

<p><img src="http://khotyn.github.com/images/nz/IMG_1377.jpg" alt="" /> <em>「Copthorne Hotel &amp; Resort Lakefront Queenstown」酒店窗外的景色</em></p>

<p>在皇后镇有一个非常重要的游玩项目就是天空缆车，缆车本身倒是没有什么特别的地方，和国内各种景区的缆车没有什么差别，但是坐缆车到山顶之后，就可以看到坐落在瓦卡蒂普湖北岸的整个皇后镇，在天气好的时候，整个瓦卡蒂普湖倒影着天空的蓝色，稍远处就是 Double Cone 等雪山，雪山湖景，确实是人间天堂。</p>

<p><img src="http://khotyn.github.com/images/nz/IMG_1388.jpg" alt="" /> <em>天空缆车上去之后拍皇后镇</em></p>

<p>当然，到了皇后镇，也要享受一下皇后镇的美食，如果你跟我一样是一个要半夜出来觅食的夜猫子的话，那在皇后镇可能就只有「Day &amp; Night」这家便利店可以选择了，大部分的店在晚上十点钟左右就关门了。</p>

<p>我们在皇后镇期间，尝试了几家大众点评上推荐的店，尝试的第一家 FergBurger，刚到皇后镇入住酒店的时候，前台小姐姐就推荐了这家，我们去的时候，果然火爆，排队排了 10 多个人，还有好多人在等着叫号，FergBurger 的汉堡非常大，味道嘛，感觉还凑活（一个汉堡的味道能够好到哪里去，😅），如果两个人吃的话，点一个汉堡就够了，我们点了两个，结果吃不下浪费了。另外尝试的两家店是「Flame Bar &amp; Grill」和「Captains Restaurant」，个人更加喜欢「Captains Restaurant」，要说对于「Flame Bar &amp; Grill」有什么印象，我在写这篇文章的时候已经没有什么印象了，而「Captains Restaurant」我现在还记得他们家的生蚝的那个新鲜劲儿，以及煎三文鱼的那个香味，这两个菜好吃到我们点另一个西冷牛排都有点儿稍显逊色了（还是比「Flame Bar &amp; Grill」的牛排好吃）。</p>

<p><img src="http://khotyn.github.com/images/nz/IMG_1379.jpg" alt="" /> <em>感受下 FergBurger 的汉堡的大小</em></p>

<h3 id="section-1">瓦纳卡</h3>

<p>瓦纳卡离皇后镇不远，坐车 2 个小时不到，可以提前在 <a href="https://www.intercity.co.nz">InnerCity Bus</a> 的网站上买票，瓦纳卡镇得名于瓦纳卡湖，又是一个在湖边的小镇，当然，旁边肯定也有雪山，看起来和皇后镇的风景有点儿类似，但是如果你去罗伊峰徒步的话，想法就会不一样了，罗伊峰徒步也是我们这次去瓦纳卡的主要目标，从瓦纳卡镇到罗伊峰徒步的停车场没有公共交通可以达到，如果你没有租车的话，可以叫出租车过去，25 NZD，价格还是挺贵的。罗伊峰徒步美其名曰徒步，其实就是爬山，而且是不断地往上爬的过程，路上比较单调，到峰顶差不多需要 3 个小时左右，峰顶海拔 1000 多米，山顶上非常冷，需要注意保暖，我们爬到 2 个半小时左右的路程，才知道这里有一个网红打卡点，很多人在这里拍照，的确拍到非常棒的风景，风景比在皇后镇天空缆车上看到的要广阔多了。</p>

<p><img src="http://khotyn.github.com/images/nz/IMG_1418.jpg" alt="" /> <em>罗伊峰徒步的网红打卡点</em></p>

<p><img src="http://khotyn.github.com/images/nz/IMG_1461.jpg" alt="" /> <em>罗伊峰山顶的柱子</em></p>

<p>新西兰很多地方都可以玩高空跳伞，瓦纳卡镇旁边也有一个，有一家公司叫做 Wanaka Skydive，可以去小镇上的 iSite 预订，我们是第一次尝试高空跳伞，本来我只想跳一下，不想拍照，因为太贵了，需要 199 NZD，但是老婆非常贴心地帮我买了拍照的服务，后面看起来还是非常值得的，毕竟我可能也就跳这么一次，因此留下照片也显得弥足珍贵。我其实是有一点恐高的，但是奇怪高空跳伞却没有害怕的感觉，我选择的是 12000 英尺的高空跳伞，是整个飞机里面第一个跳的，在还没有反应过来的时候，教练就带着我跳下去了，在自由落地的过程中，感受到的是呼啸而过的风以及从高空看下去的全景，完全没有在掉落的感觉，可能是太高了，等降落伞打开了之后，教练让我尝试了几下操控降落伞，看起来比较简单，左边拉下就是往左转，右边拉就是往右转。如果让我再去体验一次高空跳伞，我可能也不会去了，第一次是无知者无畏，第二次可能就会真的害怕了。</p>

<p><img src="http://khotyn.github.com/images/nz/14__TING HUANG__Dicko__14-45__G0042537.jpg" alt="" /> <em>自由落地阶段</em></p>

<p><img src="http://khotyn.github.com/images/nz/14__TING HUANG__Dicko__14-45__G0042577.jpg" alt="" /> <em>降落伞打开阶段</em></p>

<h3 id="section-2">库克山</h3>

<p>库克山是新西兰的最高峰，本来我们并没有打算去库克山，而是去米尔福德峡湾，但是因为已经定了皇后镇回奥克兰的机票，去米尔福德峡湾回到皇后镇的话，可能赶不上飞机，就转而选择了库克山一日游，说是库克山一日游，其实大部分时间都是在路上，我们在库克山只待了两个小时，不过仅仅这两个小时，就已经让我喜欢上了库克山，那边有非常多的徒步的路线，包括著名的胡克谷徒步，如果你喜欢徒步的话，请一定要记住在库克山多待上几天，给自己的足够的时间去徒步。遗憾的是我们去库克山那天，胡克谷那边下着小雨，整个库克山也被云雾笼罩着，不过走在山谷之中，也让我真正地感受到了在荒野那种空旷的感觉，感受到了自己的渺小。</p>

<p><img src="http://khotyn.github.com/images/nz/IMG_1510.jpg" alt="" /> <em>荒野中的山</em></p>

<p><img src="http://khotyn.github.com/images/nz/IMG_1514.jpg" alt="" /> <em>库克山外的山谷，旷野</em></p>

<h3 id="section-3">奥克兰</h3>

<p>奥克兰是新西兰最大的城市，是一个天气说变就变的城市，一会儿下雨，马上又是太阳了，而且经常风很大，因此穿一件冲锋衣是非常有必要的，奥克兰是一个在各种火山口上的城市，其中伊甸山就是一个死火山的火山口，就在城市中心。</p>

<p><img src="http://khotyn.github.com/images/nz/IMG_1523.jpg" alt="" /> <em>伊甸山</em></p>

<p>奥克兰周围的有非常多的小岛，我们去了豪拉基湾的朗依托托岛，要去朗依托托岛可以在 Queens Ferry 购买船票，从 Queens Ferry 到朗伊托托岛差不多 25 分钟的时间，来回船票每个人 36 NZD，朗依托托岛上没有任何商店，并且基本上没有住宿，所以去了朗伊托托岛之前，一定要带上足够的食物以及水，另外一定要注意最后一班回奥克兰的船时间，一般上是下午三点半，我们那天因为潮汐的关系，提前到了两点半。朗伊托托岛是一个火山岛，差不多 600 多年前因为火山喷发而形成，岛上可以看到非常多的火山岩，朗伊托托岛在二战期间也曾经作为一个军事基地，岛上有不少的徒步路线，我们选择了 Coastal Track，中间走错了路，到了废弃的军事遗留基地，很遗憾最后没有去岛上的最高峰。</p>

<p><img src="http://khotyn.github.com/images/nz/IMG_1539.jpg" alt="" /> <em>岸边的火山岩</em></p>

<p><img src="http://khotyn.github.com/images/nz/IMG_1546.jpg" alt="" /> <em>朗伊托托岛的码头</em></p>

<p><img src="http://khotyn.github.com/images/nz/IMG_1560.jpg" alt="" /> <em>朗伊托托岛上的海鸟，根本不怕人</em></p>

<h3 id="section-4">遗憾</h3>

<p>这次去新西兰一共玩了差不多七天时间，还是有不少的遗憾，一个是没有去成米尔福德峡湾，因为以前定了机票的原因，另一个是在库克山待的时间太短了，除此之外，因为时间的关系，也没有能够去成汤加里罗高山步道。也好也好，留有遗憾，下次再来！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[闪之轨迹 4 玩后感]]></title>
    <link href="http://khotyn.github.com/blog/2019/10/06/the-legend-of-heroes-4/"/>
    <updated>2019-10-06T04:56:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2019/10/06/the-legend-of-heroes-4</id>
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/117032/1567947892371-d4fe946d-6508-4b13-83d3-626658f61738.jpeg#align=left&amp;display=inline&amp;height=720&amp;name=maxresdefault.jpg&amp;originHeight=720&amp;originWidth=1280&amp;size=261324&amp;status=done&amp;width=1280" alt="maxresdefault.jpg" /></p>

<p>从入手闪之轨迹 4 到现在应该有大半年的时间了，平时并没有什么时间可以用来玩游戏，只有周末几个小时的时间，所以通关速度比较慢，我一直以来对于游戏都非常感兴趣，也希望将自己体验过的一些游戏的感受给写下来，在玩游戏方面，我绝对不是一个资深的玩家，更多写的是一些个人的感受，大部分都是一些主观感受，写下来的目的也是为了加强自己的文字的表达能力，让自己有机会可以深入思考游戏的一些体验，而不是通关就算数了。</p>

<p>这次我第一次通关了轨迹系列，首先讲一下整个过程中最大的体感，闪之轨迹 4 是一个对非粉丝不太友好的游戏，游戏刚刚开始的时候，人物一批批地出场，加上大量的世界观设定的名词，如果你之前没有玩过任何轨迹系列的作品，肯定会有和我一样感觉到完全不知道在干些什么，实际上，到了游戏通关的时候，有一些角色之间的关系我都还没有搞懂，如果你是一个非轨迹系列的粉丝，没有玩过轨迹系列的作品，那你得有游戏一开始就有大量的信息涌现到你的面前的准备，只有挺过前面的这一段之后，到悠娜寻找黎恩剧情展开之后，才会稍微有点儿好转。</p>

<p>因为我是以最低难度剧情通关的，所以接下来先来谈一下剧情方面，说实话，闪之轨迹 4 的剧情真的是太过于“中二”，太过于模式化了，敌方阵营的人没有几个人是有坚定的意志的，基本上被主角团打到了之后就开始反省，洗白，一直到倒数第二个 Boss，还在洗白，喂，洗白洗地是不是太过分了，洗到最后 Boss 还没有开始打地时候，就知道打赢了一定会洗白了。另外，剧情其实是挺枯燥，整个剧情总结起来就是找小伙伴，找黎恩，继续找小伙伴，然后开干，特别是第二章和第三章，都在大量地找各种小伙伴，这一段真地是有点儿玩不下去了。</p>

<p>最后还是谈一下战斗吧，其实我应该没有什么资格来谈闪之轨迹 4 的战斗系统，因为我是最低难度通关的嘛，但是无脑输出后面，发现了回合制战斗系统里面一些可以玩的地方，比如有些时候第 N 个回合会有必杀、破防之类的特效，如果刚好这个是一个敌方的回合，你可以通过时间加速把敌方挤到后面去，让这个回合变成己方回合，从而拿到特效，之前在玩 P5 的时候好像并没有这样的设计，这种设计让很少接触回合制游戏的我来说，还是有一点儿新意，感受到了整个游戏一定的可玩性的。</p>

<p>总结一下闪之轨迹 4 的话，如果是 10 分是满分的话，我给打个 7 分吧，如果你没有玩过轨迹系列的话，并且没有好游戏玩了，是可以玩一下的。如果你是轨迹系列的粉丝的话，那就另当别论了，毕竟我并不是粉丝。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpringBoot on Kubernetes]]></title>
    <link href="http://khotyn.github.com/blog/2018/03/24/springboot-on-kubernetes/"/>
    <updated>2018-03-24T16:40:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2018/03/24/springboot-on-kubernetes</id>
    <content type="html"><![CDATA[<p>本文将从创建一个 SpringBoot 的应用开始，详细讲述如何将一个 SpringBoot 的应用部署到本地的 Kubernetes 集群上面去。</p>

<h2 id="springboot-">创建 SpringBoot 应用</h2>
<p>首先，我们需要创建一个 SpringBoot 的应用，可以到 <a href="http://start.spring.io/">http://start.spring.io/</a> 创建一个，在创建的时候，我们需要选择一个 Web 的依赖，以方便部署到 Kubernetes 之后可以看到效果。</p>

<p>创建完成之后，可以修改一下 SpringBoot 应用的 <code>main</code> 函数所在的类，让它成为一个 Controller：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@SpringBootApplication</span>
</span><span class="line"><span class="nd">@Controller</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebDemoApplication</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">WebDemoApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="nd">@ResponseBody</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;Hello, Kubernetes!&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样，在本地启动这个 SpringBoot 的应用之后，如果我们访问 <code>http://localhost:8080/hello</code> 的话，就可以看到 <code>Hello, Kubernetes!</code> 这句话。</p>

<h2 id="dockerfile">创建一个 Dockerfile</h2>
<p>为了能够将这个 SpringBoot 的应用部署到 Kubernetes 里面去，我们需要创建一个 Dockerfile，将它打成一个 Docker 镜像：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">FROM</span> <span class="nl">openjdk:</span><span class="mi">8</span><span class="o">-</span><span class="n">jdk</span><span class="o">-</span><span class="n">alpine</span>
</span><span class="line"><span class="n">ARG</span> <span class="n">JAR_FILE</span>
</span><span class="line"><span class="n">ADD</span> <span class="n">$</span><span class="o">{</span><span class="n">JAR_FILE</span><span class="o">}</span> <span class="n">app</span><span class="o">.</span><span class="na">jar</span>
</span><span class="line"><span class="n">ENTRYPOINT</span> <span class="o">[</span> <span class="s">&quot;java&quot;</span><span class="o">,</span> <span class="s">&quot;-jar&quot;</span><span class="o">,</span> <span class="s">&quot;/app.jar&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的 Dockerfile 是一个非常简单的 Dockerfile，只是将 SpringBoot 应用打包后的 uber-jar 拷贝到容器里面去，然后运行这个 jar 包。有了这个 Dockerfile 之后，我们就可以在本地把 Docker 镜像打包出来了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">docker</span> <span class="n">build</span> <span class="o">--</span><span class="n">build</span><span class="o">-</span><span class="n">arg</span> <span class="n">JAR_FILE</span><span class="o">=./</span><span class="n">target</span><span class="o">/</span><span class="n">web</span><span class="o">-</span><span class="n">demo</span><span class="o">-</span><span class="mf">0.0</span><span class="o">.</span><span class="mi">1</span><span class="o">-</span><span class="n">SNAPSHOT</span><span class="o">.</span><span class="na">jar</span> <span class="o">.</span> <span class="o">-</span><span class="n">t</span> <span class="n">springboot</span><span class="o">-</span><span class="n">demo</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后需要注意的是，这样打出来的镜像是在本地的，没有办法被 minikube 找到，所以，要么将这个镜像放到一个中央的镜像仓库上，要么我们使用 minikube 的 docker daemon 来打镜像，这样 minikube 就可以找到这个镜像。</p>

<p>所以，你首先需要在本地将 minikube 安装上去，具体可以看官方的<a href="https://kubernetes.io/docs/tasks/tools/install-minikube/">安装教程</a>。安装完成之后，先运行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">minikube</span> <span class="n">start</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>来将 minikube 启动起来，然后可以运行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">eval</span> <span class="n">$</span><span class="o">(</span><span class="n">minikube</span> <span class="n">docker</span><span class="o">-</span><span class="n">env</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将 docker daemon 切换成 minikube 的。最后，我们再用上面的 <code>docker build</code> 来进行打包，minikube 就可以看到了。</p>

<h2 id="minikube-">将应用部署到 minikube 中去</h2>
<p>Docker 镜像都准备好了，现在我们可以将应用部署到 minikube 中去了，首先我们需要创建一个 deployment 对象，这个可以用 yml 文件来描述：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apps/v1beta1</span>
</span><span class="line"><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deployment</span>
</span><span class="line"><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class="line">  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">springboot-demo-deployment</span>
</span><span class="line">  <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">springboot-demo</span>
</span><span class="line"><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class="line">  <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class="line">  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="l-Scalar-Plain">matchLabels</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">springboot-demo</span>
</span><span class="line">  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class="line">        <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">springboot-demo</span>
</span><span class="line">    <span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class="line">      <span class="l-Scalar-Plain">containers</span><span class="p-Indicator">:</span>
</span><span class="line">        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">springboot-demo</span>
</span><span class="line">          <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">springboot-demo</span>
</span><span class="line">          <span class="l-Scalar-Plain">imagePullPolicy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">IfNotPresent</span>
</span><span class="line">          <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class="line">            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">containerPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">8080</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的 yaml 文件没有什么特别的地方，除了 <code>imagePullPolicy</code> 需要指定成 <code>IfNotPresent</code>，这样 minikube 才会从本地去找镜像。</p>

<p>有了上面的 yaml 文件之后，我们就可以运行 <code>kubectl apply -f springboot-demo.yml</code> 来让 minikube 将我们的 SpringBoot 的应用的集群给创建出来。</p>

<h2 id="minikube--springboot-">访问 minikube 中的 SpringBoot 集群</h2>
<p>现在我们已经将 SpringBoot 应用部署到了 minikube 中去，那么怎么访问这个集群呢，首先我们需要将端口暴露出来：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="l-Scalar-Plain">kubectl expose deployment springboot-demo-deployment --type=NodePort</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后运行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="l-Scalar-Plain">minikube service springboot-demo-deployment --url</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到访问的 URL。再在得到的 URL 后面加上 <code>/hello</code>，就可以看到 <code>Hello, Kubernetes!</code> 了。</p>

<p>或者，我们可以直接运行 <code>curl $(minikube service springboot-demo-deployment --url)/hello</code> 来访问。</p>

<p>以上就是如何将一个 SpringBoot 的应用部署到 Kubernetes 里面去的全过程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 10 新特性之 AppCDS]]></title>
    <link href="http://khotyn.github.com/blog/2018/03/21/app-cds/"/>
    <updated>2018-03-21T15:41:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2018/03/21/app-cds</id>
    <content type="html"><![CDATA[<p>Oracle 昨天<a href="https://www.oracle.com/corporate/pressrelease/Java-10-032018.html">公布了 Java 10 的 GA 版本</a>，Java 10 里面除了<a href="http://openjdk.java.net/jeps/286">本地变量类型推断</a>之外，还扩展了原来的 CDS 的能力为 <a href="http://openjdk.java.net/jeps/310">AppCDS</a>。</p>

<h2 id="cds">什么是 CDS</h2>
<p>CDS 的全称是 Class-Data Sharing，CDS 的作用是可以让类可以被预处理放到一个归档文件中，后续 Java 程序启动的时候可以直接带上这个归档文件，这样  JVM 可以直接将这个归档文件映射到内存中，以节约应用启动的时间。</p>

<p>这个特性其实 JDK 1.5 就开始引入了，但是 CDS 只能作用与 Boot Class Loader 加载的类，不能作用于 App Class Loader 或者自定义的 Class Loader 加载的类，其实有点鸡肋，而且这个是 Oracle JDK 的商业特性，在 OpenJDK 中似乎没有。</p>

<p>这次在 Java 10 中，则将 CDS 扩展为 AppCDS，顾名思义，AppCDS 不止能够作用于 Boot Class Loader，App Class Loader 和自定义的 Class Loader 也都能够起作用，大大加大了 CDS 的适用范围。有了 AppCDS，可以给 Java 的应用程序带来两个方面的好处：</p>

<ul>
  <li>可以提升一些大型的 Java 应用的启动速度。</li>
  <li>可以提升 Serverless 的应用程序的启动速度。我觉得这个点可能是 Java 10 提供 AppCDS 的主要原因，Serverless 极可能成为未来的应用的一种非常常见的形态，而把 Java 应用在 Serverless 上，相比于其他的语言来说，一个很大的劣势就是 JVM 的启动速度太慢了，虽然像 AWS 的 Lambda，会给 Java 的 Serverless 应用加上 <code>-client</code> 来用 Client 模式跑加快启动速度，但是实际上效果甚微。有了 AppCDS，可以大大加快 Serverless 应用的启动速度，按照 AppCDS 的 JEP 的说明，对于一个 JEdit 来说，AppCDS 可以为 JEdit 提升 20% 到 30% 的启动速度。</li>
</ul>

<h2 id="appcds">尝试 AppCDS</h2>
<p>作者写了一个简单的 Java 应用，来测试 AppCDS 的效果。程序的代码已经放到了 <a href="https://github.com/khotyn/java-ten-app-cds">Github</a> 上面，大家可以直接去看，这里只给出大概的操作步骤和最后的测试效果。</p>

<h3 id="dump--class">1. 决定要 Dump 哪些 Class</h3>
<p>一般来说，一个 Java 应用程序会包含很多的 Class 文件，但是在运行中，并不是所有的 Class 文件都会被用到，所以，第一步我们需要来决定具体需要使用哪些 Class 文件，你需要给你的运行命令上加上如下的 JVM 参数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-Xshare:off -XX:+UseAppCDS -XX:DumpLoadedClassList=hello.lst</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>几个参数的意思分别是：
* <code>-Xshare:off</code>：这个参数的意思是不做任何内存的共享，也就是不利用 AppCDS 产生的文件来做内存映射。因为是要决定 Dump 哪些类的内存到归档文件中，所以这个参数需要关掉。
* <code>-XX:+UserAppCDS</code>：默认的情况下 AppCDS 不会开启，所以我们需要加上这个参数来开启 AppCDS。
* <code>-XX:DumpLoadedClassList</code>：表示需要把需要做 Dump 的类名写入到哪个文件中。</p>

<p>这个命令执行之后，会出现一个 hello.lst 的文件，里面就是一个个的类名，下面是一部分内容的截图：
<img src="http://khotyn.github.com/images/app_cds_dump_file_list.png" alt="" /></p>

<h3 id="dump-">2. 将类的内存 Dump 到归档文件中</h3>
<p>有一个需要 Dump 的类的列表之后，第二步，我们就可以将类的内存 Dump 到归档文件中了，在这一步中，我们需要将以下的参数加入到 JVM 参数中去：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-Xshare:dump -XX:+UseAppCDS -XX:SharedClassListFile=hello.lst -XX:SharedArchiveFile=hello.jsa</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>几个参数的含义分别如下：</p>

<ul>
  <li><code>-Xshare:dump</code>：表示现在要进行类的内存的 Dump。</li>
  <li><code>-XX:SharedClassListFile</code>：用来指定需要 Dump 的类的列表。</li>
  <li><code>-XX:SharedArchiveFile</code>：表示需要将类的内存 Dump 到哪个归档文件中。</li>
</ul>

<p>运行上面的命令之后，我们会得到一个 <code>hello.jsa</code> 的文件，包含需要的内存信息的 Dump。</p>

<h3 id="dump--1">3. 使用 Dump 出来的归档文件加快应用启动速度</h3>
<p>有了前面的归档文件之后，我们就可以来加速应用的启动速度了，为了使用上述的归档文件，我们需要在 JVM 中加上如下的参数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-Xshare:on -XX:+UseAppCDS -XX:SharedArchiveFile=hello.jsa</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>几个参数的含义分别如下：</p>

<ul>
  <li><code>-Xshare:on</code>：表示打开内存映射。</li>
  <li><code>-XX:SharedArchiveFile=hello.jsa</code>：表示用来做内存映射的归档文件是 <code>hello.jsa</code>。</li>
</ul>

<h3 id="section">4. 测试效果</h3>
<p>在我的本机上，不使用 AppCDS 和使用 AppCDS 的效果如下：</p>

<h4 id="appcds-1">不使用 AppCDS</h4>
<p><img src="http://khotyn.github.com/images/app_cds_disable.png" alt="" /></p>

<h4 id="appcds-2">使用 AppCDS</h4>
<p><img src="http://khotyn.github.com/images/app_cds_enable.png" alt="" />
可以看到，对于这样一个简单的应用，AppCDS 还是有 20% 左右的启动速度提升的，当然这个应用的很多的启动时间都花在了类加载上，其他的耗时不多，所以效果挺好。如果其他的应用程序的启动时间花在类上的加载时间比较少的话，可能效果就没有这么明显。</p>

<h2 id="section-1">坑</h2>
<p>看起来 AppCDS 很美好，但是目前我使用下来有几个坑：</p>

<ul>
  <li>虽然 AppCDS 号称可以支持自定义的 ClassLoader，但是我试了一个 SpringBoot 的应用，发现对于没有在 <code>-classpath</code> 中指定的 JAR 包中的类，并不会有效果。</li>
  <li>如果你下载 Oracle 的 JDK，需要加上 <code>-XX:+UnlockCommercialFeature</code> 来开启 AppCDS，但是 OpenJDK 却不用，也是很奇怪，😅</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud Native Infrastrcuture 阅读笔记]]></title>
    <link href="http://khotyn.github.com/blog/2018/02/19/cloud-native-infrastrcuture/"/>
    <updated>2018-02-19T21:00:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2018/02/19/cloud-native-infrastrcuture</id>
    <content type="html"><![CDATA[<p>这是假期读的第二本书，以下是对本书的阅读的内容的一些总结：</p>

<p>就 Cloud native 这个词来说，已经被市场人员到处在用了，就跟 Microservice 一样，很难清晰地去定义到底什么是 Cloud native。在本书中，作者提到的 Cloud native 其实包含了两个部分的内容，一个是 Cloud native 的基础设施（Cloud native infrastructure），另一个是 Cloud native 的应用（Cloud native application）。作者对于 Cloud native infrastructure 的定义是：</p>

<blockquote>
  <p>Cloud native infrastructure is infrastructure that is hidden behind useful abstractions, controlled by APIs, managed by software, and has the purpose of running applications. Running infrastructure with these traits gives rise to a new pattern for managing that infrastructure in a scalable, efficient way.  </p>
</blockquote>

<p>所谓的 Cloud native 的基础设施就是当我们的基础设施（大量的 VM/Docker，复杂的网络，各种各样的储存等等）变的非常复杂和庞大的时候，通过人力是无法高效地进行运维的，在这样的大规模下，我们应该尽量地去避免人工介入，而是需要有一套软件来帮助我们更好地去管理我们的基础设施，可以让运行在这套基础设施上 Cloud  native 的应用可以非常方便地被运维，部署，监控等等。那么怎么去设计管理 Cloud native 的基础设施的系统呢，作者提到了几个点，其中包括系统的自举，API 的设计等等，但是我觉得其中最重要的一点是 Reconciler Pattern，关于这个 Pattern，书中提到了四个原则：</p>

<ul>
  <li>Use a data structure for all inputs and outputs.</li>
  <li>Ensure that the data structure is immutable.</li>
  <li>Keep the resource map simple.</li>
  <li>Make the actual state match the expected state.</li>
</ul>

<p>其中最后一点和 Reconciler Pattern 的关系最大，这个也是 Kubernetes 中的方式，我们往 Kubernetes 中去提交一个 Spec，比如要求一个应用的实例的数量应该是 4，那么 Kubernetes 就会尽可能地去保证这个应用的实例的数量是 4，如果一个实例 Crash 了，它就马上新起一个实例。这就是所谓的 Reconciler Pattern，尽量让实际的状态可以和期望的状态匹配上。</p>

<p>Reconciler Pattern 在设计上非常大的一个优势就是它是声明式的，而不是反应式的。用户要做的是按照系统提供出的 API，直接告诉系统你想要什么，比如说，我想要一个应用的实例的数量保持在 4 个，系统就去考虑各种情况，让你的应用的数量保持在 4 个。而反应式的话，则是监听系统的事件，比如你的应用的某个实例 Crash 了，然后你监听到了这个事件之后，就调用系统的 API 去新创建一个实例。显然，对于用户来说，声明式的方式要简单地很多，不容易出错。而反应式则要求每一个应用都去监听系统的事件，不但侵入到了应用，也很容易出错。</p>

<p>在上面的 Reconciler Pattern 的四个原则中，第二点让数据结构是不可变的这一点也是非常重要的，但是我不是很明白这个点和 Reconciler Pattern 具体的关系在哪里？这个原则是说如果我们要修改一个数据结构，我们实际上不是修改它，而是新建一个新的，然后把原来的标记成过期，这样的好处是，我们可以保留数据结构中间的各种版本，当需要看下当前的 Infra 有哪些区别的，就可以把这些版本直接拿出来对比，非常方便地就可以回答线上环境到底发生了什么样的变更。</p>

<p>有了 Cloud native 的基础设施，我们还要有 Cloud native 的应用运行在上面，那么作为基础设施，我们还应该给应用到底提供什么样的能力呢，书中提到了八点：</p>

<ul>
  <li>Runtime and isolation（这里的 isolation 是指资源的 isolation，比如 CPU，Memory，Storage 等等）</li>
  <li>Resource allocation and scheduling</li>
  <li>Environment isolation（这里的 isolation 指的是环境的 isolation，比如 dev，test，staging，product）</li>
  <li>Service discovery</li>
  <li>State management（Readiness, Liveness）</li>
  <li>Monitoring and logging</li>
  <li>Metrics aggregation</li>
  <li>Debugging and tracing</li>
</ul>

<p>我们可以看到，上面的八个点中其实下面非常多的都是原来传统的中间件在干的一些事情，而在 Cloud native 的基础设施中，这些中间件正在往下沉，直接成为基础设施的一部分，为应用提供能力。而且在 CNCF 中，上面的八个点基本上都有一个对应的产品对应：</p>

<ul>
  <li>Runtime and isolation: containers, rkt</li>
  <li>Resource allocation and scheduling: kubernetes</li>
  <li>Environment isolation: kubernetes</li>
  <li>Service discovery: kubernetes</li>
  <li>State management: kubernetes</li>
  <li>Monitoring and logging: Prometheus, Fluentd</li>
  <li>Metrics aggregation: Prometheus</li>
  <li>Debugging and tracing: OpenTracing, Jaeger</li>
</ul>

<p>除了上面的八个点之外，我个人认为应该还加上一个点，就是 Network Resilient，这可以极大程度地解决应用之间的网络通信的问题，这个正是 Service Mesh 所提供的能力，在 CNCF 里面对应的产品是 Envoy（奇怪 istio 怎么还没有进入 CNCF）。</p>

<p>总结来说，本书的作者基本上把设计一个 Cloud native infrastructure 所需要做的事情都讲了一遍，包括上面没有提到的测试等等，大部分的内容其实就是 Kubernetes 目前已经做到的一些事情，如果你对 Kubernetes 的设计已经非常清楚了，那么这本书对你的价值可能不大，如果对 Kubernetes 的设计并不熟悉，那么相信你可以从这本书里面学到不少东西。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「法国妈妈育儿经」阅读笔记]]></title>
    <link href="http://khotyn.github.com/blog/2018/02/18/bring-up-baby/"/>
    <updated>2018-02-18T15:54:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2018/02/18/bring-up-baby</id>
    <content type="html"><![CDATA[<p>浅浅出生快半个月了，这半个月的时间基本上没有睡好觉，刚好在豆瓣上看到一个友邻分享了看完这本书的一些看法，挺有意思的，于是花了几个小时的时间看了一下。</p>

<p>本书将的是一位美国妈妈移居法国后，在法国的各种育儿的经历。主要的内容是在法国，爸爸妈妈们是如何培养孩子的，其中不乏拿美国来进行对比（感觉和中国比较类似），法国的育儿理念受到<a href="https://zh.wikipedia.org/wiki/让-雅克·卢梭">卢梭</a>和<a href="https://en.wikipedia.org/wiki/Françoise_Dolto">多尔托</a>的影响，主张孩子是一个独立的个体，即使在非常小的时候，孩子也有自己的认知，有自己的思想的，对待孩子应该是把他作为一个小大人来看待。</p>

<p>作为大人，应该善于倾听孩子们的想法，并且向他们解释这个世界，对他们的信任和尊重会赢得他们对自己的信任和尊重。在培养孩子的时候，应该给他们设定一定的界限，什么时候可以干，什么事情不能干，而在界限之类，孩子可以自由地做任何事情，以睡觉来举例子，可以要求孩子在 9 点钟就进自己的房间，但是具体她在里面做什么样的事情，我们可以不管，这样，孩子在里面玩耍，一会儿累了，就会自己上床睡觉。这样的好处是可以保证孩子的教养，安全，有素质的情况下，最大程度地让孩子的天性可以得到自由的发挥。</p>

<p>当然，除此之外，作为家长，千万不能以孩子为中心，家长应该有自己的空间和时间，也是独立的个体，不能一天到晚地追着小孩子跑，孩子是生活中非常重要的一个部分，但是生活中应该还有其他也非常重要的部分：工作，旅游，夫妻之间的约会等等。不能认为有了孩子，那么家长所有的时间就都是孩子的了。孩子长大了还是会独立，会离开，而你的配偶才是与你度过下半辈子的人。这方面，我们已经见到我们的长辈身上的一些悲剧，我不止听到一个人提起过，他的母亲有说过：「要不是为了你，我早就自杀了」这样的话，这样把孩子作为绝对重心的家庭往往会导致家庭的悲剧，我们这一代人，不能重蹈覆辙。</p>

<p>书中除了写了一些发过的育儿理念之外，也有一些比较实用的操作，比如如何让宝宝养成在几个月内就能够整晚睡觉的习惯，关键就是在孩子半夜哭起来的时候，先等一下仔细观察一下，看下孩子到底是不是真的需要换尿不湿了，或者真的是饿了，可以让她先哭上个几分钟，小孩子的睡眠周期大概是两个小时左右，哭一会，她会尝试控制自己，然后直接进入了下个睡眠周期了。作为家长，在这方面不能太急，需要有点耐心，有点狠（作为一个父亲，我发现女儿哭起来的时候，我就有一种冲过去抱抱她的冲动），控制一下抱她的冲动。这个技巧，我们也在尝试中，期望在浅浅几个月大的时候可以整晚地自己睡眠。</p>

<p>另外一些有用的操作就是如何养成孩子在吃东西上的一些习惯。一个是养成孩子定时吃饭的习惯，方法是让孩子能够等一等，不能孩子想吃的时候就想吃，慢慢习惯之后，孩子会在吃饭的时间尽量吃饱，然后即使饿了，也会自己耐心等一等。另一个是如何给孩子尝试各种食物，就是如果孩子不吃某种食物，可以几天之后再尝试给他吃同一种食物（可以用不同的烹饪方式），经过几次之后，孩子就会吃的。</p>

<p>当然，本书也有不少瑕疵，一个观点抛出来，和这个观点无关的废话有点多。有几个章节，作者主要就是在讲自己的经历（比如，双胞胎出生的那一章节），而没有谈育儿的内容，比较水。总的来讲，书中的一些方法和观点对于新爸爸妈妈们还是有一定的参考意义的，建议有兴趣的可以阅读一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intellij IDEA 插件开发 --- 一次 JVM Crash 问题的解决]]></title>
    <link href="http://khotyn.github.com/blog/2016/09/29/intellij-idea-plugin-jvm-crash/"/>
    <updated>2016-09-29T09:07:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2016/09/29/intellij-idea-plugin-jvm-crash</id>
    <content type="html"><![CDATA[<p>虽然今天遇到的不是一个有什么技术含量的问题，但是国内做这块的人太少了，觉得还是需要多分享分享，至少可以帮助新人走一些弯路，^_^</p>

<p>前几天手贱升级了 macOS Sierra，本来看到 Intellij IDEA 在 macOS Sierra 下面只有一个触摸板异常灵活的问题，觉得自己触摸板用地比较少就直接升级了，哪知道升级以后，在开发我们自己的 Intellij IDEA 插件的时候，启动的 IDEA 一会儿就出现了 Crash 的问题（Crash 的是通过 Intellij IDEA 启动起来的用来测试插件的 Intellij IDEA）。具体的 Crash 截图如下：</p>

<p><img src="https://upload-images.jianshu.io/upload_images/134563-0a04b1b5cc9bb723.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="intellij_idea_crash.png" /></p>

<p>本来想是不是要直接回到 OS X Yosemite，但是不甘心啊，觉得既然都已经升级了，那遇到问题就解决吧，幸好在 Jetbrains 官方的问题跟踪平台上看到了有了提了类似的问题：<a href="https://youtrack.jetbrains.com/oauth?state=%2Fissue%2FJRE-3">https://youtrack.jetbrains.com/oauth?state=%2Fissue%2FJRE-3</a></p>

<p>看这个帖子的意思是这个问题是 OpenJDK 的 Bug，于是顺藤摸瓜找到了 Jetbrains 在自己维护的 JDK 上对这个问题 Fix 的 Commit：</p>

<p><a href="https://github.com/JetBrains/jdk8u_jdk/commit/02f9a5fbb4924ff67c8a04c15e490acfcc750003">https://github.com/JetBrains/jdk8u_jdk/commit/02f9a5fbb4924ff67c8a04c15e490acfcc750003</a></p>

<p>如果把运行插件 SDK 的 JDK 换成 Jetbrains 自己的 JDK，应该就可以解决问题。当然，要使用 Jetbrains 自家的 JDK，不用拿着源代码自己 Build，可以直接从这里下载对应的 Build：<a href="https://bintray.com/jetbrains/intellij-jdk">https://bintray.com/jetbrains/intellij-jdk</a></p>

<p>下载过来以后在插件工程的「Project Structure」配置界面进行如下配置即可：</p>

<p><img src="https://upload-images.jianshu.io/upload_images/134563-eb53c97aca4ff78a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>

<ol>
  <li>将下载过来的 JDK 增加到 SDK 里面。</li>
  <li>找到当前正在用来运行插件的插件 SDK，将其以依赖的 JDK 修改成刚刚增加的 JDK。</li>
</ol>

<p>至此问题就已经解决，在这里建议大家如果要开发 Intellij IDEA 的插件的话，还是用 Jetbrains 自家的 JDK 比较好，毕竟 Jetbrains 已经在 OpenJDK 的基础上 Fix 了不少的问题，特别是很多和 Swing 相关的问题，使用他们的 JDK 可以帮助我们少走不少弯路。</p>

<hr />

<p>PS：如果有人对开发工具、插件感兴趣，欢迎留言联系我，蚂蚁金服需要最优秀的工程师来做研发工具，提升工程师的效率。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 对 NoClassDefFoundError 的“缓存”]]></title>
    <link href="http://khotyn.github.com/blog/2015/02/15/jvm-noclassdeffounterror-cache/"/>
    <updated>2015-02-15T20:44:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2015/02/15/jvm-noclassdeffounterror-cache</id>
    <content type="html"><![CDATA[<h2 id="section">问题</h2>

<p>今天在排查一个线上的问题，线上的一个应用在初始化一个类的静态字段的时候出现了 <code>NoClassDefFoundError</code>，并且在导致 <code>NoClassDefFoundError</code> 出现的根本原因消失后，后续再次尝试初始化这个类的时候，持续出现了 <code>NoClassDefFoundError</code>。</p>

<p>于是怀疑 JVM 是不是对一个类的 <code>NoClassDefFoundError</code> 做了缓存，在第一次加载这个类出现 <code>NoClassDefFoundError</code> 以后，后续再尝试加载就直接抛出 <code>NoClassDefFoundError</code>。</p>

<h2 id="section-1">实验</h2>

<p>为了证实自己的猜想，尝试设计了一个简单的实验，一个涉及三个类</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test1</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">static</span> <span class="n">Test2</span> <span class="n">test2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Test2</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;================================&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                <span class="k">new</span> <span class="nf">Test1</span><span class="o">();</span> <span class="c1">// 尝试实例化 Test1，触发 NoClassDefFoundError</span>
</span><span class="line">            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">                <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">Test</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">().</span><span class="na">loadClass</span><span class="o">(</span><span class="s">&quot;Test2&quot;</span><span class="o">);</span> <span class="c1">// 尝试加载 Test2，用于证实当将 </span>
</span><span class="line">                                                                    <span class="c1">// Test2.class 拷贝到 ClassPath 下的时候，</span>
</span><span class="line">                                                                    <span class="c1">// Test2 就可以加载到了。</span>
</span><span class="line">                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上述类的的作用是：Test2 是一个空的类，Test1 里面有一个 Test2 的静态成员。Test 是程序的主入口，在一个无限循环内部，不断地尝试去实例化 Test1，并且在加载 Test1 出现异常的时候，尝试加载一下 Test2。</p>

<p>实验的步骤是：</p>

<ol>
  <li>编译以上类，运行 <code>javac Test.java</code></li>
  <li>将生成出的 Test2.class 重命名成 Test2.class.bak</li>
  <li>运行 <code>java Test</code>，这个时候程序去加载 Test1 的时候，就会出现 <code>NoClassDefFoundError</code>，并且在尝试加载 Test2 的时候，会出现 <code>ClassNotFoundException</code>。</li>
  <li>将第二步重命名的 Test2.class.bak 该回成 Test2.class，这个时候程序去加载 Test1 的时候，就会出现 <code>NoClassDefFoundError</code>，在加载 Test2 的时候，不会出现 <code>ClassNotFoundException</code>。</li>
</ol>

<p>实验的第二步的目的是为了程序在加载 Test1 的时候因为找不到 Test2 出现 <code>NoClassDefFoundError</code>，第四步是为了和第二步做对照，说明在后续程序可以加载到 Test2 的时候，在实例化 Test1 的时候，依旧出现 <code>NoClassDefFoundError</code></p>

<p>在我的机器上，按照上面的方式去操作，结果如下：</p>

<p><img src="http://khotyn.github.com/images/cnf.png" alt="NoClassDefFoundError" /></p>

<p>结果正如预期，即使在后面 Test2 在 ClassPath 下的时候，<code>NoClassDefFoundError</code> 依旧出现，所以 JVM 里面肯定有地方对 <code>NoClassDefFoundError</code> 做了缓存。</p>

<h2 id="jvm-">JVM 里面的实现</h2>

<p>带着这个疑问，请教了部门里面的 JVM 专家，这个猜测得到了证实，并且他给出了 JVM 内部具体处理这段逻辑的代码，处理的代码在 JDK 的 <code>instanceKlass.cpp</code> 这个文件里面：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">bool</span> <span class="nl">instanceKlass:</span><span class="o">:</span><span class="n">link_class_impl</span><span class="o">(</span>
</span><span class="line">     <span class="n">instanceKlassHandle</span> <span class="n">this_oop</span><span class="o">,</span> <span class="n">bool</span> <span class="n">throw_verifyerror</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">   <span class="c1">// check for error state</span>
</span><span class="line">   <span class="k">if</span> <span class="o">(</span><span class="n">this_oop</span><span class="o">-&gt;</span><span class="n">is_in_error_state</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">     <span class="n">ResourceMark</span> <span class="nf">rm</span><span class="o">(</span><span class="n">THREAD</span><span class="o">);</span>
</span><span class="line">     <span class="n">THROW_MSG_</span><span class="o">(</span><span class="nl">vmSymbols:</span><span class="o">:</span><span class="n">java_lang_NoClassDefFoundError</span><span class="o">(),</span>
</span><span class="line">                <span class="n">this_oop</span><span class="o">-&gt;</span><span class="n">external_name</span><span class="o">(),</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line">   <span class="c1">// return if already verified</span>
</span><span class="line">   <span class="k">if</span> <span class="o">(</span><span class="n">this_oop</span><span class="o">-&gt;</span><span class="n">is_linked</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">     <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>并且在 <code>instanceClass.hpp</code> 这个文件中，定义了类的 <code>_init_state</code>，其中，<code>is_in_error_state</code> 这个方法的定义如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="kt">bool</span> <span class="n">is_in_error_state</span><span class="p">()</span> <span class="k">const</span>           <span class="p">{</span> <span class="k">return</span> <span class="n">_init_state</span> <span class="o">==</span> <span class="n">initialization_error</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[该死的 ^M]]></title>
    <link href="http://khotyn.github.com/blog/2014/11/15/damn-the-carriage-return-character/"/>
    <updated>2014-11-15T08:33:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/11/15/damn-the-carriage-return-character</id>
    <content type="html"><![CDATA[<p><code>^M</code>，神奇的字符！相信很多人写 Shell 脚本的时候都被这个字符坑过，我自己也至少被坑过两次。最近周围的好几个小伙伴又被 <code>^M</code> 坑，花了好几个小时检查脚本的错误，结果发现是 <code>^M</code> 导致的。所以写了这篇文章讲一下什么是 <code>^M</code>，当 <code>^M</code> 出现的时候一般会伴随着什么样的现象，出现了我们可以用什么手段去解决。</p>

<h3 id="m-"><code>^M</code> 是何方神圣</h3>

<p>这个得先从 Windows 和 Unix 下的换行符开始说起，在我的 Intellij IDEA 的右下方的状态栏上，有一块是展示当前文件的换行符的：</p>

<p><img src="https://pic.yupoo.com/khotyn/EcY8fTut/ksIoo.png" alt="Windows 和 Unix 下的文件换行符" /></p>

<p>可以看到在 Windows 下，换行符是 <code>\r\n</code>，在 Unix 下换行符是 <code>\n</code>。如果我们用把一个文件的换行符换成 Windows 的换行符，那么当我们用 <code>cat -v</code> 来看的时候，就可以看到：</p>

<p><img src="https://pic.yupoo.com/khotyn/EcYbafeN/medish.jpg" alt="cat -v 查看文件是否含有 ^M" /> </p>

<p>实际上 <code>^M</code> 就是 Windows 下的换行符中的 <code>\r</code> 部分。因为 Unix 下的换行符是 <code>\n</code>，所以当一个用 Windows 下的换行符的文件放在 Unix 下的时候，单行的最后一个字符就变成了 <code>\r</code>，<code>\r</code> 在 ASCII 码中是 <code>0xD</code>，而 <code>0xD</code> 在 VIM 和 <code>cat -v</code> 则刚好被显示为 <code>^M</code>。</p>

<blockquote>
  <p>刚才之所以用 <code>cat -v</code> 而不用普通的 <code>cat</code> 是因为 <code>^M</code> 是不可见的字符，如果仅仅用 <code>cat</code>，是看不到这个字符的。<code>cat</code> 的 <code>-v</code> 参数的作用就是显示不可打印的字符。</p>
</blockquote>

<h3 id="m--1"><code>^M</code> 会导致什么样的问题？</h3>

<p>我们已经知道了 <code>^M</code> 实际上就是 <code>\r</code>，而 <code>\r</code> 是回车符（Carriage Return），<strong>回车符的作用是将设备的位置重置到当前行的开头</strong>。</p>

<p>知道了 <code>\r</code> 的作用时候，我们来看一个现象：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">### 有一个普通文件，存放了一个路径，当前行的最后以 ^M 结尾
</span><span class="line">$ cat -v Main
</span><span class="line">/home/admin/khotyn.huangt/test/^M
</span><span class="line">
</span><span class="line">### Echo 一下，神奇了！
</span><span class="line">$ echo "`cat Main`/where am i"
</span><span class="line">/where am i/khotyn.huangt/test/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看到后面那个 echo 命令，它将 Main 文件中的内容提取出来，再在后面加上 <code>/where am i</code> 这个字符串，结果我们看到，<code>/where am i</code> 在打印的结果中跑到最前面去了，这正是 <code>\r</code> 这个字符的作用，因为 <code>cat Main</code> 的执行的结果的最后一个字符是 <code>\r</code>，所以一遇到这个字符，设备指针就直接回到了当前行的开头，所以 <code>\r</code> 后面的 <code>/where am i</code> 就直接显示在了最前面。</p>

<p><strong>所以，当你看到什么奇怪的路径，这个路径中莫名其妙地少了一些字符，出现了一些莫名其妙的字符串的，很可能就是 <code>^M</code> 导致的。</strong></p>

<h3 id="m--2">如何逃离 <code>^M</code> 的魔掌</h3>

<p>当你发现了 <code>^M</code> 导致的问题的时候，最直截了当的方式就是将 <code>^M</code> 从文件中去掉。</p>

<h4 id="section">一、临时解决的几个方法</h4>

<p>如果的机器上安装有 dos2unix，那么恭喜你，直接运行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">dos2unix /path/to/file</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就可以将一个文件的换行符从 Windows 的转换成 Unix 的。</p>

<p>但是，如果机器上没有装 dos2unix，而你又没法装上去（在一家公司工作总是会有各种各样的让你感觉很丧气的权限控制），那么你可以用 sed 来替换：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sed --in-place='' 's/^M//g' /path/to/file</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>注意：上面的 <code>^M</code> 只是显示的效果，输入的时候需要用组合键输入，先 <code>Ctrl + V</code>，然后马上 <code>Ctrl + M</code> 就可以在终端中输入 <code>^M</code> 了。</p>
</blockquote>

<p>当然，用 <code>tr</code> 之类的命令也可以，不过我一般用 <code>sed</code> 的原因是 <code>sed</code> 加上 <code>--in-place</code> 参数可以做到直接替换原文件，而不用产生临时的文件（危险而高效的操作）。</p>

<h4 id="section-1">二、预防此问题</h4>

<p>不过，前面说的只是当出现问题的时候如何解决，那么如何预防这个问题呢？</p>

<p>第一个方法当然是直接放大招，换个 Mac 啥的，或者把你的机器上的 Windows 格了，装个 Ubuntu 也好啊。真心觉得 Windows 对于程序员来说真的没有啥好处（我好想听说连微软都开源 .Net 了，并且会提供多平台的支持）。</p>

<p>第二个方法嘛，当在 Windows 下使用各种编辑器的时候，尽量将换行符设置成 Unix 的换行符。不要偷懒用 Windows 的换行符，出现了问题就是好几个小时的排查时间。（目前没有发现有什么场景下有必须用到 Windows 下的换行符的，如果有同学知道有这样的场景的话，不吝赐教）。</p>

<h4 id="section-2">三、防止被别人坑</h4>

<p>虽然我个人觉得不应该用 Windows，不过还是有同学的确是喜欢用，或者因为不可抗拒的因素而暂时在使用，为了防止出现这个问题，可以在版本管理软件上做控制，比如 <strong>Git</strong> 就可以设置换行符，当你提交文件的时候，可以将你的所有文本的换行符替换成你设定的换行符，详细可以看 <a href="https://help.github.com/articles/dealing-with-line-endings/">https://help.github.com/articles/dealing-with-line-endings/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intellij IDEA 的一些使用技巧]]></title>
    <link href="http://khotyn.github.com/blog/2014/10/19/intellij-idea-feature/"/>
    <updated>2014-10-19T21:41:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/10/19/intellij-idea-feature</id>
    <content type="html"><![CDATA[<p><strong>所有的这些功能都是在 Intellij IDEA 14 中测试的，其他的版本不一定适用</strong></p>

<h3 id="section">打开类的直接定位到某一行</h3>

<p>在 Mac 下，IDEA 默认的打开类的快捷键是 <code>Command+O</code>，不过这个快捷键也有一些技巧。</p>

<p>第一个是可以在打开类的时候直接跳到某一行，比如下面这样：</p>

<p><img src="https://pic.yupoo.com/khotyn/E8WysuL3/Pv6jh.png" alt="" /></p>

<p>打开 String 这个类的同时直接跳转到 String 的第 40 行。</p>

<h3 id="section-1">到某个类的某个方法</h3>

<p>IDEA 的 Open Symbol 功能可以直接定位到某一个类的某一个方法，默认的快捷键是 <code>Option+Command+O</code>，如下：</p>

<p><img src="https://pic.yupoo.com/khotyn/E8WRrUjB/I2Vom.png" alt="" /></p>

<h3 id="sublime-">像 Sublime 那样多行编辑</h3>

<p>以前要做多行编辑，总是现在 Sublime 里面先做好，然后再拷贝回到 IDEA 里面，现在知道了 IDEA 本身就自带这个功能，快捷键是 <code>Option+Shift+鼠标</code>，直接来看一个 gif 动画看来这个功能吧：</p>

<p><img src="http://khotyn.github.com/images/select_multi_line.gif" alt="" /></p>

<h3 id="smart-code-completion">Smart Code Completion</h3>

<p>除了普通的代码补全的功能之外，IDEA 还提供了智能的不全功能，我们看下对比：</p>

<p>下面是基本的补全功能：</p>

<p><img src="http://khotyn.github.com/images/basic_completion.gif" alt="" /></p>

<p>这个是智能的补全功能：</p>

<p><img src="http://khotyn.github.com/images/smart_completion.gif" alt="" /></p>

<p>可以看到智能补全可以直接推断类型，把不符合类型的提示直接全部过滤，让我们可以更加高效地编写代码。</p>

<h3 id="section-2">草稿</h3>

<p>工作的时候我们经常会创建一些临时文件，在 IDEA 14 中，加入了一个非常有用的创建草稿的功能，Mac 下的快捷键是 <code>Command+Shift+N</code>，你可以在一个工程里面随意创建任意数量的草稿。</p>

<p>上面的这些是前几天参加 QCon 的时候听 IDEA 的一个 Session 知道的一些技巧。个人认为这个 Session 比很多其他的 Session 都更加有料</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么我讨厌小米]]></title>
    <link href="http://khotyn.github.com/blog/2014/08/16/why-i-hate-xiaomi/"/>
    <updated>2014-08-16T20:53:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/08/16/why-i-hate-xiaomi</id>
    <content type="html"><![CDATA[<p>「多看阅读」一直是我最喜欢的阅读器，没有之一，在多看阅读上买的书也不少了，绝佳的用户体验，「多看阅读」甩出豆瓣阅读、唐茶等 N 条街。</p>

<p>不过，今天在多看阅读上看书的时候，却弹出了这样的东西：</p>

<p><img src="https://ww2.sinaimg.cn/large/61c0c922jw1ejergg5hj9j20g00qomzt.jpg" alt="多看阅读弹窗" /></p>

<p>多看在读者阅读书籍的中间弹出了这样的东西，并且不止弹出了一次，过个几分钟又弹出一次。我觉得多看这种极度不尊重读者的做法与被小米收购有着莫大的关系，小米一直以来给我的印象就是一个营销的公司，而不是一个认真做产品的公司，多看到了小米手里已经沦落成这份模样了，靠这样的弹窗来增加用户量，我决定在看完目前的这本书以后，就卸载多看阅读，以后看书还是买个 Kindle 省事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guice 集合注入]]></title>
    <link href="http://khotyn.github.com/blog/2014/08/16/guice-collection-inject/"/>
    <updated>2014-08-16T18:47:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/08/16/guice-collection-inject</id>
    <content type="html"><![CDATA[<p>Guice 的初学者在使用 Guice 往一个类中注入一个集合注入的时候，肯定有感觉到非常地不自然（这里的不自然我觉得一定程度上是不符合 Guice 给人的初印象），由于最近在项目中也在使用 Guice，所以在这里对 Guice 的集合注入做一个记录。</p>

<h4 id="guice--guice-multibindings">一、使用 Guice 的扩展 guice-multibindings</h4>

<p>Guice 的文档上关于 Guice 注入的最简单的例子应该就是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">bind</span><span class="o">(</span><span class="n">Interface</span><span class="o">.</span><span class="na">java</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="n">Implementation</span><span class="o">.</span><span class="na">java</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们希望在使用 Guice 做集合注入的时候肯定也是希望使用类似的 API 做注入，不过可惜的是，Guice 的核心里面并没有提供类似的 API 让我们可以使用来注入集合。</p>

<p>所幸的是，Guice 提供了一个扩展的包 <code>guice-multibindings</code> 使用和 Guice 最原始的 API 类似的方式来做注入。</p>

<p>需要使用这个扩展的包，使用 Maven 的话，可以在项目中加入如下的依赖：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">inject</span><span class="o">.</span><span class="na">extensions</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">guice</span><span class="o">-</span><span class="n">multibindings</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="mf">3.0</span><span class="o">&lt;/</span><span class="n">version</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">dependency</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>guice-multibindings</code> 主要使用了两种方式来注入，一种是注入一个 Set：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Multibinder</span><span class="o">&lt;</span><span class="n">CheckHandler</span><span class="o">&gt;</span> <span class="n">checkAdapter</span> <span class="o">=</span> <span class="n">Multibinder</span><span class="o">.</span><span class="na">newSetBinder</span><span class="o">(</span><span class="n">binder</span><span class="o">(),</span> <span class="n">CheckHandler</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line"><span class="n">checkAdapter</span><span class="o">.</span><span class="na">addBinding</span><span class="o">().</span><span class="na">to</span><span class="o">(</span><span class="n">InstalledCheckHandler</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>首先创建一个 <code>checkAdapter</code>，然后往这个 Multibinder 中，我们可以添加任意多的 <code>CheckHandler</code> 的实现。</p>

<p>另一种方式是注入一个 Map：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">MapBinder</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">CheckHandler</span><span class="o">&gt;</span> <span class="n">mapBinder</span> <span class="o">=</span> <span class="n">MapBinder</span><span class="o">.</span><span class="na">newMapBinder</span><span class="o">(</span><span class="n">binder</span><span class="o">(),</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">CheckHandler</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line"><span class="n">mapBinder</span><span class="o">.</span><span class="na">addBinding</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="n">InstalledCheckHandler</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Map 的注入方式和 Set 的注入方式非常类似。不过奇怪的一点是，Guice 并没有提供注入 List 的方法，<strong>这是值得思考的一点</strong>。</p>

<h4 id="provides-">二、使用 <code>@Provides</code> 来注入</h4>

<p>看了第一种方法，我们可以看到，上面的这种方法并不能注入一个 List，不过，我们还是有办法来注入一个 List 的，就是使用一个 <code>@Provides</code> 注解，比如在我们的 Guice Module 的类里面加入一下的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Provides</span>
</span><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">BindingAdapter</span><span class="o">&gt;</span> <span class="nf">provideBindingAdapter</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">List</span><span class="o">&lt;</span><span class="n">BindingAdapter</span><span class="o">&gt;</span> <span class="n">bindingAdapters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">BindingAdapter</span><span class="o">&gt;();</span>
</span><span class="line">    <span class="n">List</span><span class="o">&lt;</span><span class="n">OsgiServiceHolder</span><span class="o">&lt;</span><span class="n">BindingAdapter</span><span class="o">&gt;&gt;</span> <span class="n">bindingAdapterHolders</span> <span class="o">=</span> <span class="n">OsgiFrameworkUtils</span>
</span><span class="line">        <span class="o">.</span><span class="na">getServices</span><span class="o">(</span><span class="n">bundleContext</span><span class="o">,</span> <span class="n">BindingAdapter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="n">OsgiServiceHolder</span><span class="o">&lt;</span><span class="n">BindingAdapter</span><span class="o">&gt;</span> <span class="n">bindingAdapterHolder</span> <span class="o">:</span> <span class="n">bindingAdapterHolders</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">final</span> <span class="n">BindingAdapter</span> <span class="n">bindingAdapter</span> <span class="o">=</span> <span class="n">bindingAdapterHolder</span><span class="o">.</span><span class="na">getService</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">bindingAdapter</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">bindingAdapters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">bindingAdapter</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">bindingAdapters</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样，我们就可以从其他的地方拿到对应的类的实例，然后放到一个 List 中，通过 Guice 注入给其他的类了。</p>

<p>上面的这两种方式其实各有优劣。一般情况下，我觉得选择第一种就可以了，毕竟，第一种方法的类的实例是由 Guice 来生成的。选择第二种方式的场景我觉得可能有：</p>

<ul>
  <li>类的实例是从其他的地方来的，比如上面的例子中，是从 OSGi 来的。</li>
  <li>简单类型的类，比如一个 String 的 List。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用 JUnit 的 Rule 对 Log4j 的输出进行测试]]></title>
    <link href="http://khotyn.github.com/blog/2014/08/14/use-junit-rule-to-assert-log4j-output/"/>
    <updated>2014-08-14T22:07:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/08/14/use-junit-rule-to-assert-log4j-output</id>
    <content type="html"><![CDATA[<p>最近在写框架的测试代码的时候，有需求要对 Log4j 的输出进行测试（<strong>依赖 Log4j 的输出来进行测试，这一点本身可能得深思一下</strong>），之前也有对 stdout 和 stderr 进行测试，用了一个叫做 <code>system-rule</code> 的包：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;dependency&gt;</span>
</span><span class="line">    <span class="nt">&lt;groupId&gt;</span>com.github.stefanbirkner<span class="nt">&lt;/groupId&gt;</span>
</span><span class="line">    <span class="nt">&lt;artifactId&gt;</span>system-rules<span class="nt">&lt;/artifactId&gt;</span>
</span><span class="line">    <span class="nt">&lt;version&gt;</span>1.5.0<span class="nt">&lt;/version&gt;</span>
</span><span class="line"><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>利用这个包中类，只需要在测试用例中加上一个 JUnit Rule，就可以获取到 stdout 和 stderr 中的内容，然后对其进行测试。现在我也想对 Log4j 的输出采用类似的方式进行测试，于是扩展了 JUnit 的 Rule，就有了以下这一段代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * 此 Rule 用于对 Log4j 进行测试</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * @author khotyn 8/14/14 9:18 PM</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Log4jRule</span> <span class="kd">extends</span> <span class="n">ExternalResource</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">String</span>       <span class="n">logName</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">loggerMessages</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">Log4jRule</span><span class="o">(</span><span class="n">String</span> <span class="n">loggerName</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">logName</span> <span class="o">=</span> <span class="n">loggerName</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">Log4jRule</span><span class="o">(</span><span class="n">Class</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">logName</span> <span class="o">=</span> <span class="n">className</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getLoggerMessages</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">loggerMessages</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getLogMessageAsString</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">loggerMessage</span> <span class="o">:</span> <span class="n">loggerMessages</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">result</span> <span class="o">+=</span> <span class="n">loggerMessage</span><span class="o">;</span>
</span><span class="line">            <span class="n">result</span> <span class="o">+=</span> <span class="s">&quot;\n&quot;</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LogManager</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">logName</span><span class="o">);</span>
</span><span class="line">        <span class="n">logger</span><span class="o">.</span><span class="na">addAppender</span><span class="o">(</span><span class="k">new</span> <span class="n">AppenderSkeleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">append</span><span class="o">(</span><span class="n">LoggingEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">loggerMessages</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getMessage</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">requiresLayout</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">});</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>整段代码非常简单，继承了 JUnit 的 <code>ExternalResource</code> 类，然后在 <code>before</code> 方法中，给对应的 Logger 加上了一个 Appender，在 Appender 中，将日志内容收集到一个 List 中，然后拿到这个 List 就可以拿到日志的输出了。</p>

<p>使用的时候非常简单：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleTest</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@Rule</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Log4jRule</span> <span class="n">log4jRule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Log4jRule</span><span class="o">(</span><span class="n">SampleTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Test</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">      	<span class="c1">// .........</span>
</span><span class="line">        <span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">log4jRule</span><span class="o">.</span><span class="na">getLogMessageAsString</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span>
</span><span class="line">            <span class="s">&quot;Hello, world&quot;</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通过 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">log4jRule</span><span class="o">.</span><span class="na">getLogMessageAsString</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以拿到一个 String 格式的日志输出，或者通过：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">log4jRule</span><span class="o">.</span><span class="na">getLoggerMessages</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>来获得一个日志输出的内容的 List，List 中的没一行就是日志中的一行</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些关于单元测试的思考]]></title>
    <link href="http://khotyn.github.com/blog/2014/03/31/unittest/"/>
    <updated>2014-03-31T09:06:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/03/31/unittest</id>
    <content type="html"><![CDATA[<p>最近在开发公司的集成测试框架，有一些关于单元测试的体会，写一个博客记录一下想法。</p>

<h4 id="section">为什么要写单元测试？</h4>

<p>这个问题，已经有无数的关于技术的书、文章去阐述了，不断地强调单元测试的重要性。比如单元测试可以让你在软件开发的早期阶段发现 Bug，而不必到集成测试的时候才发现等等。不过，对于我来说，在切实地戳到我的痛点之前，我一直都没有去重视这些关于单元测试的忠告（虽然在心中记着，但是实际上并不是很在意）。</p>

<p>在写公司的集成测试框架的时候，有那么好几次，在调整了现有的功能，或者修复了某个 Bug 之后，<strong>因为懒惰，也因为跑一次完整的单元测试所需要的耗时较长</strong>，我侥幸地认为这些修改应该没有问题，直接打包交付。结果是，墨菲定律出现了，果然，没有经过测试的修改引发了新的 Bug，我不得不重新修改代码，然后厚着脸皮让用户重新试一次。</p>

<p>人总是不靠谱的，我们懒惰，我们存在侥幸心理，坏事儿总是在我们最不希望发生的时候发生。写单元测试不能防止我们懒惰，防止我们存在侥幸心理。但是一次成本低廉的单元测试会让我们觉得：“反正运行一次但单元测试不会耗费很多时间，不如跑一次吧”，它在一定程度上降低我们犯错的几率。</p>

<p>单元测试对于重构的意义也非常重大。很多有意思的程序员都有洁癖，会想着去修改某一段「恶心」的代码。我有过这样几次经历，在把一段「恶心」的代码修改地赏心悦目后，最后上线后发现引入了一个 Bug，心里暗骂一句 WTF，然后一脸黑线地把 Bug 修改了，想想如果当时有单元测试，那么会给我多大的勇气，让我可以肆无忌惮地去重构代码，这是多么爽的一件事情。</p>

<h4 id="section-1">好的单元测试应该是怎样的？</h4>

<p>一个好的单元测试，我觉得最重要的一点就是运行成本得低，也就是说一个单元测试越快越好。运行一次单元测试的成本越低，你才会越愿意去运行单元测试。如果运行一次单元测试得 10 分钟 20 分钟，那么我想很多人的侥幸心理又会出来了。</p>

<h4 id="section-2">我是怎样写单元测试的？</h4>

<p>我一般是这样写单元测试的，先想清楚模块的边界，有哪几种可能的输入，这些输入对应的可能输出是什么，然后以最快的速度堆积代码把功能先实现出来，接着写单元测试，把测试用例全部跑过。接下来马上着手重构之前写的代码，不断重构，不断地跑单元测试，知道重构后的代码让自己满意为止。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关闭 Tomcat 的 TLD 扫描的功能]]></title>
    <link href="http://khotyn.github.com/blog/2014/01/21/turnoff-tomcat-tld-scan/"/>
    <updated>2014-01-21T19:12:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/01/21/turnoff-tomcat-tld-scan</id>
    <content type="html"><![CDATA[<h3 id="section">背景</h3>

<p>Tomcat 作为 Servlet 规范的实现者，它在应用启动的时候会扫描 Jar 包里面的 .tld 文件，加载里面定义的标签库，但是，我们在开发的时候很多都不是采用 JSP 作为 Web 页面的模板的，很多都是使用  Velocity 之类的模板引擎，自然而然，为了加快应用的启动速度，我们可以把 Tomcat 里面的这个功能给关掉。</p>

<h3 id="section-1">方法</h3>

<p>看 Tomcat 的配置文档，关于 Context 的设置这一块，看到了 <code>processTlds</code> 这个属性可以设置，看下这个属性的说明：</p>

<blockquote>
  <p>Whether the context should process TLDs on startup. The default is true. The false setting is intended for special cases that know in advance TLDs are not part of the webapp.</p>
</blockquote>

<p>只要在 Context 中把这个属性设置成 false，那么我们就可以关闭 Tomcat 的 TLD 扫描功能了，为了让所有的应用都可以关闭这个功能，我们可以将 Tomcat 目录下的 conf/context.xml 修改成如下这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;
</span><span class="line">&lt;Context processTlds="false"&gt;
</span><span class="line">    &lt;WatchedResource&gt;WEB-INF/web.xml&lt;/WatchedResource&gt;
</span><span class="line">&lt;/Context&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-2">坑</h4>

<p>但是，在 Tomcat 6 中测试的时候，发现这个功能没有生效，无奈只能 Debug Tomcat 的源码，发现 StandardContext 的 init 方法下有如下代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if (processTlds) {
</span><span class="line">    this.addLifecycleListener(new TldConfig());
</span><span class="line">}
</span><span class="line">
</span><span class="line">super.init();
</span><span class="line">
</span><span class="line">// Notify our interested LifecycleListeners
</span><span class="line">lifecycle.fireLifecycleEvent(INIT_EVENT, null);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里需要说明的一点是，我们的默认的 context 配置是在 <code>lifecycle.fireLifecycleEvent(INIT_EVENT, null);</code> 这行代码中被处理的，而在这行代码之前，Tomcat 就已经使用了 <code>processTlds</code>，我们的配置完全没有生效。</p>

<h4 id="workaround">Workaround</h4>

<p>那么，这么解决呢？在 context 中，我们还可以配置一个 JarScanner，这个 JarScanner 会被用来扫描 Jar 包中的 tld 文件，我们可以在默认的 context.xml 中配置一个空的 JarScanner，像下面这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;
</span><span class="line">&lt;Context processTlds="false"&gt;
</span><span class="line">    &lt;JarScanner className="com.alipay.sofa.runtime.test.patch.tomcat.NullJarScanner"/&gt;
</span><span class="line">&lt;/Context&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>NullJarScanner 的代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">package com.alipay.sofa.runtime.test.patch.tomcat;
</span><span class="line">
</span><span class="line">import org.apache.tomcat.JarScanner;
</span><span class="line">import org.apache.tomcat.JarScannerCallback;
</span><span class="line">
</span><span class="line">import javax.servlet.ServletContext;
</span><span class="line">import java.util.Set;
</span><span class="line">
</span><span class="line">/**
</span><span class="line"> * @author khotyn 14-1-21 下午4:37
</span><span class="line"> */
</span><span class="line">public class NullJarScanner implements JarScanner {
</span><span class="line">    @Override
</span><span class="line">    public void scan(ServletContext context, ClassLoader classloader, JarScannerCallback callback, Set&lt;String&gt; jarsToSkip) {
</span><span class="line">        // Do nothing at all.
</span><span class="line">    }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>需要注意的是，Tomcat 7 不会出现上述的问题，你只要在配置中把 processTlds 设置成 false 即可。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 之 default method]]></title>
    <link href="http://khotyn.github.com/blog/2014/01/19/java-8-default-method/"/>
    <updated>2014-01-19T22:13:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/01/19/java-8-default-method</id>
    <content type="html"><![CDATA[<p>如果进度正常，新版本的 Java，Java 8 将在三月份发布，Java 开发人员期待已久的 lambda 也将在 Java 8 中得到支持。目前，Java 8 的早期版本已经可以在 Java 的网站上下载到了，Intellij IDEA 也已经在其最新的版本支持了 Java 8。所以，最近花了点时间了解了一下 Java 8 中新增加的一些特性。</p>

<p>由于 lambda 的引入，Java 8 对原来的集合类做了大幅的更新，让集合操作可以支持 lambda 表达式。在看新的的集合类的代码的时候，发现了 java 8 似乎增加了一个新的方法描述符，比如在 <code>java.lang.Iterable</code> 里面就新加入了下面这个方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">default</span> <span class="kt">void</span> <span class="nf">forEach</span><span class="o">(</span><span class="n">Consumer</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">action</span><span class="o">);</span>
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="n">T</span> <span class="n">t</span> <span class="o">:</span> <span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">action</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在方法的最前面，是一个 <code>default</code> 描述符。等等，Iterable 不是个接口吗，怎么有具体的实现代码了？</p>

<p>这个 default 就是在 java 8 中新引入的，它可以让你的接口有一个默认的实现，接口的实现类可以不用去实现 default method，比如，下面这段代码，是可以正常编译通过的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">Impl</span> <span class="kd">implements</span> <span class="n">A</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class="line">    <span class="k">default</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;A&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>引入 default 的带来的一个好处就是在现有的接口上增加方法而不用让其实现修改代码，通过这种机制，Java 8 可以通过平滑的方式在原有的 Java 的 API 上引入 lambda 的支持。</p>

<p>那么，如果一个类实现了两个接口，这两个接口里面有方法签名相同的 default method，那运行的时候到底会选择哪一个？答案是编译不通过，如果出现这种情况，实现类必须实现 default method，以消除歧义，比如下面这样。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">MultiImpl</span> <span class="kd">implements</span> <span class="n">A</span><span class="o">,</span> <span class="n">B</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 由于 A，B 中都有 String foo() 接口，不知道要调用哪个，所以实现类必须实现一下</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * @return</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;C&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class="line">    <span class="k">default</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;A&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">interface</span> <span class="nc">B</span> <span class="o">{</span>
</span><span class="line">    <span class="k">default</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;B&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当然，在的实现类中，也可以直接调用某个接口的 default method：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">MultiImplInvokeSuper</span> <span class="kd">implements</span> <span class="n">A</span><span class="o">,</span> <span class="n">B</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">B</span><span class="o">.</span><span class="na">super</span><span class="o">.</span><span class="na">foo</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[转让自用 13 寸 MacBook Pro]]></title>
    <link href="http://khotyn.github.com/blog/2014/01/01/sell-mac-book-pro/"/>
    <updated>2014-01-01T11:02:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/01/01/sell-mac-book-pro</id>
    <content type="html"><![CDATA[<p><strong>已经出售，谢谢</strong></p>

<p>转让自用的 13 寸 MacBook Pro，2009 年年中的款，型号 MB990，入手时间 2010 年初，使用时间三年不到，除了电池的续航能力有所下降，其他没有出现任何问题，内存我自己升级到了 8 G，平时的开发也都是用这台开发（你知道开个 Eclipse 或者 Intellij IDEA 是很耗资源的），也比较顺畅，<strong>价格方面是 2500</strong>，当然可刀~，暂时只接受杭州的当面交易。</p>

<p>有意向的可以直接在这篇博客下面回复，或者给我发邮件联系我，hting1#gmail.com</p>

<p>关于这个型号的 MBP 的其他参数，可以直接看下面这张图：</p>

<p><img src="https://pic.yupoo.com/khotyn/DqBJdz79/medish.jpg" alt="image" /></p>

<p>上几张本本的照片：</p>

<p>合上后，有些许划痕</p>

<p><img src="https://pic.yupoo.com/khotyn/DqBPAi4B/medish.jpg" alt="image" /></p>

<p><img src="https://pic.yupoo.com/khotyn/DqBQFoio/medish.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Guava 之 EventBus]]></title>
    <link href="http://khotyn.github.com/blog/2013/12/07/google-guava-eventbus/"/>
    <updated>2013-12-07T19:49:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/12/07/google-guava-eventbus</id>
    <content type="html"><![CDATA[<p>Google 的 Guava 库是一个 Java 程序员必须了解的库，它提供了一些非常强大的功能，比如函数式风格的集合操作，Cache Builder 等等的功能，另外 Google Guava 还提供了一个非常方便的观察者模式的实现：EventBus。这篇文章就来介绍一下 EventBus 的使用。</p>

<h3 id="eventbus-">EventBus 对象</h3>

<p>在举例说明 EventBus 的使用方式之前，我们先来看一下 EventBus 对象，EventBus 对象整个负责了观察者模式监听者的注册，事件的分发，所以，在使用 EventBus 的时候，你就省去了非常多的工作，你只要去使用 EventBus 就可以了，不用再去自己实现一个 Publisher 的类，使用 EventBus 的第一步就是你需要一个 EventBus 的实例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">EventBus</span> <span class="n">eventBus</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EventBus</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section">注册监听者</h3>

<p>使用 EventBus 监听事件，只需要在你的处理事件的方法上添加一个 <code>@Subscribe</code> 注解就可以：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kd">class</span> <span class="nc">Subscriber</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@Subscribe</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">subscribe</span><span class="o">(</span><span class="n">Event</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getWord</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里的事件对象 <code>Event</code> 可以是任何的对象，可以是 <code>Object</code>，但是也可以是任何你自定义的消息对象。</p>

<p>建立一个类以后，就可以往 EventBus 中注册 Subscriber：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">eventBus</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="k">new</span> <span class="n">Subscriber</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">分发事件</h3>

<p>在注册完事件后，就可以去分发事件了，分发的代码非常简单：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">eventBus</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Event</span><span class="o">(</span><span class="s">&quot;Hello world&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样，所有的注册在 EventBus 中的监听者，只要它的监听方法的参数是 <code>Event</code> 或者 <code>Event</code> 的超类，那么都会收到事件。</p>

<h3 id="section-2">结论</h3>

<p>EventBus 作为一个 In-JVM 的观察者模式的实现，非常使用，使用起来非常简单，可以减少不少的工作，建议在项目中可以多多使用。</p>
]]></content>
  </entry>
  
</feed>
