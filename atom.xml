<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小径分岔的花园]]></title>
  <link href="http://khotyn.github.com/atom.xml" rel="self"/>
  <link href="http://khotyn.github.com/"/>
  <updated>2018-02-18T15:57:36+08:00</updated>
  <id>http://khotyn.github.com/</id>
  <author>
    <name><![CDATA[khotyn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「法国妈妈育儿经」阅读笔记]]></title>
    <link href="http://khotyn.github.com/blog/2018/02/18/bring-up-baby/"/>
    <updated>2018-02-18T15:54:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2018/02/18/bring-up-baby</id>
    <content type="html"><![CDATA[<p>浅浅出生快半个月了，这半个月的时间基本上没有睡好觉，刚好在豆瓣上看到一个友邻分享了看完这本书的一些看法，挺有意思的，于是花了几个小时的时间看了一下。</p>

<p>本书将的是一位美国妈妈移居法国后，在法国的各种育儿的经历。主要的内容是在法国，爸爸妈妈们是如何培养孩子的，其中不乏拿美国来进行对比（感觉和中国比较类似），法国的育儿理念受到<a href="https://zh.wikipedia.org/wiki/让-雅克·卢梭">卢梭</a>和<a href="https://en.wikipedia.org/wiki/Françoise_Dolto">多尔托</a>的影响，主张孩子是一个独立的个体，即使在非常小的时候，孩子也有自己的认知，有自己的思想的，对待孩子应该是把他作为一个小大人来看待。</p>

<p>作为大人，应该善于倾听孩子们的想法，并且向他们解释这个世界，对他们的信任和尊重会赢得他们对自己的信任和尊重。在培养孩子的时候，应该给他们设定一定的界限，什么时候可以干，什么事情不能干，而在界限之类，孩子可以自由地做任何事情，以睡觉来举例子，可以要求孩子在 9 点钟就进自己的房间，但是具体她在里面做什么样的事情，我们可以不管，这样，孩子在里面玩耍，一会儿累了，就会自己上床睡觉。这样的好处是可以保证孩子的教养，安全，有素质的情况下，最大程度地让孩子的天性可以得到自由的发挥。</p>

<p>当然，除此之外，作为家长，千万不能以孩子为中心，家长应该有自己的空间和时间，也是独立的个体，不能一天到晚地追着小孩子跑，孩子是生活中非常重要的一个部分，但是生活中应该还有其他也非常重要的部分：工作，旅游，夫妻之间的约会等等。不能认为有了孩子，那么家长所有的时间就都是孩子的了。孩子长大了还是会独立，会离开，而你的配偶才是与你度过下半辈子的人。这方面，我们已经见到我们的长辈身上的一些悲剧，我不止听到一个人提起过，他的母亲有说过：「要不是为了你，我早就自杀了」这样的话，这样把孩子作为绝对重心的家庭往往会导致家庭的悲剧，我们这一代人，不能重蹈覆辙。</p>

<p>书中除了写了一些发过的育儿理念之外，也有一些比较实用的操作，比如如何让宝宝养成在几个月内就能够整晚睡觉的习惯，关键就是在孩子半夜哭起来的时候，先等一下仔细观察一下，看下孩子到底是不是真的需要换尿不湿了，或者真的是饿了，可以让她先哭上个几分钟，小孩子的睡眠周期大概是两个小时左右，哭一会，她会尝试控制自己，然后直接进入了下个睡眠周期了。作为家长，在这方面不能太急，需要有点耐心，有点狠（作为一个父亲，我发现女儿哭起来的时候，我就有一种冲过去抱抱她的冲动），控制一下抱她的冲动。这个技巧，我们也在尝试中，期望在浅浅几个月大的时候可以整晚地自己睡眠。</p>

<p>另外一些有用的操作就是如何养成孩子在吃东西上的一些习惯。一个是养成孩子定时吃饭的习惯，方法是让孩子能够等一等，不能孩子想吃的时候就想吃，慢慢习惯之后，孩子会在吃饭的时间尽量吃饱，然后即使饿了，也会自己耐心等一等。另一个是如何给孩子尝试各种食物，就是如果孩子不吃某种食物，可以几天之后再尝试给他吃同一种食物（可以用不同的烹饪方式），经过几次之后，孩子就会吃的。</p>

<p>当然，本书也有不少瑕疵，一个观点抛出来，和这个观点无关的废话有点多。有几个章节，作者主要就是在讲自己的经历（比如，双胞胎出生的那一章节），而没有谈育儿的内容，比较水。总的来讲，书中的一些方法和观点对于新爸爸妈妈们还是有一定的参考意义的，建议有兴趣的可以阅读一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intellij IDEA 插件开发 --- 一次 JVM Crash 问题的解决]]></title>
    <link href="http://khotyn.github.com/blog/2016/09/29/intellij-idea-plugin-jvm-crash/"/>
    <updated>2016-09-29T09:07:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2016/09/29/intellij-idea-plugin-jvm-crash</id>
    <content type="html"><![CDATA[<p>虽然今天遇到的不是一个有什么技术含量的问题，但是国内做这块的人太少了，觉得还是需要多分享分享，至少可以帮助新人走一些弯路，^_^</p>

<p>前几天手贱升级了 macOS Sierra，本来看到 Intellij IDEA 在 macOS Sierra 下面只有一个触摸板异常灵活的问题，觉得自己触摸板用地比较少就直接升级了，哪知道升级以后，在开发我们自己的 Intellij IDEA 插件的时候，启动的 IDEA 一会儿就出现了 Crash 的问题（Crash 的是通过 Intellij IDEA 启动起来的用来测试插件的 Intellij IDEA）。具体的 Crash 截图如下：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/134563-0a04b1b5cc9bb723.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="intellij_idea_crash.png" /></p>

<p>本来想是不是要直接回到 OS X Yosemite，但是不甘心啊，觉得既然都已经升级了，那遇到问题就解决吧，幸好在 Jetbrains 官方的问题跟踪平台上看到了有了提了类似的问题：<a href="https://youtrack.jetbrains.com/oauth?state=%2Fissue%2FJRE-3">https://youtrack.jetbrains.com/oauth?state=%2Fissue%2FJRE-3</a></p>

<p>看这个帖子的意思是这个问题是 OpenJDK 的 Bug，于是顺藤摸瓜找到了 Jetbrains 在自己维护的 JDK 上对这个问题 Fix 的 Commit：</p>

<p><a href="https://github.com/JetBrains/jdk8u_jdk/commit/02f9a5fbb4924ff67c8a04c15e490acfcc750003">https://github.com/JetBrains/jdk8u_jdk/commit/02f9a5fbb4924ff67c8a04c15e490acfcc750003</a></p>

<p>如果把运行插件 SDK 的 JDK 换成 Jetbrains 自己的 JDK，应该就可以解决问题。当然，要使用 Jetbrains 自家的 JDK，不用拿着源代码自己 Build，可以直接从这里下载对应的 Build：<a href="https://bintray.com/jetbrains/intellij-jdk">https://bintray.com/jetbrains/intellij-jdk</a></p>

<p>下载过来以后在插件工程的「Project Structure」配置界面进行如下配置即可：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/134563-eb53c97aca4ff78a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>

<ol>
  <li>将下载过来的 JDK 增加到 SDK 里面。</li>
  <li>找到当前正在用来运行插件的插件 SDK，将其以依赖的 JDK 修改成刚刚增加的 JDK。</li>
</ol>

<p>至此问题就已经解决，在这里建议大家如果要开发 Intellij IDEA 的插件的话，还是用 Jetbrains 自家的 JDK 比较好，毕竟 Jetbrains 已经在 OpenJDK 的基础上 Fix 了不少的问题，特别是很多和 Swing 相关的问题，使用他们的 JDK 可以帮助我们少走不少弯路。</p>

<hr />

<p>PS：如果有人对开发工具、插件感兴趣，欢迎留言联系我，蚂蚁金服需要最优秀的工程师来做研发工具，提升工程师的效率。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 对 NoClassDefFoundError 的“缓存”]]></title>
    <link href="http://khotyn.github.com/blog/2015/02/15/jvm-noclassdeffounterror-cache/"/>
    <updated>2015-02-15T20:44:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2015/02/15/jvm-noclassdeffounterror-cache</id>
    <content type="html"><![CDATA[<h2 id="section">问题</h2>

<p>今天在排查一个线上的问题，线上的一个应用在初始化一个类的静态字段的时候出现了 <code>NoClassDefFoundError</code>，并且在导致 <code>NoClassDefFoundError</code> 出现的根本原因消失后，后续再次尝试初始化这个类的时候，持续出现了 <code>NoClassDefFoundError</code>。</p>

<p>于是怀疑 JVM 是不是对一个类的 <code>NoClassDefFoundError</code> 做了缓存，在第一次加载这个类出现 <code>NoClassDefFoundError</code> 以后，后续再尝试加载就直接抛出 <code>NoClassDefFoundError</code>。</p>

<h2 id="section-1">实验</h2>

<p>为了证实自己的猜想，尝试设计了一个简单的实验，一个涉及三个类</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test1</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">static</span> <span class="n">Test2</span> <span class="n">test2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Test2</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;================================&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                <span class="k">new</span> <span class="nf">Test1</span><span class="o">();</span> <span class="c1">// 尝试实例化 Test1，触发 NoClassDefFoundError</span>
</span><span class="line">            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">                <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">Test</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">().</span><span class="na">loadClass</span><span class="o">(</span><span class="s">&quot;Test2&quot;</span><span class="o">);</span> <span class="c1">// 尝试加载 Test2，用于证实当将 </span>
</span><span class="line">                                                                    <span class="c1">// Test2.class 拷贝到 ClassPath 下的时候，</span>
</span><span class="line">                                                                    <span class="c1">// Test2 就可以加载到了。</span>
</span><span class="line">                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上述类的的作用是：Test2 是一个空的类，Test1 里面有一个 Test2 的静态成员。Test 是程序的主入口，在一个无限循环内部，不断地尝试去实例化 Test1，并且在加载 Test1 出现异常的时候，尝试加载一下 Test2。</p>

<p>实验的步骤是：</p>

<ol>
  <li>编译以上类，运行 <code>javac Test.java</code></li>
  <li>将生成出的 Test2.class 重命名成 Test2.class.bak</li>
  <li>运行 <code>java Test</code>，这个时候程序去加载 Test1 的时候，就会出现 <code>NoClassDefFoundError</code>，并且在尝试加载 Test2 的时候，会出现 <code>ClassNotFoundException</code>。</li>
  <li>将第二步重命名的 Test2.class.bak 该回成 Test2.class，这个时候程序去加载 Test1 的时候，就会出现 <code>NoClassDefFoundError</code>，在加载 Test2 的时候，不会出现 <code>ClassNotFoundException</code>。</li>
</ol>

<p>实验的第二步的目的是为了程序在加载 Test1 的时候因为找不到 Test2 出现 <code>NoClassDefFoundError</code>，第四步是为了和第二步做对照，说明在后续程序可以加载到 Test2 的时候，在实例化 Test1 的时候，依旧出现 <code>NoClassDefFoundError</code></p>

<p>在我的机器上，按照上面的方式去操作，结果如下：</p>

<p><img src="http://khotyn.github.com/images/cnf.png" alt="NoClassDefFoundError" /></p>

<p>结果正如预期，即使在后面 Test2 在 ClassPath 下的时候，<code>NoClassDefFoundError</code> 依旧出现，所以 JVM 里面肯定有地方对 <code>NoClassDefFoundError</code> 做了缓存。</p>

<h2 id="jvm-">JVM 里面的实现</h2>

<p>带着这个疑问，请教了部门里面的 JVM 专家，这个猜测得到了证实，并且他给出了 JVM 内部具体处理这段逻辑的代码，处理的代码在 JDK 的 <code>instanceKlass.cpp</code> 这个文件里面：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">bool</span> <span class="nl">instanceKlass:</span><span class="o">:</span><span class="n">link_class_impl</span><span class="o">(</span>
</span><span class="line">     <span class="n">instanceKlassHandle</span> <span class="n">this_oop</span><span class="o">,</span> <span class="n">bool</span> <span class="n">throw_verifyerror</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">   <span class="c1">// check for error state</span>
</span><span class="line">   <span class="k">if</span> <span class="o">(</span><span class="n">this_oop</span><span class="o">-&gt;</span><span class="n">is_in_error_state</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">     <span class="n">ResourceMark</span> <span class="nf">rm</span><span class="o">(</span><span class="n">THREAD</span><span class="o">);</span>
</span><span class="line">     <span class="n">THROW_MSG_</span><span class="o">(</span><span class="nl">vmSymbols:</span><span class="o">:</span><span class="n">java_lang_NoClassDefFoundError</span><span class="o">(),</span>
</span><span class="line">                <span class="n">this_oop</span><span class="o">-&gt;</span><span class="n">external_name</span><span class="o">(),</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line">   <span class="c1">// return if already verified</span>
</span><span class="line">   <span class="k">if</span> <span class="o">(</span><span class="n">this_oop</span><span class="o">-&gt;</span><span class="n">is_linked</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">     <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>并且在 <code>instanceClass.hpp</code> 这个文件中，定义了类的 <code>_init_state</code>，其中，<code>is_in_error_state</code> 这个方法的定义如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="kt">bool</span> <span class="n">is_in_error_state</span><span class="p">()</span> <span class="k">const</span>           <span class="p">{</span> <span class="k">return</span> <span class="n">_init_state</span> <span class="o">==</span> <span class="n">initialization_error</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[该死的 ^M]]></title>
    <link href="http://khotyn.github.com/blog/2014/11/15/damn-the-carriage-return-character/"/>
    <updated>2014-11-15T08:33:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/11/15/damn-the-carriage-return-character</id>
    <content type="html"><![CDATA[<p><code>^M</code>，神奇的字符！相信很多人写 Shell 脚本的时候都被这个字符坑过，我自己也至少被坑过两次。最近周围的好几个小伙伴又被 <code>^M</code> 坑，花了好几个小时检查脚本的错误，结果发现是 <code>^M</code> 导致的。所以写了这篇文章讲一下什么是 <code>^M</code>，当 <code>^M</code> 出现的时候一般会伴随着什么样的现象，出现了我们可以用什么手段去解决。</p>

<h3 id="m-"><code>^M</code> 是何方神圣</h3>

<p>这个得先从 Windows 和 Unix 下的换行符开始说起，在我的 Intellij IDEA 的右下方的状态栏上，有一块是展示当前文件的换行符的：</p>

<p><img src="http://pic.yupoo.com/khotyn/EcY8fTut/ksIoo.png" alt="Windows 和 Unix 下的文件换行符" /></p>

<p>可以看到在 Windows 下，换行符是 <code>\r\n</code>，在 Unix 下换行符是 <code>\n</code>。如果我们用把一个文件的换行符换成 Windows 的换行符，那么当我们用 <code>cat -v</code> 来看的时候，就可以看到：</p>

<p><img src="http://pic.yupoo.com/khotyn/EcYbafeN/medish.jpg" alt="cat -v 查看文件是否含有 ^M" /> </p>

<p>实际上 <code>^M</code> 就是 Windows 下的换行符中的 <code>\r</code> 部分。因为 Unix 下的换行符是 <code>\n</code>，所以当一个用 Windows 下的换行符的文件放在 Unix 下的时候，单行的最后一个字符就变成了 <code>\r</code>，<code>\r</code> 在 ASCII 码中是 <code>0xD</code>，而 <code>0xD</code> 在 VIM 和 <code>cat -v</code> 则刚好被显示为 <code>^M</code>。</p>

<blockquote>
  <p>刚才之所以用 <code>cat -v</code> 而不用普通的 <code>cat</code> 是因为 <code>^M</code> 是不可见的字符，如果仅仅用 <code>cat</code>，是看不到这个字符的。<code>cat</code> 的 <code>-v</code> 参数的作用就是显示不可打印的字符。</p>
</blockquote>

<h3 id="m--1"><code>^M</code> 会导致什么样的问题？</h3>

<p>我们已经知道了 <code>^M</code> 实际上就是 <code>\r</code>，而 <code>\r</code> 是回车符（Carriage Return），<strong>回车符的作用是将设备的位置重置到当前行的开头</strong>。</p>

<p>知道了 <code>\r</code> 的作用时候，我们来看一个现象：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">### 有一个普通文件，存放了一个路径，当前行的最后以 ^M 结尾
</span><span class="line">$ cat -v Main
</span><span class="line">/home/admin/khotyn.huangt/test/^M
</span><span class="line">
</span><span class="line">### Echo 一下，神奇了！
</span><span class="line">$ echo "`cat Main`/where am i"
</span><span class="line">/where am i/khotyn.huangt/test/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看到后面那个 echo 命令，它将 Main 文件中的内容提取出来，再在后面加上 <code>/where am i</code> 这个字符串，结果我们看到，<code>/where am i</code> 在打印的结果中跑到最前面去了，这正是 <code>\r</code> 这个字符的作用，因为 <code>cat Main</code> 的执行的结果的最后一个字符是 <code>\r</code>，所以一遇到这个字符，设备指针就直接回到了当前行的开头，所以 <code>\r</code> 后面的 <code>/where am i</code> 就直接显示在了最前面。</p>

<p><strong>所以，当你看到什么奇怪的路径，这个路径中莫名其妙地少了一些字符，出现了一些莫名其妙的字符串的，很可能就是 <code>^M</code> 导致的。</strong></p>

<h3 id="m--2">如何逃离 <code>^M</code> 的魔掌</h3>

<p>当你发现了 <code>^M</code> 导致的问题的时候，最直截了当的方式就是将 <code>^M</code> 从文件中去掉。</p>

<h4 id="section">一、临时解决的几个方法</h4>

<p>如果的机器上安装有 dos2unix，那么恭喜你，直接运行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">dos2unix /path/to/file</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就可以将一个文件的换行符从 Windows 的转换成 Unix 的。</p>

<p>但是，如果机器上没有装 dos2unix，而你又没法装上去（在一家公司工作总是会有各种各样的让你感觉很丧气的权限控制），那么你可以用 sed 来替换：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sed --in-place='' 's/^M//g' /path/to/file</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>注意：上面的 <code>^M</code> 只是显示的效果，输入的时候需要用组合键输入，先 <code>Ctrl + V</code>，然后马上 <code>Ctrl + M</code> 就可以在终端中输入 <code>^M</code> 了。</p>
</blockquote>

<p>当然，用 <code>tr</code> 之类的命令也可以，不过我一般用 <code>sed</code> 的原因是 <code>sed</code> 加上 <code>--in-place</code> 参数可以做到直接替换原文件，而不用产生临时的文件（危险而高效的操作）。</p>

<h4 id="section-1">二、预防此问题</h4>

<p>不过，前面说的只是当出现问题的时候如何解决，那么如何预防这个问题呢？</p>

<p>第一个方法当然是直接放大招，换个 Mac 啥的，或者把你的机器上的 Windows 格了，装个 Ubuntu 也好啊。真心觉得 Windows 对于程序员来说真的没有啥好处（我好想听说连微软都开源 .Net 了，并且会提供多平台的支持）。</p>

<p>第二个方法嘛，当在 Windows 下使用各种编辑器的时候，尽量将换行符设置成 Unix 的换行符。不要偷懒用 Windows 的换行符，出现了问题就是好几个小时的排查时间。（目前没有发现有什么场景下有必须用到 Windows 下的换行符的，如果有同学知道有这样的场景的话，不吝赐教）。</p>

<h4 id="section-2">三、防止被别人坑</h4>

<p>虽然我个人觉得不应该用 Windows，不过还是有同学的确是喜欢用，或者因为不可抗拒的因素而暂时在使用，为了防止出现这个问题，可以在版本管理软件上做控制，比如 <strong>Git</strong> 就可以设置换行符，当你提交文件的时候，可以将你的所有文本的换行符替换成你设定的换行符，详细可以看 <a href="https://help.github.com/articles/dealing-with-line-endings/">https://help.github.com/articles/dealing-with-line-endings/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intellij IDEA 的一些使用技巧]]></title>
    <link href="http://khotyn.github.com/blog/2014/10/19/intellij-idea-feature/"/>
    <updated>2014-10-19T21:41:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/10/19/intellij-idea-feature</id>
    <content type="html"><![CDATA[<p><strong>所有的这些功能都是在 Intellij IDEA 14 中测试的，其他的版本不一定适用</strong></p>

<h3 id="section">打开类的直接定位到某一行</h3>

<p>在 Mac 下，IDEA 默认的打开类的快捷键是 <code>Command+O</code>，不过这个快捷键也有一些技巧。</p>

<p>第一个是可以在打开类的时候直接跳到某一行，比如下面这样：</p>

<p><img src="http://pic.yupoo.com/khotyn/E8WysuL3/Pv6jh.png" alt="" /></p>

<p>打开 String 这个类的同时直接跳转到 String 的第 40 行。</p>

<h3 id="section-1">到某个类的某个方法</h3>

<p>IDEA 的 Open Symbol 功能可以直接定位到某一个类的某一个方法，默认的快捷键是 <code>Option+Command+O</code>，如下：</p>

<p><img src="http://pic.yupoo.com/khotyn/E8WRrUjB/I2Vom.png" alt="" /></p>

<h3 id="sublime-">像 Sublime 那样多行编辑</h3>

<p>以前要做多行编辑，总是现在 Sublime 里面先做好，然后再拷贝回到 IDEA 里面，现在知道了 IDEA 本身就自带这个功能，快捷键是 <code>Option+Shift+鼠标</code>，直接来看一个 gif 动画看来这个功能吧：</p>

<p><img src="http://khotyn.github.com/images/select_multi_line.gif" alt="" /></p>

<h3 id="smart-code-completion">Smart Code Completion</h3>

<p>除了普通的代码补全的功能之外，IDEA 还提供了智能的不全功能，我们看下对比：</p>

<p>下面是基本的补全功能：</p>

<p><img src="http://khotyn.github.com/images/basic_completion.gif" alt="" /></p>

<p>这个是智能的补全功能：</p>

<p><img src="http://khotyn.github.com/images/smart_completion.gif" alt="" /></p>

<p>可以看到智能补全可以直接推断类型，把不符合类型的提示直接全部过滤，让我们可以更加高效地编写代码。</p>

<h3 id="section-2">草稿</h3>

<p>工作的时候我们经常会创建一些临时文件，在 IDEA 14 中，加入了一个非常有用的创建草稿的功能，Mac 下的快捷键是 <code>Command+Shift+N</code>，你可以在一个工程里面随意创建任意数量的草稿。</p>

<p>上面的这些是前几天参加 QCon 的时候听 IDEA 的一个 Session 知道的一些技巧。个人认为这个 Session 比很多其他的 Session 都更加有料</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么我讨厌小米]]></title>
    <link href="http://khotyn.github.com/blog/2014/08/16/why-i-hate-xiaomi/"/>
    <updated>2014-08-16T20:53:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/08/16/why-i-hate-xiaomi</id>
    <content type="html"><![CDATA[<p>「多看阅读」一直是我最喜欢的阅读器，没有之一，在多看阅读上买的书也不少了，绝佳的用户体验，「多看阅读」甩出豆瓣阅读、唐茶等 N 条街。</p>

<p>不过，今天在多看阅读上看书的时候，却弹出了这样的东西：</p>

<p><img src="http://ww2.sinaimg.cn/large/61c0c922jw1ejergg5hj9j20g00qomzt.jpg" alt="多看阅读弹窗" /></p>

<p>多看在读者阅读书籍的中间弹出了这样的东西，并且不止弹出了一次，过个几分钟又弹出一次。我觉得多看这种极度不尊重读者的做法与被小米收购有着莫大的关系，小米一直以来给我的印象就是一个营销的公司，而不是一个认真做产品的公司，多看到了小米手里已经沦落成这份模样了，靠这样的弹窗来增加用户量，我决定在看完目前的这本书以后，就卸载多看阅读，以后看书还是买个 Kindle 省事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guice 集合注入]]></title>
    <link href="http://khotyn.github.com/blog/2014/08/16/guice-collection-inject/"/>
    <updated>2014-08-16T18:47:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/08/16/guice-collection-inject</id>
    <content type="html"><![CDATA[<p>Guice 的初学者在使用 Guice 往一个类中注入一个集合注入的时候，肯定有感觉到非常地不自然（这里的不自然我觉得一定程度上是不符合 Guice 给人的初印象），由于最近在项目中也在使用 Guice，所以在这里对 Guice 的集合注入做一个记录。</p>

<h4 id="guice--guice-multibindings">一、使用 Guice 的扩展 guice-multibindings</h4>

<p>Guice 的文档上关于 Guice 注入的最简单的例子应该就是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">bind</span><span class="o">(</span><span class="n">Interface</span><span class="o">.</span><span class="na">java</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="n">Implementation</span><span class="o">.</span><span class="na">java</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们希望在使用 Guice 做集合注入的时候肯定也是希望使用类似的 API 做注入，不过可惜的是，Guice 的核心里面并没有提供类似的 API 让我们可以使用来注入集合。</p>

<p>所幸的是，Guice 提供了一个扩展的包 <code>guice-multibindings</code> 使用和 Guice 最原始的 API 类似的方式来做注入。</p>

<p>需要使用这个扩展的包，使用 Maven 的话，可以在项目中加入如下的依赖：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">inject</span><span class="o">.</span><span class="na">extensions</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">guice</span><span class="o">-</span><span class="n">multibindings</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="mf">3.0</span><span class="o">&lt;/</span><span class="n">version</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">dependency</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>guice-multibindings</code> 主要使用了两种方式来注入，一种是注入一个 Set：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Multibinder</span><span class="o">&lt;</span><span class="n">CheckHandler</span><span class="o">&gt;</span> <span class="n">checkAdapter</span> <span class="o">=</span> <span class="n">Multibinder</span><span class="o">.</span><span class="na">newSetBinder</span><span class="o">(</span><span class="n">binder</span><span class="o">(),</span> <span class="n">CheckHandler</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line"><span class="n">checkAdapter</span><span class="o">.</span><span class="na">addBinding</span><span class="o">().</span><span class="na">to</span><span class="o">(</span><span class="n">InstalledCheckHandler</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>首先创建一个 <code>checkAdapter</code>，然后往这个 Multibinder 中，我们可以添加任意多的 <code>CheckHandler</code> 的实现。</p>

<p>另一种方式是注入一个 Map：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">MapBinder</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">CheckHandler</span><span class="o">&gt;</span> <span class="n">mapBinder</span> <span class="o">=</span> <span class="n">MapBinder</span><span class="o">.</span><span class="na">newMapBinder</span><span class="o">(</span><span class="n">binder</span><span class="o">(),</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">CheckHandler</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line"><span class="n">mapBinder</span><span class="o">.</span><span class="na">addBinding</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="n">InstalledCheckHandler</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Map 的注入方式和 Set 的注入方式非常类似。不过奇怪的一点是，Guice 并没有提供注入 List 的方法，<strong>这是值得思考的一点</strong>。</p>

<h4 id="provides-">二、使用 <code>@Provides</code> 来注入</h4>

<p>看了第一种方法，我们可以看到，上面的这种方法并不能注入一个 List，不过，我们还是有办法来注入一个 List 的，就是使用一个 <code>@Provides</code> 注解，比如在我们的 Guice Module 的类里面加入一下的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Provides</span>
</span><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">BindingAdapter</span><span class="o">&gt;</span> <span class="nf">provideBindingAdapter</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">List</span><span class="o">&lt;</span><span class="n">BindingAdapter</span><span class="o">&gt;</span> <span class="n">bindingAdapters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">BindingAdapter</span><span class="o">&gt;();</span>
</span><span class="line">    <span class="n">List</span><span class="o">&lt;</span><span class="n">OsgiServiceHolder</span><span class="o">&lt;</span><span class="n">BindingAdapter</span><span class="o">&gt;&gt;</span> <span class="n">bindingAdapterHolders</span> <span class="o">=</span> <span class="n">OsgiFrameworkUtils</span>
</span><span class="line">        <span class="o">.</span><span class="na">getServices</span><span class="o">(</span><span class="n">bundleContext</span><span class="o">,</span> <span class="n">BindingAdapter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="n">OsgiServiceHolder</span><span class="o">&lt;</span><span class="n">BindingAdapter</span><span class="o">&gt;</span> <span class="n">bindingAdapterHolder</span> <span class="o">:</span> <span class="n">bindingAdapterHolders</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">final</span> <span class="n">BindingAdapter</span> <span class="n">bindingAdapter</span> <span class="o">=</span> <span class="n">bindingAdapterHolder</span><span class="o">.</span><span class="na">getService</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">bindingAdapter</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">bindingAdapters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">bindingAdapter</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">bindingAdapters</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样，我们就可以从其他的地方拿到对应的类的实例，然后放到一个 List 中，通过 Guice 注入给其他的类了。</p>

<p>上面的这两种方式其实各有优劣。一般情况下，我觉得选择第一种就可以了，毕竟，第一种方法的类的实例是由 Guice 来生成的。选择第二种方式的场景我觉得可能有：</p>

<ul>
  <li>类的实例是从其他的地方来的，比如上面的例子中，是从 OSGi 来的。</li>
  <li>简单类型的类，比如一个 String 的 List。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用 JUnit 的 Rule 对 Log4j 的输出进行测试]]></title>
    <link href="http://khotyn.github.com/blog/2014/08/14/use-junit-rule-to-assert-log4j-output/"/>
    <updated>2014-08-14T22:07:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/08/14/use-junit-rule-to-assert-log4j-output</id>
    <content type="html"><![CDATA[<p>最近在写框架的测试代码的时候，有需求要对 Log4j 的输出进行测试（<strong>依赖 Log4j 的输出来进行测试，这一点本身可能得深思一下</strong>），之前也有对 stdout 和 stderr 进行测试，用了一个叫做 <code>system-rule</code> 的包：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;dependency&gt;</span>
</span><span class="line">    <span class="nt">&lt;groupId&gt;</span>com.github.stefanbirkner<span class="nt">&lt;/groupId&gt;</span>
</span><span class="line">    <span class="nt">&lt;artifactId&gt;</span>system-rules<span class="nt">&lt;/artifactId&gt;</span>
</span><span class="line">    <span class="nt">&lt;version&gt;</span>1.5.0<span class="nt">&lt;/version&gt;</span>
</span><span class="line"><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>利用这个包中类，只需要在测试用例中加上一个 JUnit Rule，就可以获取到 stdout 和 stderr 中的内容，然后对其进行测试。现在我也想对 Log4j 的输出采用类似的方式进行测试，于是扩展了 JUnit 的 Rule，就有了以下这一段代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * 此 Rule 用于对 Log4j 进行测试</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * @author khotyn 8/14/14 9:18 PM</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Log4jRule</span> <span class="kd">extends</span> <span class="n">ExternalResource</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">String</span>       <span class="n">logName</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">loggerMessages</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">Log4jRule</span><span class="o">(</span><span class="n">String</span> <span class="n">loggerName</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">logName</span> <span class="o">=</span> <span class="n">loggerName</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">Log4jRule</span><span class="o">(</span><span class="n">Class</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">logName</span> <span class="o">=</span> <span class="n">className</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getLoggerMessages</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">loggerMessages</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getLogMessageAsString</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">loggerMessage</span> <span class="o">:</span> <span class="n">loggerMessages</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">result</span> <span class="o">+=</span> <span class="n">loggerMessage</span><span class="o">;</span>
</span><span class="line">            <span class="n">result</span> <span class="o">+=</span> <span class="s">&quot;\n&quot;</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LogManager</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">logName</span><span class="o">);</span>
</span><span class="line">        <span class="n">logger</span><span class="o">.</span><span class="na">addAppender</span><span class="o">(</span><span class="k">new</span> <span class="n">AppenderSkeleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">append</span><span class="o">(</span><span class="n">LoggingEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">loggerMessages</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getMessage</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">requiresLayout</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">});</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>整段代码非常简单，继承了 JUnit 的 <code>ExternalResource</code> 类，然后在 <code>before</code> 方法中，给对应的 Logger 加上了一个 Appender，在 Appender 中，将日志内容收集到一个 List 中，然后拿到这个 List 就可以拿到日志的输出了。</p>

<p>使用的时候非常简单：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleTest</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@Rule</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Log4jRule</span> <span class="n">log4jRule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Log4jRule</span><span class="o">(</span><span class="n">SampleTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Test</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">      	<span class="c1">// .........</span>
</span><span class="line">        <span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">log4jRule</span><span class="o">.</span><span class="na">getLogMessageAsString</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span>
</span><span class="line">            <span class="s">&quot;Hello, world&quot;</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通过 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">log4jRule</span><span class="o">.</span><span class="na">getLogMessageAsString</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以拿到一个 String 格式的日志输出，或者通过：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">log4jRule</span><span class="o">.</span><span class="na">getLoggerMessages</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>来获得一个日志输出的内容的 List，List 中的没一行就是日志中的一行</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些关于单元测试的思考]]></title>
    <link href="http://khotyn.github.com/blog/2014/03/31/unittest/"/>
    <updated>2014-03-31T09:06:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/03/31/unittest</id>
    <content type="html"><![CDATA[<p>最近在开发公司的集成测试框架，有一些关于单元测试的体会，写一个博客记录一下想法。</p>

<h4 id="section">为什么要写单元测试？</h4>

<p>这个问题，已经有无数的关于技术的书、文章去阐述了，不断地强调单元测试的重要性。比如单元测试可以让你在软件开发的早期阶段发现 Bug，而不必到集成测试的时候才发现等等。不过，对于我来说，在切实地戳到我的痛点之前，我一直都没有去重视这些关于单元测试的忠告（虽然在心中记着，但是实际上并不是很在意）。</p>

<p>在写公司的集成测试框架的时候，有那么好几次，在调整了现有的功能，或者修复了某个 Bug 之后，<strong>因为懒惰，也因为跑一次完整的单元测试所需要的耗时较长</strong>，我侥幸地认为这些修改应该没有问题，直接打包交付。结果是，墨菲定律出现了，果然，没有经过测试的修改引发了新的 Bug，我不得不重新修改代码，然后厚着脸皮让用户重新试一次。</p>

<p>人总是不靠谱的，我们懒惰，我们存在侥幸心理，坏事儿总是在我们最不希望发生的时候发生。写单元测试不能防止我们懒惰，防止我们存在侥幸心理。但是一次成本低廉的单元测试会让我们觉得：“反正运行一次但单元测试不会耗费很多时间，不如跑一次吧”，它在一定程度上降低我们犯错的几率。</p>

<p>单元测试对于重构的意义也非常重大。很多有意思的程序员都有洁癖，会想着去修改某一段「恶心」的代码。我有过这样几次经历，在把一段「恶心」的代码修改地赏心悦目后，最后上线后发现引入了一个 Bug，心里暗骂一句 WTF，然后一脸黑线地把 Bug 修改了，想想如果当时有单元测试，那么会给我多大的勇气，让我可以肆无忌惮地去重构代码，这是多么爽的一件事情。</p>

<h4 id="section-1">好的单元测试应该是怎样的？</h4>

<p>一个好的单元测试，我觉得最重要的一点就是运行成本得低，也就是说一个单元测试越快越好。运行一次单元测试的成本越低，你才会越愿意去运行单元测试。如果运行一次单元测试得 10 分钟 20 分钟，那么我想很多人的侥幸心理又会出来了。</p>

<h4 id="section-2">我是怎样写单元测试的？</h4>

<p>我一般是这样写单元测试的，先想清楚模块的边界，有哪几种可能的输入，这些输入对应的可能输出是什么，然后以最快的速度堆积代码把功能先实现出来，接着写单元测试，把测试用例全部跑过。接下来马上着手重构之前写的代码，不断重构，不断地跑单元测试，知道重构后的代码让自己满意为止。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关闭 Tomcat 的 TLD 扫描的功能]]></title>
    <link href="http://khotyn.github.com/blog/2014/01/21/turnoff-tomcat-tld-scan/"/>
    <updated>2014-01-21T19:12:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/01/21/turnoff-tomcat-tld-scan</id>
    <content type="html"><![CDATA[<h3 id="section">背景</h3>

<p>Tomcat 作为 Servlet 规范的实现者，它在应用启动的时候会扫描 Jar 包里面的 .tld 文件，加载里面定义的标签库，但是，我们在开发的时候很多都不是采用 JSP 作为 Web 页面的模板的，很多都是使用  Velocity 之类的模板引擎，自然而然，为了加快应用的启动速度，我们可以把 Tomcat 里面的这个功能给关掉。</p>

<h3 id="section-1">方法</h3>

<p>看 Tomcat 的配置文档，关于 Context 的设置这一块，看到了 <code>processTlds</code> 这个属性可以设置，看下这个属性的说明：</p>

<blockquote>
  <p>Whether the context should process TLDs on startup. The default is true. The false setting is intended for special cases that know in advance TLDs are not part of the webapp.</p>
</blockquote>

<p>只要在 Context 中把这个属性设置成 false，那么我们就可以关闭 Tomcat 的 TLD 扫描功能了，为了让所有的应用都可以关闭这个功能，我们可以将 Tomcat 目录下的 conf/context.xml 修改成如下这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;
</span><span class="line">&lt;Context processTlds="false"&gt;
</span><span class="line">    &lt;WatchedResource&gt;WEB-INF/web.xml&lt;/WatchedResource&gt;
</span><span class="line">&lt;/Context&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-2">坑</h4>

<p>但是，在 Tomcat 6 中测试的时候，发现这个功能没有生效，无奈只能 Debug Tomcat 的源码，发现 StandardContext 的 init 方法下有如下代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if (processTlds) {
</span><span class="line">    this.addLifecycleListener(new TldConfig());
</span><span class="line">}
</span><span class="line">
</span><span class="line">super.init();
</span><span class="line">
</span><span class="line">// Notify our interested LifecycleListeners
</span><span class="line">lifecycle.fireLifecycleEvent(INIT_EVENT, null);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里需要说明的一点是，我们的默认的 context 配置是在 <code>lifecycle.fireLifecycleEvent(INIT_EVENT, null);</code> 这行代码中被处理的，而在这行代码之前，Tomcat 就已经使用了 <code>processTlds</code>，我们的配置完全没有生效。</p>

<h4 id="workaround">Workaround</h4>

<p>那么，这么解决呢？在 context 中，我们还可以配置一个 JarScanner，这个 JarScanner 会被用来扫描 Jar 包中的 tld 文件，我们可以在默认的 context.xml 中配置一个空的 JarScanner，像下面这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;
</span><span class="line">&lt;Context processTlds="false"&gt;
</span><span class="line">    &lt;JarScanner className="com.alipay.sofa.runtime.test.patch.tomcat.NullJarScanner"/&gt;
</span><span class="line">&lt;/Context&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>NullJarScanner 的代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">package com.alipay.sofa.runtime.test.patch.tomcat;
</span><span class="line">
</span><span class="line">import org.apache.tomcat.JarScanner;
</span><span class="line">import org.apache.tomcat.JarScannerCallback;
</span><span class="line">
</span><span class="line">import javax.servlet.ServletContext;
</span><span class="line">import java.util.Set;
</span><span class="line">
</span><span class="line">/**
</span><span class="line"> * @author khotyn 14-1-21 下午4:37
</span><span class="line"> */
</span><span class="line">public class NullJarScanner implements JarScanner {
</span><span class="line">    @Override
</span><span class="line">    public void scan(ServletContext context, ClassLoader classloader, JarScannerCallback callback, Set&lt;String&gt; jarsToSkip) {
</span><span class="line">        // Do nothing at all.
</span><span class="line">    }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>需要注意的是，Tomcat 7 不会出现上述的问题，你只要在配置中把 processTlds 设置成 false 即可。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 之 default method]]></title>
    <link href="http://khotyn.github.com/blog/2014/01/19/java-8-default-method/"/>
    <updated>2014-01-19T22:13:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/01/19/java-8-default-method</id>
    <content type="html"><![CDATA[<p>如果进度正常，新版本的 Java，Java 8 将在三月份发布，Java 开发人员期待已久的 lambda 也将在 Java 8 中得到支持。目前，Java 8 的早期版本已经可以在 Java 的网站上下载到了，Intellij IDEA 也已经在其最新的版本支持了 Java 8。所以，最近花了点时间了解了一下 Java 8 中新增加的一些特性。</p>

<p>由于 lambda 的引入，Java 8 对原来的集合类做了大幅的更新，让集合操作可以支持 lambda 表达式。在看新的的集合类的代码的时候，发现了 java 8 似乎增加了一个新的方法描述符，比如在 <code>java.lang.Iterable</code> 里面就新加入了下面这个方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">default</span> <span class="kt">void</span> <span class="nf">forEach</span><span class="o">(</span><span class="n">Consumer</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">action</span><span class="o">);</span>
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="n">T</span> <span class="n">t</span> <span class="o">:</span> <span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">action</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在方法的最前面，是一个 <code>default</code> 描述符。等等，Iterable 不是个接口吗，怎么有具体的实现代码了？</p>

<p>这个 default 就是在 java 8 中新引入的，它可以让你的接口有一个默认的实现，接口的实现类可以不用去实现 default method，比如，下面这段代码，是可以正常编译通过的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">Impl</span> <span class="kd">implements</span> <span class="n">A</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class="line">    <span class="k">default</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;A&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>引入 default 的带来的一个好处就是在现有的接口上增加方法而不用让其实现修改代码，通过这种机制，Java 8 可以通过平滑的方式在原有的 Java 的 API 上引入 lambda 的支持。</p>

<p>那么，如果一个类实现了两个接口，这两个接口里面有方法签名相同的 default method，那运行的时候到底会选择哪一个？答案是编译不通过，如果出现这种情况，实现类必须实现 default method，以消除歧义，比如下面这样。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">MultiImpl</span> <span class="kd">implements</span> <span class="n">A</span><span class="o">,</span> <span class="n">B</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 由于 A，B 中都有 String foo() 接口，不知道要调用哪个，所以实现类必须实现一下</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * @return</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;C&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class="line">    <span class="k">default</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;A&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">interface</span> <span class="nc">B</span> <span class="o">{</span>
</span><span class="line">    <span class="k">default</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;B&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当然，在的实现类中，也可以直接调用某个接口的 default method：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">MultiImplInvokeSuper</span> <span class="kd">implements</span> <span class="n">A</span><span class="o">,</span> <span class="n">B</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">B</span><span class="o">.</span><span class="na">super</span><span class="o">.</span><span class="na">foo</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[转让自用 13 寸 MacBook Pro]]></title>
    <link href="http://khotyn.github.com/blog/2014/01/01/sell-mac-book-pro/"/>
    <updated>2014-01-01T11:02:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/01/01/sell-mac-book-pro</id>
    <content type="html"><![CDATA[<p><strong>已经出售，谢谢</strong></p>

<p>转让自用的 13 寸 MacBook Pro，2009 年年中的款，型号 MB990，入手时间 2010 年初，使用时间三年不到，除了电池的续航能力有所下降，其他没有出现任何问题，内存我自己升级到了 8 G，平时的开发也都是用这台开发（你知道开个 Eclipse 或者 Intellij IDEA 是很耗资源的），也比较顺畅，<strong>价格方面是 2500</strong>，当然可刀~，暂时只接受杭州的当面交易。</p>

<p>有意向的可以直接在这篇博客下面回复，或者给我发邮件联系我，hting1#gmail.com</p>

<p>关于这个型号的 MBP 的其他参数，可以直接看下面这张图：</p>

<p><img src="http://pic.yupoo.com/khotyn/DqBJdz79/medish.jpg" alt="image" /></p>

<p>上几张本本的照片：</p>

<p>合上后，有些许划痕</p>

<p><img src="http://pic.yupoo.com/khotyn/DqBPAi4B/medish.jpg" alt="image" /></p>

<p><img src="http://pic.yupoo.com/khotyn/DqBQFoio/medish.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Guava 之 EventBus]]></title>
    <link href="http://khotyn.github.com/blog/2013/12/07/google-guava-eventbus/"/>
    <updated>2013-12-07T19:49:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/12/07/google-guava-eventbus</id>
    <content type="html"><![CDATA[<p>Google 的 Guava 库是一个 Java 程序员必须了解的库，它提供了一些非常强大的功能，比如函数式风格的集合操作，Cache Builder 等等的功能，另外 Google Guava 还提供了一个非常方便的观察者模式的实现：EventBus。这篇文章就来介绍一下 EventBus 的使用。</p>

<h3 id="eventbus-">EventBus 对象</h3>

<p>在举例说明 EventBus 的使用方式之前，我们先来看一下 EventBus 对象，EventBus 对象整个负责了观察者模式监听者的注册，事件的分发，所以，在使用 EventBus 的时候，你就省去了非常多的工作，你只要去使用 EventBus 就可以了，不用再去自己实现一个 Publisher 的类，使用 EventBus 的第一步就是你需要一个 EventBus 的实例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">EventBus</span> <span class="n">eventBus</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EventBus</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section">注册监听者</h3>

<p>使用 EventBus 监听事件，只需要在你的处理事件的方法上添加一个 <code>@Subscribe</code> 注解就可以：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kd">class</span> <span class="nc">Subscriber</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@Subscribe</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">subscribe</span><span class="o">(</span><span class="n">Event</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getWord</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里的事件对象 <code>Event</code> 可以是任何的对象，可以是 <code>Object</code>，但是也可以是任何你自定义的消息对象。</p>

<p>建立一个类以后，就可以往 EventBus 中注册 Subscriber：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">eventBus</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="k">new</span> <span class="n">Subscriber</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">分发事件</h3>

<p>在注册完事件后，就可以去分发事件了，分发的代码非常简单：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">eventBus</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Event</span><span class="o">(</span><span class="s">&quot;Hello world&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样，所有的注册在 EventBus 中的监听者，只要它的监听方法的参数是 <code>Event</code> 或者 <code>Event</code> 的超类，那么都会收到事件。</p>

<h3 id="section-2">结论</h3>

<p>EventBus 作为一个 In-JVM 的观察者模式的实现，非常使用，使用起来非常简单，可以减少不少的工作，建议在项目中可以多多使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[发泄快感]]></title>
    <link href="http://khotyn.github.com/blog/2013/11/06/abreact-pleasant/"/>
    <updated>2013-11-06T19:16:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/11/06/abreact-pleasant</id>
    <content type="html"><![CDATA[<p>前一段时间特别喜欢上知乎，觉得还是一个挺有意思的网站，同类的国外网站有 Quora，不过我英语不太好，所以平时还是喜欢逛逛知乎，但是最近逛知乎的时候发现一个问题，里面的有一些的问题的高票答案其实不是在回答问题，而是在发泄自己的情感，而这些答案往往还能够得到高票（历史上的煽动家大概也是这样的，让自己的话迎合大众的情感，以此得到他们的支持），比如下面这个：</p>

<p><img src="http://pic.yupoo.com/khotyn/Di8YyMye/medish.jpg" alt="image" /></p>

<p>正常的答案应该是列出邹孟睿的经历，但是得票第一的回答其实是在表达自己对「来往」这个产品的不满，或者是觉得「来往」并没有什么未来，当然，他自己似乎也有点不好意思，所以用了「匿名」来回答。</p>

<p>知乎上的这种答案不止这里一个，还有很多讨巧的答案，作为一个问答网站，其用户对于问题的回答应该尽量保持中立，这样的答案毫无疑问是无异于网站的形象，所以现在知乎对我的吸引力也越来越少了。</p>

<p>既然提到了快感，顺便说一句：“阅读新闻也是一种快感”，这是浪费时间的快感，不看新闻，你也不会错过任何重要的消息，所以，不如把手机上的新闻客户端给删掉，它不能给你带来任何东西。</p>

<p>哦，对了，有一个新闻客户端，素以评论见长，它提供了另一种形式的快感发泄，是的，我说的就是「网易新闻」。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jvmtop 介绍和实现分析]]></title>
    <link href="http://khotyn.github.com/blog/2013/11/02/jvmtop-impl/"/>
    <updated>2013-11-02T15:36:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/11/02/jvmtop-impl</id>
    <content type="html"><![CDATA[<h3 id="section">简介</h3>

<p>jvmtop 是一个分析工具，顾名思义，它是一个针对 jvm 的 工具，展示的方式和 unix 的 top 命令相似。</p>

<p>jvmtop 的项目地址是：<a href="https://code.google.com/p/jvmtop/">jvmtop</a>，安装 jvmtop 除了项目地址上的方式以外，还可以通过 jenv 安装：<code>jenv install jvmtop</code>。</p>

<p>jvmtop 提供了两个视图，一个是概览视图，可以展示出当前机器的所有的 JVM 的情况，命令是 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">jvmtop.sh</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>显示出的信息类似下面这样：</p>

<p><img src="http://pic.yupoo.com/khotyn/DhvVumOY/medish.jpg" alt="image" /></p>

<p>其中，各个字段的意义分别如下：</p>

<ul>
  <li>PID：进程 ID</li>
  <li>MAIN-CLASS：main 类的名字</li>
  <li>HPCUR：当前被使用的 heap 的大小</li>
  <li>HPMAX：最大可用的 heap 的大小</li>
  <li>NHCUR：当前被使用的非 heap 大小（比如：perm gen）</li>
  <li>NHMAX：最大可用的非 heap 大小</li>
  <li>CPU：CPU 的使用情况</li>
  <li>GC：消耗在 GC 上的时间比例</li>
  <li>VM：JVM 的提供者，大版本号，小版本号，图中的意思是 Apple 提供的 JDK 6U51 版本。</li>
  <li>USERNAME：当前的用户名</li>
  <li>#T：线程数量</li>
  <li>DL：是否有现成发生死锁</li>
</ul>

<p>还有一个视图是详情视图，展示一个 JVM 的详细情况，使用的命令如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">jvmtop.sh &lt;pid&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>显示的信息类似下面这样：</p>

<p><img src="http://pic.yupoo.com/khotyn/Dhw0sotX/dTwsh.png" alt="image" /></p>

<p>其中，各个字段的意义如下：</p>

<ul>
  <li>TID：线程 ID</li>
  <li>NAME：线程名</li>
  <li>STATE：线程状态</li>
  <li>CPU：线程当前的 CPU 占用情况</li>
  <li>TOTALCPU：从线程被创建开始总体的 CPU 占用情况</li>
  <li>BLOCKBY：阻塞这个线程的线程 ID</li>
</ul>

<p>更加详细的用法大家可以用下面的用 <code>jvmtop.sh -h</code> 来查看。</p>

<h3 id="section-1">实现</h3>

<p>jvmtop 的实现相对来说还是比较简单的，整个 jvmtop 才 14 个类。</p>

<p><img src="http://pic.yupoo.com/khotyn/DhwgtqPY/IYHUw.png" alt="image" /></p>

<p>其中 JvmTop.java 是入口类。</p>

<p>jvmtop 在启动后，会首先用 <code>sun.jvmstat.monitor.*</code> 下面的类以及 <code>com.sun.tools.attach.VirtualMachine</code> 获取到当前机器的所有的 JVM，然后通过 attachment api 将 <code>management-agent.jar</code> 这个 agent 加载到目标 JVM 上，这样，通过 JMX，就可以拿到当前的 JVM 的各种信息了，具体各个信息需要用什么样的 MBean 去拿，大家可以看对应的源代码。</p>

<p>其实，如果需要一个 JVM 的静态的信息，比如，PID，MAIN-CLASS，JVM-ARGS 等等静态信息，直接用 <code>sun.jvmstat.monitor.*</code> 下的 API 就可以，只有需要动态信息的时候，我们才需要通过 attachment api 把 JMX 的功能打开，通过各种 MBean 去获取这些信息。如果后续需要实现类似的功能，也可以通过这样的思路去做。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在更大的世界遇见更好的自己]]></title>
    <link href="http://khotyn.github.com/blog/2013/10/24/brave-new-world/"/>
    <updated>2013-10-24T08:31:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/10/24/brave-new-world</id>
    <content type="html"><![CDATA[<p><img src="http://pic.yupoo.com/khotyn/Dg6bDXhi/Zb6Cy.jpg" alt="image" /></p>

<p>今天和朋友聊天，说起眼见的问题，以前在业务团队的时候大家都奔着业务而去，完成业务上的需求，最多了解一下所用到的框架，鲜有关注业界的开源软件的动态。</p>

<p>而到了中间件团队，所有人都得规划、实施、推广自己的产品，如果只是做一些平庸的事情，那实在对不起你所在的团队，所以只能硬着头皮去花时间关注业界的开源软件的动态，慢慢地，也就开阔了自己的眼见，碰到一个问题以后，发现还可以用这样的方法解决，这是之前从来没有想到的。</p>

<p>最近其实一直在反思，当时这么快下决定转岗到现在的部门到底对不对？诚然，当时转岗的决定，有其他的非常私人的考虑，在新的岗位，各种不习惯，但是这里有很多新鲜的事情，可以作为学习的对象；有一些很强的人，可以作为学习的榜样。当你进入了一个更大的世界，你又重新回到了婴儿的时代，疯狂快速地吸收着周围的一切。</p>

<p>晚上跑步的时候突然想起了 Clyde 三年前和我说的他的梦想：“等我老了的时候，我希望成为一个讲故事的人”，当时我并不明白他到底想表达什么，只能随便应付几句。现在，我似乎有点想明白了，那些有着很多精彩的故事的人，无非就是旅行家，船员之类的，想要成为一个讲故事的人，必须有足够的人生经历，和这个世界有更大的交集。最近在看德田秋声的「霉」，永远待在一个地方，生活大概就像「霉」中的男女主人公过的那样，平淡，烦躁，偶尔有点阳光，能够讲述的大概也就是些平淡无奇的故事。</p>

<p>一直很佩服身边的一些朋友和同事，他们能够把一件事情坚持两三年，有些人跑地并不快，但是他们总能比你更加坚持，跑得更远，和他们相比，我的生活是不是太过肤浅，似乎从来没有坚持一件事情超过一年，对于那个超过一年的世界，我陌生无比，这大概是因为我一直都比较缺乏意志力和专注力。</p>

<p>旧世界纵然舒适无比，但是前方永远有一个更吸引人，更宽广，更深邃的世界，多年以后，希望在那个世界遇见更好的自己。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代码之美]]></title>
    <link href="http://khotyn.github.com/blog/2013/10/16/beautiful-code/"/>
    <updated>2013-10-16T00:55:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/10/16/beautiful-code</id>
    <content type="html"><![CDATA[<p>今天的工作基本上就是在重构实习生写的 JS 代码，改的昏天暗地，他们基本把整个工程的 JS 代码都放到了一个文件中，代码中一会儿以空格缩进，一会儿以 tab 缩进，到处都是不必要的变量，我的代码洁癖又犯了，忍不住直接进行了重构，对 JS 进行模块化的拆分，每一个模块都有相对独立的功能，改了之后舒畅了很多，就像拿掉了卡在喉咙中鱼刺。</p>

<p>工作这几年以来，我也遇到过几个和我一样，有着或者或少代码洁癖的人，看到 IDE 中出现的警告信息就会感到不舒服（从 Eclipse 转到 Intellij IDEA 以后，洁癖的程度越来越严重了，Intellij IDEA 会对你的代码风格做更彻底的检查），看到以 tab 来做缩进简直就像看到异教徒一样，看到代码中已经被注释掉的废弃代码那肯定得马上删掉。</p>

<p>可惜的是，工作遇到的更多的人，在这方面要随意的多，他们更多追求的是把工作完成，让功能能够跑起来，其实一定程度上来说，他们是对的，他们是更加实用主义的程序员，实用主义能够帮助我们更快地达到自己的目标，而不会被和目标无关的东西所牵绊。但是，我觉得，一个程序员在追求程序的实用主义的时候，也应该去追求程序本身的美感。</p>

<p>或许有人会问，什么是程序的美感，关于这一点，我们可以从很多的侧面去描述：</p>

<ul>
  <li>更人性化的用户体验</li>
  <li>更简洁的架构</li>
  <li>程序内一致的代码风格</li>
  <li>更易读的代码</li>
</ul>

<p>但是，“美”本身是用语言是无法完整描述的，你可以说娜塔丽•波特曼很美，你也可以说加西莫多很多，但是他们之间的差距是如此之大，除了他们都是人之外你都找不到他们的共同点。所以“美”就是“美”，只有你身在其中的时候你才能够感受到。</p>

<p>或许对于很多人而言，“代码美”根本就是个扯淡的东西。其实写代码的过程和做木工的过程是很像的，说白了，都是设计出一样东西，然后拿来用而已。看看下面的无印良品木制家居，不得不承认，它比我们平时从市面上看到的普通的木制家居要舒服地多。同样一段代码也可以比另一段代码看起来更加“舒服”，更加“美”，只是每一个人对这种“美”的感受能力不同而已，有些能够感受到，有些不能感受到（在这一点上，不得不承认，我对“代码美”的感受能力是比较差的）。</p>

<p><img src="http://pic.yupoo.com/khotyn/DePKb6au/13WWB6.png" alt="image" /></p>

<p>想要去培养这种对“程序美”的感受能力，一个很好的方式就是去阅读优秀的开源代码，比如 Tomcat，Dubbo 等等，有时候，当你看到一段不错的代码，一个简洁的有用的架构设计的时候，你会感到来自内心深处的愉悦，这就是“美”的一个侧面。我相信，培养这样的感受能力，是非常有益于身心健康的，并且我也相信那些透露出“美”的代码在某种程度上也是更加优秀的代码（内王而外圣）。</p>

<p>这个世界已经够丑陋了，如果我们已经解决了温饱问题，又有了这么多的自由时间，不如做点“漂亮”点的东西出来，写一些更有用，更“美”的代码出来~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[乐观错觉与悲观现实]]></title>
    <link href="http://khotyn.github.com/blog/2013/10/15/positive-illusion-and-depressive-realism/"/>
    <updated>2013-10-15T01:17:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/10/15/positive-illusion-and-depressive-realism</id>
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/mw690/61c0c922gw1e055mycdv7j.jpg" alt="image" /></p>

<p>近日在读阿兰•德波顿的<a href="http://book.douban.com/subject/10594802/">「写给无神论者」</a>，里面提到基督教的人性本恶的观点给人带来的好处，当你对一件事情的结果期望并不高的时候，那么当结果出现一点好处的时候，你就会感到很快乐；相反，当你对一件事情有着过高的期望，最后结果并不令人满意的时候，你就会感到失落，绝望。</p>

<p>德波顿这样捧高悲观，而贬低乐观有点太偏颇了。但是，在各种舆论阵地上，“悲观主义”都在被不公正地对待，各个社交网络上永远都是“正能量”，“乐观”，“积极向上”，每一个人似乎都非常排斥“悲观主义”，我想悲观的人大概也比较受人讨厌。</p>

<p>诚然，过分地悲观会无情地伤害你的心灵，<a href="http://zh.wikipedia.org/wiki/%E5%A4%AA%E5%AE%B0%E6%B2%BB">太宰治</a>（愿我们都不要成为他那样的人）笔下的叶藏就是个典型的例子，由于对人类普遍的失望，叶藏一直都是郁郁寡欢、懦弱怕事，不断地和遇到他的女子殉情，最终失去了为人的资格。但是适度地悲观是非常有善的。现实是现实，到了一个人的心中，就成了“心中的现实”。当一个人处于乐观的状态下的时候，往往会对高估了现实的状况，而轻微悲观的人“心中的现实”更加接近实际的现实，他们能够更加准确地估计到现实中可能存在的一些问题，并且做好相应的准备，在问题真正到来的时候不会惊慌失措，因而能够保持更加稳定，更加健康的心理状态。</p>

<p>而那些盲目的乐观主义者（我们的周围不缺乏这样的人），由于对现实有着过高的认识和期望，对问题认识不足，月盈而亏，当结果不尽如人意的时候，各种负面情绪就会出现。你以为你有光明的未来，以为有特殊的才能，但是，到最后却发现你不过是芸芸众生中平凡的一员，很多中年人的失落就是来源于此吧。</p>

<p>所以，与其做个乐观主义者，不如做个悲观的行动主义者，与其相信有那种可能性，不如自己去寻找那种可能性，并且为可能的失败做好准备（成功永远都是属于少数人的）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git flow 分支管理模型简介]]></title>
    <link href="http://khotyn.github.com/blog/2013/10/01/git-flow/"/>
    <updated>2013-10-01T10:43:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/10/01/git-flow</id>
    <content type="html"><![CDATA[<p>有一次和 <a href="https://twitter.com/imsoz">@imsoz</a> 在聊天的时候，他给我介绍了一个叫做 Git flow 的分支管理模型，我听了很有兴趣，于是昨天花了一点时间去了解了一下。</p>

<h4 id="git-flow-">Git flow 分支模型</h4>

<p>Git flow 是一个分支模型，它提供了一个经过实践检验的分支管理的模型。整个分支模型的工作图大概是下面这样样子的：</p>

<p><img src="http://nvie.com/img/2009/12/Screen-shot-2009-12-24-at-11.32.03.png" alt="image" /></p>

<p>它包含有两个长期分支和三个支持的分支：</p>

<ul>
  <li>master 分支：使用过 git 的同学应该都这个分支很熟悉，这个分支代表了可以用于生产环境的代码。</li>
  <li>develop 分支：用于开发的分支，或者叫做“集成分支”，这里的代码可以用来做 nightly build。</li>
</ul>

<p>上面两个是长期的分支，这两个分支在开发的过程中会一直存在下去。除了这两个长期分支，还有三个用于支持的分支：</p>

<ul>
  <li>feature 分支：一般上从 develop 分支拉出来，最后要 merge 回 develop 分支，或者废弃掉。feature 分支是用来开发一个在下一次的产品 release 中可能被加上去的特性的，一个 feature 分支在特性开发完毕后就结束了，所以 feature 分支只是短暂地存在。</li>
  <li>release 分支：release 分支用来支持准备一个将要被 release 的产品版本，在这个分支上，我们可能会修改版本号，做一些 release 相关的事情，或者做一些 bug 的 hotfix，release 分支从 develop 分支拉出来，当你认为你的下一次的 release 所需要的特性都已经开发完毕的时候，你就可以从 develop 分支拉出 release 分支来，最后 release 分支需要 merge 回 develop 分支和 master 分支。</li>
  <li>hotfix 分支：顾名思义，hotfix 分支就是当生产环境的代码出现了重大的 bug 的时候需要的分支，这个时候你可以从 master 分支中拉出一个 hotfix 分支，在修复完 bug 后，记得要把 hotfix 的分支合并回到 develop 和 master 分支上。</li>
</ul>

<p>上面就是 Git flow 的整个分支模型，相对来说还是比较简单的，更加具体的说明可以看这篇关于 Git flow 分支模型最原始的 blog：<a href="http://nvie.com/posts/a-successful-git-branching-model/">http://nvie.com/posts/a-successful-git-branching-model/</a></p>

<h4 id="git-flow--1">Git flow 扩展</h4>

<p>但是有一个问题就是上面的这些分支的创建，合并，删除等等操作，都是需要好几步的，比较费时间，费精力，Git flow 还提供了一个 git 的扩展，让我们可以非常方便地在项目中使用上述的分支模型，具体的使用方式作者都已经写在了 github 上，大家可以自己去看：<a href="https://github.com/nvie/gitflow">https://github.com/nvie/gitflow</a>。在 Mac 下可以用 <code>brew install git-flow</code> 来安装。</p>

<p>之前我也了解过 git 的一些使用，并且已经在一些项目中尝试去使用 git，但是在分支管理这一块一直比较头疼，而 Git flow 恰好给我提供了一个现成的经过实践的分支模型，刚好公司后面有一个项目可能也会用到 git，到时候我会尝试下在项目组中推广使用 Git flow，让实践去检验一把。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Bean 的布尔类型属性获取问题]]></title>
    <link href="http://khotyn.github.com/blog/2013/09/25/java-bean-boolean/"/>
    <updated>2013-09-25T18:38:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/09/25/java-bean-boolean</id>
    <content type="html"><![CDATA[<h3 id="velocity--java-bean-">Velocity 对 Java Bean 中布尔类型的属性的获取问题</h3>

<p>今天朋友遇到一个问题，是 Velocity 下面一个 <code>Boolean</code> 类型的变量在模板上没有办法输出，我大致简化一下这个问题，现在我们有一个简单的 Java Bean：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleBean</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">Boolean</span> <span class="n">hasKatong</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">isHasKatong</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">hasKatong</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setHasKatong</span><span class="o">(</span><span class="n">Boolean</span> <span class="n">hasKatong</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">hasKatong</span> <span class="o">=</span> <span class="n">hasKatong</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后有一个简单的模板：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">$simpleBean</span><span class="o">.</span><span class="na">hasKatong</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>模板合并的代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Properties</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class="line">    <span class="n">p</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;resource.loader&quot;</span><span class="o">,</span> <span class="s">&quot;class&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="n">p</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;class.resource.loader.class&quot;</span><span class="o">,</span>
</span><span class="line">        <span class="s">&quot;org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="n">Velocity</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class="line">    <span class="n">VelocityContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VelocityContext</span><span class="o">();</span>
</span><span class="line">    <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;simpleBean&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">SimpleBean</span><span class="o">());</span>
</span><span class="line">    <span class="n">Template</span> <span class="n">template</span> <span class="o">=</span> <span class="n">Velocity</span><span class="o">.</span><span class="na">getTemplate</span><span class="o">(</span><span class="s">&quot;mytemplate.vm&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="n">StringWriter</span> <span class="n">sw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">();</span>
</span><span class="line">    <span class="n">template</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">sw</span><span class="o">);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sw</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>大家猜测一下这段代码的输出会是什么？可能大多数人都会认为是 <code>false</code>，但是在 Velocity 1.5 下，这段代码不会输出任何东西，反而会有一个 Warning：</p>

<blockquote>
  <p>INFO: Null reference [template ‘mytemplate.vm’, line 1, column 1] : $simpleBean.hasKatong cannot be resolved.</p>
</blockquote>

<p>而在 Velocity 1.7 下，输出就是如大家所预测的那样，是 <code>false</code>。</p>

<p>具体的分析过程并不复杂，Velocity 1.5 和 1.7 在寻找 isXXXX 这样的方法的时候处理稍微有一点不一样，具体在 <code>BooleanPropertyExecutor</code> 这个类上，在找到方法，对方法的返回值的判断上有一点不一样，1.5 是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">if</span> <span class="o">(</span><span class="n">isAlive</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">getMethod</span><span class="o">().</span><span class="na">getReturnType</span><span class="o">()</span> <span class="o">!=</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">setMethod</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而 1.7 的是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">if</span> <span class="o">(</span><span class="n">isAlive</span><span class="o">())</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">    <span class="k">if</span><span class="o">(</span> <span class="n">getMethod</span><span class="o">().</span><span class="na">getReturnType</span><span class="o">()</span> <span class="o">!=</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">TYPE</span> <span class="o">&amp;&amp;</span>
</span><span class="line">        <span class="n">getMethod</span><span class="o">().</span><span class="na">getReturnType</span><span class="o">()</span> <span class="o">!=</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">class</span> <span class="o">)</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="n">setMethod</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到，1.7 中增加了对返回值是 <code>Boolean</code> 的支持，而 1.5 只支持返回值是 <code>boolean</code> 的方法，那么既然知道了问题的根本原因，解决方法就显而易见了，要么将 <code>hasKatong</code> 这个属性的类型从 <code>Boolean</code> 改成 <code>boolean</code>，要么修改下 velocity 的模板，将属性获取直接改成方法调用：<code>$simpleBean.isHasKatong()</code>。</p>

<h3 id="java-bean-">Java Bean 规范对布尔类型属性的定义</h3>

<p>当然，照理说像 velocity 这样的著名开源组件，不应该在这种问题上犯错误，然后我看了一下 Java Bean 的规范：</p>

<p><img src="http://pic.yupoo.com/khotyn/DbKXKmwa/medish.jpg" alt="image" /></p>

<p>其实这段话已经说的很清楚了，只有原生类型的 <code>boolean</code> 的 Accessor 方法才能够用 <strong>is</strong> 前缀，其他的都用 get，其实在 JDK 的 Introspector 的实现中，也是这样处理的。</p>

<p>那么，这么看来，Velocity 1.5 的处理是正确的，那么 1.7 增加对 <code>Boolean</code> 的支持是为什么呢？</p>

<p>其实，Java Bean 的规范在 <code>is</code> 这种 Accessor 的规定上，是有点不怎么符合开发人员的直觉的，很多人都会在这个问题上纠结：<strong><code>Boolean</code> 类型的属性的 Accessor 是不是应该用 is 开头？</strong>，我觉得大部分人的直觉对这个答案的回答应该都是<em>是</em>，所以 Velocity 这样处理只不过是顺着大多数人的直觉的意思罢了，无可厚非。</p>
]]></content>
  </entry>
  
</feed>
