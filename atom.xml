<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[码工作坊]]></title>
  <link href="http://khotyn.github.com/atom.xml" rel="self"/>
  <link href="http://khotyn.github.com/"/>
  <updated>2013-09-07T16:28:32+08:00</updated>
  <id>http://khotyn.github.com/</id>
  <author>
    <name><![CDATA[khotyn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[谢谢我的小伙伴们]]></title>
    <link href="http://khotyn.github.com/blog/2013/09/05/thanks-my-friend/"/>
    <updated>2013-09-05T22:05:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/09/05/thanks-my-friend</id>
    <content type="html"><![CDATA[<p><strong>Those who were dancing where thought to be crazy by those who can not hear the music, and now the music is over~</strong></p>

<p>谢谢我的小伙伴们，在我最低落的时候一直陪伴着我，你们是我最好的朋友。</p>

<p>滨江的三个小伙伴，虽然因为一个错误的决定而离开了一起待了四年的你们，但是相信我们会是一生的朋友~，我会常去滨江看你们的~</p>

<p>感谢孙大娘，作为我最好的女性朋友，可以听一个大男人打电话哭，真是太难得了~</p>

<p>感谢宋蛋蛋和鲁哥，一起陪喝酒，陪骑车，陪吃饭，陪搬家，虽然你们的感情走的也不是很顺，但是还是希望你们能够最后能够有所斩获~</p>

<p>我一直以来都在警告自己不要受感情的影响，但是人总有感性赢过理性的时候，谢谢你们把我拉了回来。现在，我的世界依然充满希望，我依然希望可以写出更好的代码，对系统更有自己的感觉，依然期盼着什么时候可以去海南和台湾环岛，依然想要完成自己的第一个全程马拉松，依然对出国工作和学习抱有一些期待，依然想要赚更多的钱，过想要的生活，依然努力避免成为自己讨厌的样子。</p>

<p>恩，这下我知道怎么笑得更加开心了~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crush]]></title>
    <link href="http://khotyn.github.com/blog/2013/09/03/crush/"/>
    <updated>2013-09-03T23:09:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/09/03/crush</id>
    <content type="html"><![CDATA[<p>失恋了，命运总是在你觉得一切都在好的方向上发展的时候给你致命一击，换工作，为了靠近一点，换住的地方，为了更靠近一点，放弃原来的朋友，只为能够和她更加经常地见面，你们约好了明天一起去看电影，周末一起搬家，说好了要去哪里玩，要去吃什么好吃的东西，但是却敌不过命运女神的玩笑，你觉得你的世界已经奔溃了，觉得工作已经索然无味，觉得食物是可有可无的，你也明白如果不见面了，那么时间肯定会带走一切，但是，在这一刻，你恨不得狠狠地给自己捅上一刀，好让自己好受一点。</p>

<p>不过，人生总该如此，就应该在最幸福的时候也保持警惕，在最开心的时候也要保持头脑的清醒。正如保罗•柯艾略说：“昨日的伤痛是光明战士今日的力量”，人总要经历这种事情才会成长，只是，在这个过程中，心里会长上一层层的茧，你也在怕自己是不是不会再爱了。</p>

<p>难能可贵的是，只有当遇到这种事情的时候，你才能够感受到朋友的弥足珍贵，那些多年以来一直在一起的朋友，是你生命中很重要的一笔财富，他们会在你最低谷的时候给予你安慰，告诉你你的世界还是有些许温度的。</p>

<p>一直以来很喜欢传奇程序员 <a href="http://en.wikipedia.org/wiki/Jamie_Zawinski">Zawinski</a> 的日记里面的一句话：“痛苦造就性格”，在你最痛苦的时候，才是最能够体现你的品格的时候，所以，我也不能就这么消沉下去，沉溺于过去的人是没有光明的~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从 JVM 中 dump class 的几种方法]]></title>
    <link href="http://khotyn.github.com/blog/2013/08/03/dumping-class-from-jvm/"/>
    <updated>2013-08-03T14:04:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/08/03/dumping-class-from-jvm</id>
    <content type="html"><![CDATA[<p>前几天在 HotCode 的用户群里面，有同学问起“如何将 JVM 中的 class dump 出来”，当时我下意识的回答就是“可以在 JVM 启动的时候挂一个 agent 上去，然后通过 Instrumentation API 在 class 加载的时候做拦截，把类 dump 出来。”，今天无聊在翻 <a href="http://weibo.com/rednaxelafx">R 大</a>的<a href="http://rednaxelafx.iteye.com/blog/727938">博客</a>的时候，发现还可以通过 sa-jdi.jar 里面的一个类做 dump，这里就集中介绍一下这几个方法，然后介绍我在 sa-jdi.jar 基础上改的一个小工具。</p>

<h3>采用 classLoader.getResourceAsStream()</h3>

<p>将一个类从 JVM 中 dump 出来，最简单的方法当然就是直接从 jar 包中把对应的 class 文件找到，然后 dump 出来了，我们可以用 <code>classLoader</code> 的 <code>getResourceAsStream</code> 来做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ClassLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getContextClassLoader</span><span class="o">();</span>
</span><span class='line'><span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;com/khotyn/Test.class&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>拿到 InputStream 后，你就可以随便玩了。</p>

<p>这个方法简单是简单，但是缺点也很明显，在有些 Java 程序中，类不一定是从 Class 文件中过来，有些是在运行时生成的，有些则在载入到 JVM 之前被增强过，所以这个方法有些类是 dump 不出来的，有些类则 dump 出来不是你想要的。</p>

<h3>采用 javaagent</h3>

<p>另外一个方法是通过在 JVM 启动的时候挂在一个 javaagent，然后用 Instrucmentation API 在类被加载到虚拟机之前做拦截，参考代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">khotyn</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.instrument.ClassFileTransformer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.instrument.IllegalClassFormatException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.instrument.Instrumentation</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.ProtectionDomain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.io.FileUtils</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A demo to demonstrate how to use JVM ti to dump class file from JVM.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author khotyn.huangt 13-8-3 PM2:21</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AgentMain</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">premain</span><span class="o">(</span><span class="n">String</span> <span class="n">agentArgs</span><span class="o">,</span> <span class="n">Instrumentation</span> <span class="n">inst</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">inst</span><span class="o">.</span><span class="na">addTransformer</span><span class="o">(</span><span class="k">new</span> <span class="n">ClassFileTransformer</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">transform</span><span class="o">(</span><span class="n">ClassLoader</span> <span class="n">loader</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">classBeingRedefined</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">ProtectionDomain</span> <span class="n">protectionDomain</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">classfileBuffer</span><span class="o">)</span>
</span><span class='line'>                                                                                              <span class="kd">throws</span> <span class="n">IllegalClassFormatException</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">FileUtils</span><span class="o">.</span><span class="na">writeByteArrayToFile</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/tmp/&quot;</span> <span class="o">+</span> <span class="n">className</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;.&#39;</span><span class="o">,</span> <span class="sc">&#39;/&#39;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;.class&quot;</span><span class="o">),</span>
</span><span class='line'>                                                   <span class="n">classfileBuffer</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// Quite</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>将上面的代码打成一个 jar 包（<em>注意把依赖的 apache commons.io 也打入，也可以直接下载我的 demo 工程：<a href="http://pan.baidu.com/share/link?shareid=778648109&amp;uk=607430891">agentDumpClass.zip</a></em>），然后在 jar 包的 <code>META-INF/MANIFEST.MF</code> 中填上如下的内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Manifest</span><span class="o">-</span><span class="nl">Version:</span> <span class="mf">1.0</span>
</span><span class='line'><span class="n">Boot</span><span class="o">-</span><span class="n">Class</span><span class="o">-</span><span class="nl">Path:</span> <span class="n">agentDump</span><span class="o">.</span><span class="na">jar</span>
</span><span class='line'><span class="n">Built</span><span class="o">-</span><span class="nl">By:</span> <span class="n">apple</span>
</span><span class='line'><span class="n">Build</span><span class="o">-</span><span class="nl">Jdk:</span> <span class="mf">1.7</span><span class="o">.</span><span class="mi">0</span><span class="n">_17</span>
</span><span class='line'><span class="n">Class</span><span class="o">-</span><span class="nl">Path:</span> <span class="n">lib</span><span class="o">/</span><span class="n">commons</span><span class="o">-</span><span class="n">io</span><span class="o">-</span><span class="mf">2.4</span><span class="o">.</span><span class="na">jar</span>
</span><span class='line'><span class="n">Premain</span><span class="o">-</span><span class="nl">Class:</span> <span class="n">com</span><span class="o">.</span><span class="na">khotyn</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">AgentMain</span>
</span><span class='line'><span class="n">Created</span><span class="o">-</span><span class="nl">By:</span> <span class="n">Apache</span> <span class="n">Maven</span>
</span><span class='line'><span class="n">Can</span><span class="o">-</span><span class="n">Redefine</span><span class="o">-</span><span class="nl">Classes:</span> <span class="kc">true</span>
</span><span class='line'><span class="n">Archiver</span><span class="o">-</span><span class="nl">Version:</span> <span class="n">Plexus</span> <span class="n">Archiver</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后你就可以执行类似于下面的命令来进行 dump 了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span> <span class="o">-</span><span class="nl">javaagent:</span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">apple</span><span class="o">/</span><span class="n">workspace</span><span class="o">/</span><span class="n">agentDumpClass</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">agentDump</span><span class="o">.</span><span class="na">jar</span> <span class="n">Test</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于 premain 方法是在 java 程序的 main 方法执行之前执行的，所以这个方法几乎可以拦截到所有的类，另外，由于注册的 ClassFileTransformer 是 ClassLoader 加载 class 之后，JVM 定义 class 之前被执行的，所以无论是在运行时生成的类，还是经过增强后的类，这个方法都能够 dump 出来，比第一种方法要强很多。然而这个方法还是有一些缺点：</p>

<ul>
<li>需要在 JVM 启动时增加特别的参数。</li>
<li>只能随 class 被加载进行 dump，不能随时进行 dump</li>
</ul>


<h3>采用 sa-jdi.jar 的 ClassDump 工具</h3>

<p>这个方式是 R 大在博客中介绍的方法，可以说是最强大的方法，不像前面的两个方法，这个方法可以在 JVM 进程外执行，且像 javaagent 的那个方法一样，都可以将运行时和被增强过的类 dump 出来，非常方便，至于具体的用法大家就直接看 <a href="http://rednaxelafx.iteye.com/blog/727938">R 大的文章</a>吧。</p>

<h3>改进 ClassDump</h3>

<p>ClassDump 工具虽然强大，但是命令略显繁琐，特别是当你只需要 dump 特定的类的时候，还需要专门写一个 ClassFilter 的实现类，这么好的工具，应该直接做成命令行工具才好，于是我修改了 ClassDump 的代码，让它可以支持正则表达式的方式来对需要 dump 的类进行过滤，改进后的 ClassDump 放在了我的 github 仓库上：<a href="https://github.com/khotyn/tools">https://github.com/khotyn/tools</a></p>

<p>大家可以直接用下面的方式来使用这个改进版：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sudo</span> <span class="n">classDump</span> <span class="mi">17118</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">khotyn</span><span class="o">.*</span><span class="err">&#39;</span> <span class="n">dump</span>
</span></code></pre></td></tr></table></div></figure>


<p>classDump 这个命令的第一个参数是目标 JVM 的 PID，第二个参数是一个正则表达式，表示你所要 Dump 出来的类，第三个参数可选，是 dump 的目录。</p>

<p>但是这个工具有一个缺点，就是目前只能在 Mac 下用（因为我用 Mac，呵呵，我把修改后的类直接打入到了 Mac 的 jdk 的 sa-jdi.jar 下面），不过要做其他的平台的也很简单啦，只要按照以下步骤来打包出自己的 sa-jdi.jar 就可以：</p>

<ul>
<li>下载我修改过的两个类：<a href="http://pan.baidu.com/share/link?shareid=780474506&amp;uk=607430891">ClassDump.class</a>，<a href="http://pan.baidu.com/share/link?shareid=782905423&amp;uk=607430891">RegexClassFilter.class</a></li>
<li>从 jdk 目录下拷贝一份 sa-jdi.jar 出来</li>
<li>用下面的命令将修改过的两个类打到 sa-jdi.jar 中去：<code>jar uf sa-jdi.jar sun/jvm/hotspot/tools/jcore/ClassDump.class sun/jvm/hotspot/tools/jcore/RegexClassFilter.class</code></li>
<li>然后配合仓库中的 classDump 脚本就可以用了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Sed & Awk」阅读笔记之 Sed 高级命令]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/30/sed-part-two/"/>
    <updated>2013-07-30T21:41:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/30/sed-part-two</id>
    <content type="html"><![CDATA[<p>上一篇文章中，我介绍了一下 <a href="../../../../2013/07/28/sed-and-awk-part-one/">sed 的基础</a>，包括执行方式、地址选择器以及基本命令，在这一篇文章中，我们继续来了解一下 sed 的高级命令，之所以称它们为高级命令，是因为这些命令会改变 sed 的执行流，废话不说，我们来看看这些命令吧：</p>

<h3>高级命令</h3>

<h4>N (Next)</h4>

<p>这里要介绍的第一个命令是 <code>N</code>，它和我们前面介绍过的 <code>n</code> 命令很像，也是要读取下一行的内容，不同的是，<code>N</code> 读取下一行的内容并且将这些内容附加到 pattern space 当前的内容后面。这样，当你需要连着处理多行内容的时候，<code>N</code> 命令就会特别有用，比如，我们有下面一段文本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>one two three four
</span><span class='line'>one two three 
</span><span class='line'>four three two
</span><span class='line'>three four</span></code></pre></td></tr></table></div></figure>


<p>如果我们要把 <code>two three four</code> 替换成 <code>2 3 4</code>，注意例子中的 <code>two three four</code> 可能在不同的行中，那么我们就可以用 <code>N</code> 命令来处理：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>N
</span><span class='line'>s/\n/ /
</span><span class='line'>s/two three four/2 3 4/</span></code></pre></td></tr></table></div></figure>


<p>输出的内容为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>one 2 3 4 one two three
</span><span class='line'>four three 2 3 4</span></code></pre></td></tr></table></div></figure>


<p>这个结果不是我们想要的，不过的确是符合了上面的 sed 脚本的执行结果：</p>

<ol>
<li>首先，sed 脚本读取了文本的第一行，这个时候 pattern space 中的内容为 <code>one two three four</code></li>
<li>然后 sed 脚本执行 N 命令，将下一行读取并附加到当前的 pattern space 内容的后面，这个时候，pattern space 中的内容就变为 <code>one two three four\none two three</code></li>
<li>下一个命令，将换行符 <code>\n</code> 替换成一个空格，pattern space 中的内容为 <code>one two three four one two three</code></li>
<li>然后下一个命令，将 pattern space 中的 <code>two three four</code> 替换成 <code>2 3 4</code>，这个时候 pattern space 中的内容为 <code>one 2 3 4 one two three</code></li>
<li>到达脚本的结尾，输出 pattern space 中的内容，也就是我们输出内容的第一行。</li>
<li>然后 sed 脚本读取文本的下一行，注意因为之前第二行已经被 <code>N</code> 命令读取了，所以 sed 脚本开始读取第三行，依旧按照前面的命令执行，最后就输出了输出内容中的第二行。</li>
</ol>


<p>虽然这个结果不是我们想要的，不过算是了解了 N 的作用了。</p>

<h4>D (Delete)</h4>

<p>同样，前面我们介绍过 <code>d</code> 命令，它用来删除 pattern space 中的内容，并且读取下一行到 pattern space 中，sed 脚本也随之从头开始执行。<code>D</code> 命令和 <code>d</code> 命令稍微有点不同，<code>D</code> 命令会删除 pattern space 中的第一行的内容，它不会从文本中读取新的行进来，当然 sed 脚本还是会从头开始执行，如果我们有这么一个文本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>blank
</span><span class='line'>blank
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>blank
</span><span class='line'>
</span><span class='line'>blank
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>blank
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>blank</span></code></pre></td></tr></table></div></figure>


<p>这个文本中的有些段落之间有多个空行，我们希望把多余的空行去掉，也就是如果段落之间有多个空行，就删掉只剩下一个，我们的 sed 脚本可以这么写：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/^$/{
</span><span class='line'>  N
</span><span class='line'>  /^\n$/D
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>这个脚本先匹配出空行，然后读取空行的下一行，如果两行都是空行的话，就把 pattern space 中的第一个空行删除掉，然后继续读取下一行到 pattern space 中，结果就是把多余的空行都删除掉，只剩下一个空行了。</p>

<h4>P (Print)</h4>

<p><code>P</code> 命令和 <code>p</code> 命令也稍微不同，<code>P</code> 命令不像 <code>p</code> 命令那样会把 pattern space 中的所有内容打印出来，它只会将 pattern space 的第一行打印出来，这里就不做过多的介绍了。</p>

<h4>h (hold), H (Hold), g (get), G (Get), x (exchange)</h4>

<p>这里面有五个命令，之所以一起介绍是因为，这五个命令都是操作 hold space 的，之前我们已经知道了 pattern space 了，hold space 可以认为就是一个内容的临时存放点，你可以将 pattern space 中的内容放到 hold space 中，等到需要使用的时候再将 hold space 中的内容拿回到 pattern space 中，我们来看一下这五个命令的作用吧：</p>

<ul>
<li>h：将 pattern space 中的内容拷贝到 hold space 中，hold space 中原来的内容会被覆盖。</li>
<li>H：将 pattern space 中的内容添加到 hold space 当前内容的后面。</li>
<li>g：将 hold space 中的内容拷贝到 pattern space 中，pattern space 中原来的内容将会被覆盖。</li>
<li>G：将 hold space 中的内容添加到 pattern space 中目前的内容后面。</li>
<li>x：交换 pattern space 和 hold space 中的内容。</li>
</ul>


<p>下面我们来看一个简单的例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1
</span><span class='line'>2
</span><span class='line'>11
</span><span class='line'>22
</span><span class='line'>111
</span><span class='line'>222</span></code></pre></td></tr></table></div></figure>


<p>现在我们要将上面的 1 和 2 的位置调换，就是先出现 2 再出现 1，我们的脚本可以这么写：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/1/{
</span><span class='line'>  h
</span><span class='line'>  d
</span><span class='line'>}
</span><span class='line'>/2/{
</span><span class='line'>  G
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这段脚本先匹配 1 所在的行，然后放到 hold space 中，将 pattern space 中的内容清除掉，然后匹配到 2 所在的行，将 hold space 中的内容添加到 pattern space 后面，这样，pattern space 中就是先有 2，再有 1 了。</p>

<p>最后，我们得到的结果就是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2
</span><span class='line'>1
</span><span class='line'>22
</span><span class='line'>11
</span><span class='line'>222
</span><span class='line'>111</span></code></pre></td></tr></table></div></figure>


<h4>b</h4>

<p><code>b</code> 命令是一个跳转命令，它是无条件的，它的语法是这样的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[address]b [label]</span></code></pre></td></tr></table></div></figure>


<p>[label] 是要跳转到的标签，你可以在 sed 脚本中用 <code>:</code> 开头来表示一个标签，比如下面的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:start
</span><span class='line'>s/start/end/g
</span><span class='line'>b start</span></code></pre></td></tr></table></div></figure>


<p>如果 <code>b</code> 后面不带参数，那么就表示直接跳到脚本的末尾了。</p>

<h4>t</h4>

<p>除了 <code>b</code> 这样一个跳转命令以外，sed 还有一个 <code>t</code> 的条件跳转命令，如果在当前行有一个替换被成功执行了，那么 <code>t</code> 就会跳转到特定的标签上，它的语法 <code>b</code> 是类似的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[address]t [label]</span></code></pre></td></tr></table></div></figure>


<p>看下面这段代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:begin
</span><span class='line'>s/start/end/
</span><span class='line'>t begin</span></code></pre></td></tr></table></div></figure>


<p>这条 <code>t</code> 命令只有在当前行的 start 成功被替换成 end 的时候才会跳转到 :begin 标签那里。</p>

<h3>总结</h3>

<p>sed 的高级命令相对于基本命令来说不怎么常用，但是在处理特定的问题的时候，这些命令还是很有用的。不过，不管怎么说，sed 都不是一门完备的语言，所以其适用的问题域也是比较有限的，sed 最大的优势在于逐行处理文本上，用适当的工具处理适当的问题，才能发挥出工具最大的威力。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Sed & awk」阅读笔记之 sed 基础]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/28/sed-and-awk-part-one/"/>
    <updated>2013-07-28T16:39:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/28/sed-and-awk-part-one</id>
    <content type="html"><![CDATA[<p>之前写的一篇文章有提到采用 sed 来<a href="../../../../blog/2013/07/24/match-line-not-contain-a-string/">匹配不包含连续字符串的行</a>，平时在做日志分析的时候也经常要用到 sed，但是仅仅用了 sed 的字符串替换的功能，没有系统地去学习过 sed 用法，这次找到一本叫<a href="http://book.douban.com/subject/1741933/">「sed &amp; awk」</a>的书，便花时间对 sed 做了系统的学习。</p>

<h3>sed 的执行方式</h3>

<p>要了解 sed，必须了解 sed 的执行方式，sed 是一个行处理器，脱胎于 <a href="http://www.gnu.org/software/ed/manual/ed_manual.html">ed</a>（ed 是一个行编辑器，awk 和 grep 也是基于 ed 的），简单地说，sed 的执行方式是这样的：<strong>sed 会从输入的文本中读取一行，放到 pattern space 中，然后用 sed 脚本去处理，处理完后继续读取下一行，继续处理。</strong></p>

<p>假设我们有下面一段文本需要处理：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>John Daggett, 341 King Road, Plymouth MA
</span><span class='line'>Alice Ford, 22 East Broadway, Richmond VA
</span><span class='line'>Orville Thomas, 11345 Oak Bridge Road, Tulsa OK
</span><span class='line'>Terry Kalkas, 402 Lans Road, Beaver Falls PA
</span><span class='line'>Eric Adams, 20 Post Road, Sudbury MA
</span><span class='line'>Hubert Sims, 328A Brook Road, Roanoke VA
</span><span class='line'>Amy Wilde, 334 Bayshore Pkwy, Mountain View CA
</span><span class='line'>Sal Carpenter, 73 6th Street, Boston MA</span></code></pre></td></tr></table></div></figure>


<p>我们要把文本中的 CA 替换成 California，OK 替换成 Oklahoma，于是我们写了下面一段 sed 脚本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>s/CA/California/
</span><span class='line'>s/OK/Oklahoma/</span></code></pre></td></tr></table></div></figure>


<p>那么 sed 的执行方式是这样的：</p>

<ol>
<li>先读取第一行 <code>John Daggett, 341 King Road, Plymouth MA</code> 到 pattern space</li>
<li>然后执行脚本的第一行命令，将其中的 CA 替换成 California。</li>
<li>然后执行脚本的第二行命令，将其中的 OK 替换成 Oklahoma。</li>
<li>文本的第一行处理完毕，继续读取文本的下一行。</li>
<li>继续第 2 步和第 3 步。</li>
</ol>


<p>当然，这只是大部分情况下 sed 的执行方式，sed 的基本命令都是按照这种方式来执行的，一些高级命令可以改变 sed 的执行流。不过在了解这些 sed 命令之前，我们先了解下 sed 的地址选择器，它是很多命令的组成部分。</p>

<h3>sed 的地址选择器</h3>

<p>默认的情况，sed 脚本会对文本的每一行做处理，但是有时候我们只希望我们的命令作用于特定的几行，这个时候，我们就可以用 sed 的地址选择器，sed 的地址选择器可以是一个正则表达式（sed 的正则表达式总是放在两个 <code>/</code> 中间），行号，或者地址符号（<em>这个是什么东西？我也不清楚</em>），具体的使用方式如下：</p>

<ul>
<li>如果没有指定地址选择器，那么命令默认会应用在每一行上。</li>
<li>如果只有一个地址选择器，那么命令会作用在每一个符合这个地址选择器的行上。</li>
<li>如果是两个用 <code>,</code> 分割的地址，那么命令会先作用到第一个符合第一个地址选择器的行上，然后继续作用于后续的行，直到（包括）第一个符合第二个地址选择器的行为止。</li>
<li>地址选择器后面可以跟上一个 <code>!</code>，表示反向选择。</li>
</ul>


<p>另外在一个地址选择器中，你可以用一对 <code>{}</code> 将多个命令包含在其中，下面我们来看一个例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/^\.TS/,/^\.TE/{
</span><span class='line'>     /^$/d
</span><span class='line'>     s/^\.ps 10/.ps 8/
</span><span class='line'>     s/^\.vs 12/.vs 10/
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>这个 sed 脚本的第一行就是一个地址选择器，由 <code>,</code> 分开的两个地址选择器组成，都是正则表达式形式的，表示后面 <code>{}</code> 中的命令会从第一个以 <code>.TS</code> 开头的行一直作用到第一个以 <code>.TE</code> 开头的行为止。</p>

<h3>sed 的基本命令</h3>

<p>了解完 sed 的地址选择器后，我们就可以继续了解 sed 的基本命令了。</p>

<h4>替换（substitution）</h4>

<p>sed 的文本替换命令是我最常用的命令，它的语法是这样的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[address]s/pattern/replacement/flags</span></code></pre></td></tr></table></div></figure>


<p>它由这几个部分组成：</p>

<ul>
<li>最前面是一个地址选择器，是可选的。</li>
<li>然后后面是一个命令 <code>s</code>，表示是替换命令。</li>
<li>后面紧跟一个正则表达式，表示要被替换的文本。</li>
<li>再后面是希望替换成的文本。</li>
<li>最后是标记位。</li>
</ul>


<p>其中标记位可以是：</p>

<ul>
<li>n：一个从 1 到 512 的数字，表示只替换第 n 个符合 pattern 子串。</li>
<li>g：默认情况下，替换命令只会替换一行中第一个符合 pattern 的子串，加上 <code>g</code> 以后会将行中所有符合 pattern 的子串都进行替换。</li>
<li>p：将 pattern space 中的内容打印出来。</li>
<li>w <em>file</em> ：将 pattern space 中的内容写到文件中。</li>
</ul>


<p>举一个例子，假设我们要将第一个例子中的最后一行的 MA 换成 Massachusetts，就可以这样写：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$s/MA/Massachusetts/</span></code></pre></td></tr></table></div></figure>


<p>其中的 <code>$</code> 是一个地址选择器，表示最后一行。</p>

<p>替换命令的替换文本基本上就是一个字符串，但是还是有一些特殊字符：<code>\</code>，<code>&amp;</code> 和 <code>\n</code>，其中：</p>

<ul>
<li><code>\</code>：转义，转义特殊字符。</li>
<li><code>&amp;</code>：代表要被替换的文本，也就是符合 pattern 的子串。</li>
<li><code>\n</code>：当前面的正则表达式中有捕获部分的时候（即，正则表达式的 <code>()</code> 语法），可以在替换文本中用这种反向引用的方式进行引用。</li>
</ul>


<p>这些特殊字符在当你需要将匹配的文本中的某些部分放到替换文本中的时候会特别有用。</p>

<h4>删除（delete）</h4>

<p>删除命令很简单，它的语法是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[address]d</span></code></pre></td></tr></table></div></figure>


<p>前面可以带一个地址选择器，后面是一个 d，表示删除命令，举一个简单的例子，假设我们要筛选出不包含 <code>abc</code> 的行，可以这样写：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/abc/d</span></code></pre></td></tr></table></div></figure>


<p>把包含 abc 的行全部都删除掉，这样就筛选出了不包含 <code>abc</code> 的行。</p>

<h4>追加，插入和变化（append，insert，change）</h4>

<p>这三个命令的作用分别是：insert 将提供的文本插入到 pattern space 的当前行前面，append 将提供的文本追加到 pattern space 的当前行后面，change 命令替换 pattern space 中的内容，之所以将这三个命令放到一起说，是因为这三个命令需要将提供的文本放在命令的第二行，它们的语法分别是这样的：</p>

<p>append</p>

<pre><code>[line-address]a\
text
</code></pre>

<p>insert</p>

<pre><code>[line-address]i\
text
</code></pre>

<p>changae</p>

<pre><code>[address]c\
text
</code></pre>

<p>来一个例子，我们有下面一段文本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>I want to see @f1(what will happen) if we put the
</span><span class='line'>font change commands @f1(on a set of lines).
</span><span class='line'>If I understand things (correctly), the @f1(third) line causes problems. (No?).
</span><span class='line'>Is this really the case, or is it (maybe) just something else?
</span><span class='line'>Let's test having two on a line @f1(here) and @f1(there) as
</span><span class='line'>well as one that begins on one line and ends @f1(somewhere
</span><span class='line'>on another line).
</span><span class='line'>What if @f1(it is here) on the line?
</span><span class='line'>Another @f1(one).</span></code></pre></td></tr></table></div></figure>


<p>假设为了阅读的美观，我们希望段落之间能够空出一行来，段落结束的标记我们暂且简单地假设以 <code>.</code> 结尾，我们要做的就是在每一个以 <code>.</code> 结尾的行后面再插入一行，除了最后一行之外，那么我们的 sed 脚本就可以这么写：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$!{
</span><span class='line'>  /\.$/a\
</span><span class='line'>  \
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>来说明一下这段脚本，第一行是一个地址选择器，表示选择除最后一行以外的行，因为我们不希望在最后一个段落后面也加上一个空行，然后里面的命令是对所有的以 <code>.</code> 结尾的行运用 a 命令去追加一个空行。</p>

<h4>列出（list）</h4>

<p>列出命令和打印命令其实很像，不同的是列出命令会将不可见字符给列出来，比如 windows 下的换行符，假设我们有下面一段文本（<code>^M</code> 可以用 Ctrl+V，然后 Ctrl+M 来输入）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>^M^M
</span><span class='line'>^M
</span><span class='line'>^M^M^M</span></code></pre></td></tr></table></div></figure>


<p>上面一段文本用 <code>sed -n 'l'</code> 输出的内容是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\r\r$
</span><span class='line'>\r$
</span><span class='line'>\r\r\r$</span></code></pre></td></tr></table></div></figure>


<p>而用 <code>sed -n 'p'</code> 输出的内容是三个空空的行。</p>

<p>列出命令将不可见字符打印出来了，而打印命令则没有。</p>

<h4>转换（transform）</h4>

<p>转换命令和替换命令听起来是一样，但是它们还是不同的，转换命令就像是多个 <code>tr</code> 命令用管道连在一起作用一样，它的语法是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[address]y/abc/xyz/</span></code></pre></td></tr></table></div></figure>


<p>转换命令的一个使用的场景就是大小写的转换：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/</span></code></pre></td></tr></table></div></figure>


<p>上面这个命令会将文本中所有的小写字母转换成大写字母。</p>

<h4>打印（print）</h4>

<p>打印命令其实就是一个简单的 <code>p</code>，将 pattern space 中的内容打印出来，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$!p</span></code></pre></td></tr></table></div></figure>


<p>表示将除最后一行以外的内容全部打印出来。需要注意的是，默认情况下 sed 会将 pattern space 中的内容都打印出来，要关闭这个功能，可以加上一个 <code>-n</code> 参数，就像我在介绍列出命令的时候做的那样。</p>

<h4>打印行号</h4>

<p>打印行号也就是一个简单的 <code>=</code> 号，大家可以去试一下，这里不再多讲了。</p>

<h4>下一个（next）</h4>

<p>next 命令是一个 <code>n</code>，它的作用是将 pattern space 中的内容立即输出，然后将下一行读入到 pattern space 中，然后继续执行接下来的命令，比如：</p>

<pre><code>/H1/{
    n
/^$/d
}
</code></pre>

<p>就是先匹配到含有 H1 的行，然后将这一行打印出来，接着读取下一行到 pattern space，如果是空的话，就删除掉。</p>

<h4>读取和写入文件（read，write）</h4>

<p>sed 的读取文件的功能可以将文件中的内容追加到 pattern space 后面，前面那个在段落后面添加空行的例子我们可以这么做：首先创建一个只包含一个空行的文件叫做 temp，接着我们就可以用下面的命令来达到我们的目的了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$!{
</span><span class='line'>    /\.$/r temp
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>sed 的写入文件的功能和读取文件的功能类似，语法是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[address]w file</span></code></pre></td></tr></table></div></figure>


<p>表示将 pattern space 中的内容写入到文件。</p>

<h4>退出（quit）</h4>

<p>sed 的退出命令是让 sed 停止读取新的行，也停止输出，基本上就是让 sed 退出了，它的命令的语法是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[line-address]q</span></code></pre></td></tr></table></div></figure>


<p>它只能作用在单行的地址选择器上。</p>

<h3>总结</h3>

<p>sed 的基本命令相对来说还是比较简单的，最主要的还是要用好地址选择器，在下一篇中，我会介绍一些 sed 的高级命令。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再论如何匹配不包含连续字符串的行]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/24/match-line-not-contain-a-string/"/>
    <updated>2013-07-24T22:35:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/24/match-line-not-contain-a-string</id>
    <content type="html"><![CDATA[<p>在前一篇文章中，我讨论过如何使用<a href="http://blog.khotyn.com/blog/2013/07/24/zero-width-assert/">使用零宽断言来匹配不包含连续字符串的行</a>，这个方法采用了零宽断言这种不怎么常见的正则表达式用法，虽然行之有效，但是总归是个麻烦的方法，而且，零宽断言很多的正则表达式解释器都不支持，用 grep 的话，得加上 -P 参数，让 grep 采用 Perl 的方式解释正则表达式，更加遗憾的一点是 -P 参数似乎只有在 GNU 的版本中才有，在我的 Mac 上的 BSD 版本的 grep 中，并没有这个参数。</p>

<p>所幸的是今天无聊翻了翻 grep 的 man page，发现了几个更加方便的方法也更加通用的办法，在这里和大家分享一下：</p>

<h3>grep 的 invert match</h3>

<p>今天翻 grep 的 man page，发现了一个 <code>-v</code> 参数，它的说明是这样的：</p>

<blockquote><p>Selected lines are those not matching any of the specified patterns.</p></blockquote>

<p>正是我们想要，可以传入一个正则表达式，它帮你匹配不符合这个正则表达式的行，而且 <code>-v</code> 参数各个 grep 的版本都支持，无需担心换个系统就不能用的情况。</p>

<h3>采用 sed 来删除符合某个 pattern 的行</h3>

<p>其实不用 grep，用 sed 也可以做到这个需求，sed 本身就是一个强大的行处理工具，sed 可以用如下的方式把符合某个 pattern 的行给删除掉：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sed '/pattern/D'</span></code></pre></td></tr></table></div></figure>


<p>怎么样？也是非常方便的吧，它可以做到和 grep 一样的功能，非常有效。</p>

<h3>采用 sed 来打印不符合某个 pattern 的行</h3>

<p>要用 sed 来解决这个问题，其实不止上面一个方法，还可以用以下的方法来做：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sed -n '/pattern/!p'</span></code></pre></td></tr></table></div></figure>


<p>解释一下这段 sed 脚本的作用，首先是 <code>-n</code> 参数，大家知道 sed 的默认将处理和没有处理过的行都定向到输出流上，而 <code>-n</code> 参数是用来关闭这个功能，我们当然不希望 sed 将所有的行都打印出来。然后脚本的开始是一个行的选择器，前面是一个正则表达式（sed 的正则表达式都是放在两个斜杠之间的），后面的是一个<code>!</code>号，这样就表示选择反向选择，即选择不符合 pattern 的行，然后最后是一个 <code>p</code> 命令，把这样的行打印出来，这里的 pattern 当然可以是需求中的那个连续的字符串，这样，我们就达到了需求的目的了。</p>

<p>总结一下，推荐大家还是用 grep 的 invert match 或者 sed 来完成这个功能，零宽断言在解决这个问题上感觉有点杀鸡焉用牛刀（<strong>零宽断言还有很多适用的场景，不仅仅可以用来解决这个问题</strong>）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用零宽断言来匹配不包含连续字符串的行]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/24/zero-width-assert/"/>
    <updated>2013-07-24T16:34:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/24/zero-width-assert</id>
    <content type="html"><![CDATA[<p>最近在工作中遇到一个问题，有 N 个字符串，需要用正则表达式去过滤掉不包含某一个特定连续字符串(比如abc)的字符串。</p>

<p>在网上搜罗了一大把，找到了在 Perl 5 的正则表达式中有零宽断言这个东西，非常强大，先来了解下零宽断言倒是是什么？</p>

<p>简单的说，零宽断言是查找在某些内容之前或者之后的东西，这样解释起来可能比较抽象，我们来具体看下几种零宽断言：</p>

<ul>
<li>(?=exp)：这个零宽断言用来断言自身出现的位置之后能够匹配到表达式 exp，考虑下面这一个正则表达式 q(?=u)，这个正则表达式表示匹配后面的字符是 u 的 q</li>
<li>(?!exp)：这个零宽断言用来断言自身出现的位置之后不能够匹配到表达式 exp，看下面这一个正则表达式 q(?!u)，这个正则表达式表示匹配后面的字符不是 u 的 q</li>
<li>(?&lt;=exp)：这个零宽断言用来断言自身出现的位置之前能够匹配到表达式 exp</li>
<li>(?&lt;!exp)：这个零宽断言用来断言自身出现的位置之前不能够匹配到表达式 exp</li>
</ul>


<p>在理解零宽断言的时候需要注意的一点是它是一种断言，也就是说零宽断言只会告诉你匹不匹配，但是不会“消费”掉字符串内的内容，我用下面的这一个例子来解释这个情况：</p>

<p>我们有一个正则表达式 <code>k(?=h)otyn</code>，用它去匹配 khotyn，乍看一下这个匹配是会成功的，但是由于零宽断言只做断言，而不会&#8221;<strong>消费</strong>&#8220;掉匹配到的字符串，所以事实上，这个正则表达式匹配是一个后面是 h 的 k，并且这个 k 的后面是 otyn，这样这个正则表达式无论什么字符串都会匹配失败(正确的应该是 <code>k(?=h)hotyn</code>，不过这样加不加零宽断言并没有意义)。</p>

<p>在理解零宽断言以后，我们来看一下如何来匹配出不包含“abc”的字符串，下面是我写出的结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>((?!abc).)+</span></code></pre></td></tr></table></div></figure>


<p>首先我们看这个正则表达式里面的 <code>(?!abc).</code> 部分，这个部分断言一个空字符后面不能够匹配到字符串abc，并且这个空字符串后面是一个任意字符。</p>

<p>我们来看下下面这一段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Pattern</span> <span class="n">pattern</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Perl5Compiler</span><span class="o">().</span><span class="na">compile</span><span class="o">(</span><span class="s">&quot;((?!abc).)+&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Perl5Matcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Perl5Matcher</span><span class="o">();</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">matcher</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="s">&quot;abc&quot;</span><span class="o">,</span> <span class="n">pattern</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">matcher</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="s">&quot;abdas dfas&quot;</span><span class="o">,</span> <span class="n">pattern</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码的执行结果是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kc">false</span>
</span><span class='line'><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个匹配失败是因为在字符 &#8216;a&#8217; 前面的空字符后面匹配到了字符串 &#8220;abc&#8221;，因此断言失败，从而匹配失败。</p>

<p>第二个匹配成功是因为没有任何一个空字符后面有出现 &#8220;abc&#8221; ，因为匹配成功。</p>

<p>最后加上 + 号的原因是因为能够做到完全匹配，因为任何一个字符只要其本身不是 ‘a’，并且后面不是 ‘bc’，那么就是能够匹配 &#8220;(?!abc).&#8221; 的，因此，只要一个字符串里面不包含 abc，那么它就能够完全匹配 ((?abc).)+</p>

<p><strong>PS：这片文章其实是前几年写的，之前的博客被关闭了，数据丢了，幸好当时在 Iteye 上还有一份，于是就迁移过来。这几年我经常用这个方式来分析线上服务器的日志，可以说，有了零宽断言，省去了非常多的麻烦~，定位问题的速度也快了不少，零宽断言的确是一个非常犀利的东西。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cURL 使用简介]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/18/curl/"/>
    <updated>2013-07-18T22:05:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/18/curl</id>
    <content type="html"><![CDATA[<p><a href="http://curl.haxx.se/">cURL</a> 这个神器相信很多人都已经用过，简单地说，cURL 就是一个和服务器端通信的工具，至于用什么协议，cURL 支持各种各样的协议，包括 HTTP，FTP，SMTP 等等协议，可以说是应有尽有。</p>

<p>cURL 的可用的参数非常非常多，你能想到的基本上都有，不过一般使用的就那么几个参数吧，这里就介绍下我常常用到的两个：</p>

<h3>使用 Post 提交数据</h3>

<p>有些服务器端限制了你只能用 POST 的方式提交数据，这个时候如果你就不能通过在 URL 上加上参数的方式来提交数据了，cURL 提供了一个 <code>-d</code> 参数来让你可以用 POST 的方式把数据提交上去，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://ka.178.com/receive/index -d "activity_id=3403"</span></code></pre></td></tr></table></div></figure>


<p>这个请求只用了一个参数，多个参数可以 <code>&amp;</code> 符号作链接。</p>

<h3>附带 Cookie 到请求上</h3>

<p>使用 cURL 的另一个经常需要做的事情就是需要拿到用户的登录信息，这些登录信息往往放在 cookie 里面，这样你就需要把 cookie 信息附加在请求上提交到服务器，让服务器认为你是处于登录的状态，cURL 提供了一个 <code>--cookie</code> 的参数让你可以附上 cookie：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://ka.178.com/receive/index -cookie "__utma=2582276614.13325.133516.3;"</span></code></pre></td></tr></table></div></figure>


<p>如果嫌 <code>--cookie</code> 太长，可以用 <code>-b</code>，<code>-b</code> 是 <code>--cookie</code> 的简写。</p>

<h3>显示出请求的头信息</h3>

<p>对于有一些请求，比如那些返回 302 状态码的请求，cURL 默认情况下是不会输出任何内容的，这种请求下，我们就不知道它是返回了 200 而响应体里面没有任何内容还是因为是 302 而没有任何内容呢，这个时候我们就可以通过 <code>-D</code>（<code>--dump-header</code>）参数来显示请求的响应头，不过 <code>-D</code> 参数后面要加上一个文件，如果我们想直接输出到终端，那么就可以这么干：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -D /dev/stdout http://xxxxx.com/xxxx.html</span></code></pre></td></tr></table></div></figure>


<p>直接将内容输出到设备 stdout 下就可以（感谢 Unix，一切皆文件！）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 并发编程之 ConcurrentHashMap]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/12/juc-concurrenthashmap/"/>
    <updated>2013-07-12T23:02:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/12/juc-concurrenthashmap</id>
    <content type="html"><![CDATA[<p><strong>此篇文章是作者两年前发布在<a href="http://www.goldendoc.org/2011/06/juc_concurrenthashmap/">黄金档</a>的文章。</strong></p>

<p>ConcurrentHashMap 是一个线程安全的 Hash Table，它的主要功能是提供了一组和 HashTable 功能相同但是线程安全的方法。ConcurrentHashMap 可以做到读取数据不加锁，并且其内部的结构可以让其在进行写操作的时候能够将锁的粒度保持地尽量地小，不用对整个 ConcurrentHashMap 加锁。</p>

<h3>ConcurrentHashMap 的内部结构</h3>

<p>ConcurrentHashMap 为了提高本身的并发能力，在内部采用了一个叫做 Segment 的结构，一个 Segment 其实就是一个类 Hash Table 的结构，Segment 内部维护了一个链表数组，我们用下面这一幅图来看下 ConcurrentHashMap 的内部结构：</p>

<p><img src="http://pic.yupoo.com/goldendoc/Ba4GCFe1/nuEZ0.png" alt="image" /></p>

<p>从上面的结构我们可以了解到，ConcurrentHashMap 定位一个元素的过程需要进行两次 Hash 操作，第一次 Hash 定位到 Segment，第二次 Hash 定位到元素所在的链表的头部，因此，这一种结构的带来的副作用是 Hash 的过程要比普通的 HashMap 要长，但是带来的好处是写操作的时候可以只对元素所在的 Segment 进行加锁即可，不会影响到其他的 Segment，这样，在最理想的情况下，ConcurrentHashMap 可以最高同时支持 Segment 数量大小的写操作（刚好这些写操作都非常平均地分布在所有的 Segment 上），所以，通过这一种结构，ConcurrentHashMap 的并发能力可以大大的提高。</p>

<h3>Segment</h3>

<p>我们再来具体了解一下Segment的数据结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Segment</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">ReentrantLock</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">transient</span> <span class="kd">volatile</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">transient</span> <span class="kt">int</span> <span class="n">modCount</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">transient</span> <span class="kt">int</span> <span class="n">threshold</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">transient</span> <span class="kd">volatile</span> <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;[]</span> <span class="n">table</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">float</span> <span class="n">loadFactor</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>详细解释一下 Segment 里面的成员变量的意义：</p>

<ul>
<li>count：Segment 中元素的数量</li>
<li>modCount：对 table 的大小造成影响的操作的数量（比如 put 或者 remove 操作）</li>
<li>threshold：阈值，Segment 里面元素的数量超过这个值依旧就会对 Segment 进行扩容</li>
<li>table：链表数组，数组中的每一个元素代表了一个链表的头部</li>
<li>loadFactor：负载因子，用于确定 threshold</li>
</ul>


<h3>ConcurrentHashMap 的初始化</h3>

<p>下面我们来结合源代码来具体分析一下 ConcurrentHashMap 的实现，先看下初始化方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">ConcurrentHashMap</span><span class="o">(</span><span class="kt">int</span> <span class="n">initialCapacity</span><span class="o">,</span>
</span><span class='line'>                         <span class="kt">float</span> <span class="n">loadFactor</span><span class="o">,</span> <span class="kt">int</span> <span class="n">concurrencyLevel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!(</span><span class="n">loadFactor</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">||</span> <span class="n">initialCapacity</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">concurrencyLevel</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">concurrencyLevel</span> <span class="o">&gt;</span> <span class="n">MAX_SEGMENTS</span><span class="o">)</span>
</span><span class='line'>        <span class="n">concurrencyLevel</span> <span class="o">=</span> <span class="n">MAX_SEGMENTS</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Find power-of-two sizes best matching arguments</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sshift</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ssize</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">ssize</span> <span class="o">&lt;</span> <span class="n">concurrencyLevel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">++</span><span class="n">sshift</span><span class="o">;</span>
</span><span class='line'>        <span class="n">ssize</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">segmentShift</span> <span class="o">=</span> <span class="mi">32</span> <span class="o">-</span> <span class="n">sshift</span><span class="o">;</span>
</span><span class='line'>    <span class="n">segmentMask</span> <span class="o">=</span> <span class="n">ssize</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">segments</span> <span class="o">=</span> <span class="n">Segment</span><span class="o">.</span><span class="na">newArray</span><span class="o">(</span><span class="n">ssize</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">initialCapacity</span> <span class="o">&gt;</span> <span class="n">MAXIMUM_CAPACITY</span><span class="o">)</span>
</span><span class='line'>        <span class="n">initialCapacity</span> <span class="o">=</span> <span class="n">MAXIMUM_CAPACITY</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">initialCapacity</span> <span class="o">/</span> <span class="n">ssize</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">*</span> <span class="n">ssize</span> <span class="o">&lt;</span> <span class="n">initialCapacity</span><span class="o">)</span>
</span><span class='line'>        <span class="o">++</span><span class="n">c</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">cap</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">cap</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">)</span>
</span><span class='line'>        <span class="n">cap</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="o">.</span><span class="na">segments</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">segments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Segment</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;(</span><span class="n">cap</span><span class="o">,</span> <span class="n">loadFactor</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CurrentHashMap 的初始化一共有三个参数，一个 initialCapacity，表示初始的容量，一个 loadFactor，表示负载参数，最后一个是 concurrentLevel，代表 ConcurrentHashMap 内部的 Segment 的数量，ConcurrentLevel 一经指定，不可改变，后续如果 ConcurrentHashMap 的元素数量增加导致 ConrruentHashMap 需要扩容，ConcurrentHashMap 不会增加 Segment 的数量，而只会增加 Segment 中链表数组的容量大小，这样的好处是扩容过程不需要对整个 ConcurrentHashMap 做 rehash，而只需要对 Segment 里面的元素做一次 rehash 就可以了。</p>

<p>整个 ConcurrentHashMap 的初始化方法还是非常简单的，先是根据 concurrentLevel 来 new 出 Segment，这里 Segment 的数量是不小于 concurrentLevel 的最大的 2 的指数，就是说 Segment 的数量永远是 2 的指数个，这样的好处是方便采用移位操作来进行 hash，加快 hash 的过程。接下来就是根据 intialCapacity 确定 Segment 的容量的大小，每一个 Segment 的容量大小也是 2 的指数，同样是为了加快 hash 的过程。</p>

<p>这边需要特别注意一下两个变量，分别是 segmentShift 和 segmentMask，这两个变量在后面将会起到很大的作用，假设构造函数确定了 Segment 的数量是 2 的 n 次方，那么 segmentShift 就等于 32 减去 n，而 segmentMask 就等于 2 的 n 次方减一。</p>

<h3>ConcurrentHashMap 的 get 操作</h3>

<p>前面提到过 ConcurrentHashMap 的 get 操作是不用加锁的，我们这里看一下其实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">segmentFor</span><span class="o">(</span><span class="n">hash</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看第三行，segmentFor 这个函数用于确定操作应该在哪一个 segment 中进行，几乎对 ConcurrentHashMap 的所有操作都需要用到这个函数，我们看下这个函数的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">Segment</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">segmentFor</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">segments</span><span class="o">[(</span><span class="n">hash</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">segmentShift</span><span class="o">)</span> <span class="o">&amp;</span> <span class="n">segmentMask</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个函数用了位操作来确定 Segment，根据传入的 hash 值向右无符号右移 segmentShift 位，然后和 segmentMask 进行与操作，结合我们之前说的 segmentShift 和 segmentMask 的值，就可以得出以下结论：假设 Segment 的数量是 2 的n次方，根据元素的 hash 值的高 n 位就可以确定元素到底在哪一个 Segment 中。</p>

<p>在确定了需要在哪一个 segment 中进行操作以后，接下来的事情就是调用对应的 Segment 的 get 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// read-volatile</span>
</span><span class='line'>        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">getFirst</span><span class="o">(</span><span class="n">hash</span><span class="o">);</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">V</span> <span class="n">v</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">v</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">v</span><span class="o">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="nf">readValueUnderLock</span><span class="o">(</span><span class="n">e</span><span class="o">);</span> <span class="c1">// recheck</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先看第二行代码，这里对 count 进行了一次判断，其中 count 表示 Segment 中元素的数量，我们可以来看一下 count 的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">transient</span> <span class="kd">volatile</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到 count 是 volatile 的，实际上这里里面利用了 volatile 的语义：</p>

<blockquote><p>对volatile字段的写入操作happens-before于每一个后续的同一个字段的读操作。</p></blockquote>

<p>因为实际上 put、remove 等操作也会更新 count 的值，所以当竞争发生的时候， volatile 的语义可以保证写操作在读操作之前，也就保证了写操作对后续的读操作都是可见的，这样后面 get 的后续操作就可以拿到完整的元素内容。</p>

<p>然后，在第三行，调用了 getFirst() 来取得链表的头部：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">getFirst</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;[]</span> <span class="n">tab</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tab</span><span class="o">[</span><span class="n">hash</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">tab</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样，这里也是用位操作来确定链表的头部，hash 值和 HashTable 的长度减一做与操作，最后的结果就是 hash 值的低 n 位，其中 n 是 HashTable 的长度以 2 为底的结果。</p>

<p>在确定了链表的头部以后，就可以对整个链表进行遍历，看第 4 行，取出 key 对应的 value 的值，如果拿出的 value 的值是 null，则可能这个 key，value 对正在 put 的过程中，如果出现这种情况，那么就加锁来保证取出的 value 是完整的，如果不是 null，则直接返回 value。</p>

<h3>ConcurrentHashMap 的 put 操作</h3>

<p>看完了 get 操作，再看下 put 操作，put 操作的前面也是确定 Segment 的过程，这里不再赘述，直接看关键的 segment 的 put 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">V</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">onlyIfAbsent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">lock</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">c</span><span class="o">++</span> <span class="o">&gt;</span> <span class="n">threshold</span><span class="o">)</span> <span class="c1">// ensure capacity</span>
</span><span class='line'>            <span class="n">rehash</span><span class="o">();</span>
</span><span class='line'>        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;[]</span> <span class="n">tab</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">hash</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">tab</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">first</span> <span class="o">=</span> <span class="n">tab</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
</span><span class='line'>        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">!=</span> <span class="n">hash</span> <span class="o">||</span> <span class="o">!</span><span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)))</span>
</span><span class='line'>            <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">V</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">oldValue</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">onlyIfAbsent</span><span class="o">)</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">oldValue</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="o">++</span><span class="n">modCount</span><span class="o">;</span>
</span><span class='line'>            <span class="n">tab</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">first</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>            <span class="n">count</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span> <span class="c1">// write-volatile</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">unlock</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先对 Segment 的 put 操作是加锁完成的，然后在第五行，如果 Segment 中元素的数量超过了阈值（由构造函数中的 loadFactor 算出）这需要进行对 Segment 扩容，并且要进行 rehash，关于 rehash 的过程大家可以自己去了解，这里不详细讲了。</p>

<p>第 8 和第 9 行的操作就是 getFirst 的过程，确定链表头部的位置。</p>

<p>第 11 行这里的这个 while 循环是在链表中寻找和要 put 的元素相同 key 的元素，如果找到，就直接更新更新 key 的 value，如果没有找到，则进入 21 行这里，生成一个新的 HashEntry 并且把它加到整个 Segment 的头部，然后再更新 count 的值。</p>

<h3>ConcurrentHashMap 的 remove 操作</h3>

<p>Remove 操作的前面一部分和前面的 get 和 put 操作一样，都是定位 Segment 的过程，然后再调用 Segment 的 remove 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">V</span> <span class="nf">remove</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">lock</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;[]</span> <span class="n">tab</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">hash</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">tab</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">first</span> <span class="o">=</span> <span class="n">tab</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
</span><span class='line'>        <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">!=</span> <span class="n">hash</span> <span class="o">||</span> <span class="o">!</span><span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)))</span>
</span><span class='line'>            <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">V</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">V</span> <span class="n">v</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">value</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">v</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">oldValue</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
</span><span class='line'>                <span class="c1">// All entries following removed node can stay</span>
</span><span class='line'>                <span class="c1">// in list, but all preceding ones need to be</span>
</span><span class='line'>                <span class="c1">// cloned.</span>
</span><span class='line'>                <span class="o">++</span><span class="n">modCount</span><span class="o">;</span>
</span><span class='line'>                <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">newFirst</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span> <span class="n">p</span> <span class="o">!=</span> <span class="n">e</span><span class="o">;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">newFirst</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashEntry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;(</span><span class="n">p</span><span class="o">.</span><span class="na">key</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">hash</span><span class="o">,</span>
</span><span class='line'>                                                  <span class="n">newFirst</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>                <span class="n">tab</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">newFirst</span><span class="o">;</span>
</span><span class='line'>                <span class="n">count</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span> <span class="c1">// write-volatile</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">unlock</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先 remove 操作也是确定需要删除的元素的位置，不过这里删除元素的方法不是简单地把待删除元素的前面的一个元素的 next 指向后面一个就完事了，我们之前已经说过 HashEntry 中的 next 是 final 的，一经赋值以后就不可修改，在定位到待删除元素的位置以后，程序就将待删除元素前面的那一些元素全部复制一遍，然后再一个一个重新接到链表上去，看一下下面这一幅图来了解这个过程：</p>

<p><img src="http://pic.yupoo.com/goldendoc/Ba3OfBv8/medish.jpg" alt="image" /></p>

<p>假设链表中原来的元素如上图所示，现在要删除元素 3，那么删除元素 3 以后的链表就如下图所示：</p>

<p><img src="http://pic.yupoo.com/goldendoc/Ba3OfPQE/medish.jpg" alt="image" /></p>

<h3>ConcurrentHashMap 的 size 操作</h3>

<p>在前面的章节中，我们涉及到的操作都是在单个 Segment 中进行的，但是 ConcurrentHashMap 有一些操作是在多个 Segment 中进行，比如 size 操作，ConcurrentHashMap 的 size 操作也采用了一种比较巧的方式，来尽量避免对所有的 Segment 都加锁。</p>

<p>前面我们提到了一个 Segment 中的有一个 modCount 变量，代表的是对 Segment 中元素的数量造成影响的操作的次数，这个值只增不减，size 操作就是遍历了两次 Segment，每次记录 Segment 的 modCount 值，然后将两次的 modCount 进行比较，如果相同，则表示期间没有发生过写入操作，就将原先遍历的结果返回，如果不相同，则把这个过程再重复做一次，如果再不相同，则就需要将所有的 Segment 都锁住，然后一个一个遍历了，具体的实现大家可以看 ConcurrentHashMap 的源码，这里就不贴了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 并发编程 J.U.C 之 Condition]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/12/juc-condition/"/>
    <updated>2013-07-12T07:36:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/12/juc-condition</id>
    <content type="html"><![CDATA[<p><strong>此篇文章是作者两年前发布在<a href="http://www.goldendoc.org/2011/06/juc_condition/">黄金档</a>的文章。</strong></p>

<p>在上一篇中，我们了解了下 <a href="http://blog.khotyn.com/blog/2013/07/10/juc-lock-acquire-release/">J.U.C 的锁的获取与释放的过程</a>，这个过程主要通过在 A.Q.S 中维持一个等待队列来实现，其中我们也提到了，在 A.Q.S 中除了一个等待队列之外，还有一个 Condition 队列，在了解 Condition 队列之前，先来看一下 Condition 是怎么回事：</p>

<blockquote><p>The synchronizer framework provides a ConditionObject class for use by synchronizers that maintain exclusive synchronization and conform to the Lock interface. Any number of condition objects may be attached to a lock object, providing classic monitor-style await, signal, and signalAll operations, including those with timeouts, along with some inspection and monitoring methods.</p></blockquote>

<p>上面的这一段内容摘自 Doug Lea 的 <a href="http://gee.cs.oswego.edu/dl/papers/aqs.pdf">AQS 论文</a>，从上面这一段话可以看出，Condition 主要是为了在 J.U.C 框架中提供和 Java 传统的监视器风格的 wait，notify 和 notifyAll 方法类似的功能，那么先来解释一下这三个方法的作用：</p>

<ul>
<li>Object.wait() 方法：使当前线程释放 Object 上的监视器并且挂起，直到有另外的线程调用 Object.notify() 方法或者 Object.notifyAll() 方法唤醒当前线程，当被唤醒后，Object.wait() 方法会尝试重新获取监视器，成功获取后继续往下执行。注意 Object.wait() 方法只有在当前线程持有 Object 的监视器的时候才能够调用，不然会抛出异常。</li>
<li>Object.notify() 方法：用于唤醒另外一个调用了 Object.wait() 方法的线程，如果有多个都调用了 Object.wait() 方法，那么就会选择一个线程去 notify()，具体选择哪一个和具体的实现有关，当前线程在调用 Object.notify() 方法以后会就释放Object的监视器，和 wait() 方法一样，Object.notify() 方法只有在当前线程持有 Object 的监视器的时候才能够调用，不然就会抛出异常。</li>
<li>Object.notifyAll() 方法：唤醒所有调用了 Object.wait() 方法的线程，如果有多个线程调用了 Object.wait() 方法，那么就会引发这些线程之间的竞争，最后谁成功获取到 Object 的监视器和具体的实现有关，当前线程在调用 Object.notifyAll() 方法以后会就释放 Object 的监视器，和 wait() 方法一样，Object.notifyAll() 方法只有在当前线程只有 Object 的监视器的时候才能够调用，不然就会抛出异常。</li>
</ul>


<p>那么 Condition 是如何实现 wait，notify 和 notifyAll 方法的功能呢？我们接下来看：</p>

<p>在 Condition 中，wait，notify 和 notifyAll 方法分别对应了 await，signal 和 signalAll 方法，当然 Condition 也提供了超时的、不可被中断的 await() 方法，不过我们主要还是看一看 await，notify 和 notifyAll 的实现，先看 await：</p>

<h3>await 方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">await</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">interrupted</span><span class="o">())</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">InterruptedException</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="n">addConditionWaiter</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">savedState</span> <span class="o">=</span> <span class="n">fullyRelease</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">interruptMode</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(!</span><span class="n">isOnSyncQueue</span><span class="o">(</span><span class="n">node</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LockSupport</span><span class="o">.</span><span class="na">park</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">interruptMode</span> <span class="o">=</span> <span class="n">checkInterruptWhileWaiting</span><span class="o">(</span><span class="n">node</span><span class="o">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">acquireQueued</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">savedState</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">interruptMode</span> <span class="o">!=</span> <span class="n">THROW_IE</span><span class="o">)</span>
</span><span class='line'>        <span class="n">interruptMode</span> <span class="o">=</span> <span class="n">REINTERRUPT</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">nextWaiter</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="n">unlinkCancelledWaiters</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">interruptMode</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>        <span class="n">reportInterruptAfterWait</span><span class="o">(</span><span class="n">interruptMode</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>整个 await 的过程如下：</p>

<ul>
<li>在第 2 行处，如果当前线程被中断，则抛出中断异常。</li>
<li>在第 4 行处，将节点加入到 Condition 队列中去，这里如果 lastWaiter 是 cancel 状态，那么会把它踢出 Condition 队列。</li>
<li>在第 5 行处，调用 tryRelease，释放当前线程的锁</li>
<li>在第 7 行处，判断节点是否在等待队列中（signal 操作会将 Node 从 Condition 队列中拿出并且放入到等待队列中去），如果不在等待队列中了，就 park 当前线程，如果在，就退出循环，这个时候如果被中断，那么就退出循环</li>
<li>在第 12 行处，这个时候线程已经被 signal() 或者 signalAll() 操作给唤醒了，退出了 4 中的 while 循环，尝试再次获取锁，调用 acquireQueued 方法。</li>
</ul>


<p>可以看到，这个 await 的操作过程和 Object.wait() 方法是一样，只不过 await() 采用了 Condition 队列的方式实现了 Object.wait() 的功能。</p>

<h3>signal 和 signalAll 方法</h3>

<p>在了解了 await 方法的实现以后，signal 和 signalAll 方法的实现就相对简单了，先看看 signal 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">signal</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">isHeldExclusively</span><span class="o">())</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalMonitorStateException</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">first</span> <span class="o">=</span> <span class="n">firstWaiter</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">first</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="n">doSignal</span><span class="o">(</span><span class="n">first</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里先判断当前线程是否持有锁，如果没有持有，则抛出异常，然后判断整个 condition 队列是否为空，不为空则调用 doSignal 方法来唤醒线程，看看 doSignal 方法都干了一些什么：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">doSignal</span><span class="o">(</span><span class="n">Node</span> <span class="n">first</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="o">(</span><span class="n">firstWaiter</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="na">nextWaiter</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="n">lastWaiter</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">first</span><span class="o">.</span><span class="na">nextWaiter</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">transferForSignal</span><span class="o">(</span><span class="n">first</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>             <span class="o">(</span><span class="n">first</span> <span class="o">=</span> <span class="n">firstWaiter</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个 while 循环的作用就是将 firstWaiter 往 Condition 队列的后面移一位，并且唤醒 first，看看 while 循环中 tranferForSignal：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">transferForSignal</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * If cannot change waitStatus, the node has been cancelled.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">compareAndSetWaitStatus</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">Node</span><span class="o">.</span><span class="na">CONDITION</span><span class="o">,</span> <span class="mi">0</span><span class="o">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Splice onto queue and try to set waitStatus of predecessor to</span>
</span><span class='line'><span class="cm">     * indicate that thread is (probably) waiting. If cancelled or</span>
</span><span class='line'><span class="cm">     * attempt to set waitStatus fails, wake up to resync (in which</span>
</span><span class='line'><span class="cm">     * case the waitStatus can be transiently and harmlessly wrong).</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">p</span> <span class="o">=</span> <span class="n">enq</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">waitStatus</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="o">!</span><span class="n">compareAndSetWaitStatus</span><span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">Node</span><span class="o">.</span><span class="na">SIGNAL</span><span class="o">))</span>
</span><span class='line'>        <span class="n">LockSupport</span><span class="o">.</span><span class="na">unpark</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">thread</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码的作用就是修改 Node 的 waitStatus 为 0，然后将 Node 插入到等待队列中，并且唤醒 Node。</p>

<p>signalAll 和 signal 方法类似，主要的不同在于它不是调用 doSignal 方法，而是调用 doSignalAll 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">doSignalAll</span><span class="o">(</span><span class="n">Node</span> <span class="n">first</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">lastWaiter</span> <span class="o">=</span> <span class="n">firstWaiter</span>  <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">next</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="na">nextWaiter</span><span class="o">;</span>
</span><span class='line'>        <span class="n">first</span><span class="o">.</span><span class="na">nextWaiter</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">transferForSignal</span><span class="o">(</span><span class="n">first</span><span class="o">);</span>
</span><span class='line'>        <span class="n">first</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">first</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法就相当于把 Condition 队列中的所有 Node 全部取出插入到等待队列中去。</p>

<h3>总结</h3>

<p>在了解了 await，signal 和 signalAll 方法的实现以后，我们再来通过一副 gif 动画来看一看这一个整体的过程：</p>

<p><img src="http://farm3.staticflickr.com/2888/9263654699_6b959eecb2_o.gif" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 并发编程 J.U.C 之锁的获取与释放]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/10/juc-lock-acquire-release/"/>
    <updated>2013-07-10T20:14:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/10/juc-lock-acquire-release</id>
    <content type="html"><![CDATA[<p><strong>此篇文章是作者两年前发表在<a href="http://www.goldendoc.org/2011/06/lock_acquire_release/">黄金档</a>的文章。</strong></p>

<p>上一篇文章中，我们对 <a href="http://www.goldendoc.org/2011/05/juc/">J.U.C 的一些大概的情况</a>做了了解，在这一篇文章我们将来以 ReentrantLock 为例，来分析一下锁的获取和释放的过程，让大家能够对锁的获取和释放的整体过程有一个了解。</p>

<h3>一、锁的获取</h3>

<p>先看下 ReentrantLock 的 lock() 方法，整个方法只有一行，调用 acquire 方法，看看 acquire 方法的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">acquire</span><span class="o">(</span><span class="kt">int</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">tryAcquire</span><span class="o">(</span><span class="n">arg</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="n">acquireQueued</span><span class="o">(</span><span class="n">addWaiter</span><span class="o">(</span><span class="n">Node</span><span class="o">.</span><span class="na">EXCLUSIVE</span><span class="o">),</span> <span class="n">arg</span><span class="o">))</span>
</span><span class='line'>        <span class="n">selfInterrupt</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码的实现也是比较简洁，先尝试一次 tryAcquire 操作，如果失败，则把当前线程加入到同步队列中去，这个时候可能会反复的阻塞与唤醒这个线程，直到后续的 tryAcquire（看 acquireQueued 的实现）操作成功。</p>

<p>再看看 tryAcquire 的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">tryAcquire</span><span class="o">(</span><span class="kt">int</span> <span class="n">acquires</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Thread</span> <span class="n">current</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getState</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isFirst</span><span class="o">(</span><span class="n">current</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="n">compareAndSetState</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">acquires</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">setExclusiveOwnerThread</span><span class="o">(</span><span class="n">current</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">current</span> <span class="o">==</span> <span class="n">getExclusiveOwnerThread</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">nextc</span> <span class="o">=</span> <span class="n">c</span> <span class="o">+</span> <span class="n">acquires</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">nextc</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Error</span><span class="o">(</span><span class="s">&quot;Maximum lock count exceeded&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setState</span><span class="o">(</span><span class="n">nextc</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码是尝试获取锁的过程，它先判断当前的 AQS 的 state 值，如果为 0，则表示该锁没有被持有过，如果这个时候同步队列是空的或者当前线程就是在同步队列的头部，那么修改 state 的值，并且设置排他锁的持有线程为当前线程</p>

<p>如果大于 0，则判断当前线程是否是排他锁的持有线程，如果是，那么把 state 值加 1（注意 state 是 int 类型的，所以 state 的最大值是就是 int 的最大值）</p>

<p>如果第一次 tryAcquire() 操作失败，那么就把当前线程加入到等待队列中去，看 addWaiter() 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Node</span> <span class="nf">addWaiter</span><span class="o">(</span><span class="n">Node</span> <span class="n">mode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">(),</span> <span class="n">mode</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// Try the fast path of enq; backup to full enq on failure</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">pred</span> <span class="o">=</span> <span class="n">tail</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">pred</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">node</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">pred</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">compareAndSetTail</span><span class="o">(</span><span class="n">pred</span><span class="o">,</span> <span class="n">node</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">pred</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">node</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">enq</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码中先尝试了一下了下 enq() 方法中等待队列不为空的情况，如果失败，再调用 enq() 方法将当前线程加入等待队列，enq() 的过程我们已经在上一篇文章中讲过了，不再赘述。</p>

<p>最后在当前线程被加入到等待队列中去以后，再调用 acquireQueued 去获取锁，看看 acquireQueued 的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">acquireQueued</span><span class="o">(</span><span class="kd">final</span> <span class="n">Node</span> <span class="n">node</span><span class="o">,</span> <span class="kt">int</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">interrupted</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(;;)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">Node</span> <span class="n">p</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">predecessor</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">head</span> <span class="o">&amp;&amp;</span> <span class="n">tryAcquire</span><span class="o">(</span><span class="n">arg</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setHead</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
</span><span class='line'>                <span class="n">p</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// help GC</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">interrupted</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">shouldParkAfterFailedAcquire</span><span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="n">node</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="n">parkAndCheckInterrupt</span><span class="o">())</span>
</span><span class='line'>                <span class="n">interrupted</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RuntimeException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">cancelAcquire</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">ex</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码中拿到当前线程在同步队列中的前面一个节点，如果这个节点是是头部，那么马上进行一次 tryAcquire 操作，如果操作成功，那么把当前线程弹出队列，整个操作就此结束。如果这个节点不是头部或者说 tryAcquire 操作失败的话，那么就判断是不是要将当前线程给阻塞掉（shouldParkAfterFailedAcquire）方法：判断当前线程是否应该被阻塞掉，实际上判断的是当前线程的前一个节点的状态，如果前一个节点的状态小于 0（condition 或者 signal），那么返回 true，阻塞当前线程；如果前一个节点的状态大于 0（cancelled），则向前遍历，直到找到一个节点状态不大于 0 的节点，并且将中间的 cancelled 状态的节点全部踢出队列；如果前一个节点的状态等于 0，那么将其状态置为 -1（signal），并且返回 false，等待下一次循环的时候再阻塞。</p>

<p><strong>整个锁的获取过程就是这样，我们再来总结一下整个过程</strong>：acquire() 方法会先调用一次 tryAcquire 方法获取一次锁，如果失败，则把当前线程加入到等待队列中去，然后再调用 acquireQueued 获取锁，acquireQueued 在当前节点不在头部的时候会把当前线程的前一个结点的状态置为 SIGNAL，然后阻塞当前线程。当当前线程到了队列的头部的时候，那么获取锁的操作就会成功返回。</p>

<h3>二、锁的释放</h3>

<p>首先，我们知道在 acquireQueued 方法中，如果一个线程成功获取到了锁，那么它就应该是整个等待队列的 head 节点，然后，我们再来看一看 unlock() 方法，和 lock() 方法一样，unlock() 方法也是只有一行代码，直接调用 release() 方法，我们看看 release() 方法的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">release</span><span class="o">(</span><span class="kt">int</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">tryRelease</span><span class="o">(</span><span class="n">arg</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">h</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">h</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">.</span><span class="na">waitStatus</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="n">unparkSuccessor</span><span class="o">(</span><span class="n">h</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个过程首先调用 tryRelease 方法，如果锁已经完全释放，那么就唤醒下一个节点，先来看看 tryRelease 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">tryRelease</span><span class="o">(</span><span class="kt">int</span> <span class="n">releases</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getState</span><span class="o">()</span> <span class="o">-</span> <span class="n">releases</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">!=</span> <span class="n">getExclusiveOwnerThread</span><span class="o">())</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalMonitorStateException</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">free</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">free</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">setExclusiveOwnerThread</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">setState</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">free</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码首先获取当前 AQS 的 state 状态并且将其值减一，如果结果等于 0（锁已经被完全释放），那么将排他锁的持有线程置为 null。将 AQS 的 state 状态置为减一后的结果。</p>

<p>然后再看看唤醒继任节点的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">unparkSuccessor</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compareAndSetWaitStatus</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">Node</span><span class="o">.</span><span class="na">SIGNAL</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">s</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">waitStatus</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Node</span> <span class="n">t</span> <span class="o">=</span> <span class="n">tail</span><span class="o">;</span> <span class="n">t</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">t</span> <span class="o">!=</span> <span class="n">node</span><span class="o">;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">prev</span><span class="o">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">waitStatus</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>                <span class="n">s</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="n">LockSupport</span><span class="o">.</span><span class="na">unpark</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">thread</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码先清除当前节点的 waitStatus 为 0，然后判断下一个节点是不是 null 或者 cancelled 的状态，如果是，则从队列的尾部往前开始找，找到一个非 cancelled 状态的节点，最后唤醒这个节点。</p>

<p><strong>最后，总结一下释放操作的整个过程</strong>：其实整个释放过程就做了两件事情，一个是将state值减1，然后就是判断锁是否被完全释放，如果被完全释放，则唤醒继任节点。</p>

<h3>三、整体过程描述</h3>

<p>看了上面的锁的获取与释放操作以后，整体过程还是比较清晰的，在文章的最后，我们把获取与释放操作串在一起在简单看一下：</p>

<ul>
<li>获取锁的时候将当前线程放入同步队列，并且将前一个节点的状态置为 signal 状态，然后阻塞</li>
<li>当这个节点的前一个节点成功获取到锁，前一个节点就成了整个同步队列的 head。</li>
<li>当前一个节点释放锁的时候，它就唤醒当前线程的这个节点，然后当前线程的节点就可以成功获取到锁了</li>
<li>这个时候它就到整个队列的头部了，然后 release 操作的时候又可以唤醒下一个。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash Job Control]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/10/bash-job-control/"/>
    <updated>2013-07-10T19:43:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/10/bash-job-control</id>
    <content type="html"><![CDATA[<p>这两天在给 <a href="https://github.com/khotyn/hotcode">HotCode</a> 写<a href="https://github.com/khotyn/hotcode/blob/master/test.sh">测试脚本</a>，其中用到了 Bash 的任务控制功能，说白了就是把一个任务放到后台，拉到前台之类的操作，这里做一下总结。</p>

<h3>开启任务控制</h3>

<p>首先，如果要在 Bash 脚本中使用 Bash 的任务控制功能，必须先执行下面这个命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set</span> -m
</span></code></pre></td></tr></table></div></figure>


<p>这个命令的意思其实就是开启 Bash 的任务控制功能，见 Bash Manual 的 <a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html">The Set Buildin</a>。</p>

<h3>把任务放到后台执行</h3>

<p>要把任务放到后台非常容易，只要在命令后面加入一个 <code>&amp;</code> 即可，像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash test.sh &amp;
</span></code></pre></td></tr></table></div></figure>


<p>命令的输出类似于这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>1<span class="o">]</span> 51668
</span></code></pre></td></tr></table></div></figure>


<p>其中前面的 <code>[1]</code> 代表的是这个任务的任务编号，而 <code>51668</code> 则是这个任务的进程 ID。</p>

<h3>查看在后台执行的任务的执行情况</h3>

<p><code>jobs</code> 命令可以查看在后台执行的任务的情况</p>

<p>它的输出类似于下面这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>1<span class="o">]</span>  + running    bash test.sh
</span></code></pre></td></tr></table></div></figure>


<p>前面的 <code>[1]</code> 就是任务编号，后面的 <code>running</code> 表示任务当前运行的状态。</p>

<p><code>jobs</code> 命令后面可以加一些参数，比如下面这些：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">jobs</span> -r <span class="c">###只输出正在运行的任务</span>
</span><span class='line'><span class="nb">jobs</span> -s <span class="c">###只输出已经执行完的任务</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体看 <a href="https://www.gnu.org/software/bash/manual/html_node/Job-Control-Builtins.html#Job-Control-Builtins">Job Control Buildins</a>。</p>

<h3>把任务调度到前台</h3>

<p>要把任务调度到前台只要用 <code>fg</code> 命令就可以，后面加上一个任务编号表示要把哪个后台任务调度到前台：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">fg</span> %1
</span></code></pre></td></tr></table></div></figure>


<p>上面这个命令就是把任务编号为 1 的任务调度到前台。</p>

<p>Bash 的任务调度还是比较简单的，不过的确是非常地有用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[成就达成：4clojure 题目全破！]]></title>
    <link href="http://khotyn.github.com/blog/2013/06/21/4clojure/"/>
    <updated>2013-06-21T22:09:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/06/21/4clojure</id>
    <content type="html"><![CDATA[<p>经过了一个多月的努力，终于将 <a href="http://www.4clojure.com/">4clojure.com</a> 上面的的题目全部解出了，经过这段时间不断地用 clojure，对 Clojure 也有了一些基本的认识，目前让我觉得 clojure 强大的地方在于：</p>

<ul>
<li>和命令式语言完全不同的编程方式，编程过程就像是不断地数据转换的过程，它给你的感觉就像是进入了一个完全不同的世界一样。</li>
<li>“惰性求值 + 无限序列”很好很强大~，比如在产生斐波那契数列或者是素数序列的时候都非常有用。</li>
</ul>


<p>也说说几点不满意的地方：</p>

<ul>
<li>括号比较多，不过这个也是没有办法，有良好的编译器的话这个问题也不算是问题啦。</li>
<li>异常比较难看懂，不知道是不是我是新手的原因，觉得 clojure 的异常不容易懂，clojure 的代码里面常常一行包括非常多的代码，做了很多的事情，单单看异常还看不错出错的地方在哪里。</li>
</ul>


<p>总之，经过这段时间在 <a href="http://www.4clojure.com/">4clojure.com</a> 上的学习，算是对 clojure 的基本语法，核心函数等东西有了一个基本的掌握，后面会尝试用 clojure 做一些实际的东西，至于做什么，还没有想好。</p>

<p>另外，我已经将我的 4clojure 题目的答案都放到了 github 上，地址是：<a href="https://github.com/khotyn/4clojure-answer">https://github.com/khotyn/4clojure-answer</a>， 如果大家在解题的过程中遇到了什么困难，可以看看我的答案，当然，我的很多答案都是有臭又长，大家有更精简的答案欢迎一起交流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[贡嘎全线徒步穿越 -- Part Two]]></title>
    <link href="http://khotyn.github.com/blog/2013/05/12/gongga-hiking-part-two/"/>
    <updated>2013-05-12T21:24:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/05/12/gongga-hiking-part-two</id>
    <content type="html"><![CDATA[<p>贡嘎全线穿越第一篇见：<a href="http://blog.khotyn.com/blog/2013/05/07/gongga-hiking-part-one/">http://blog.khotyn.com/blog/2013/05/07/gongga-hiking-part-one/</a></p>

<h3>Day Four</h3>

<p>昨晚睡得非常舒服，一扫了昨日的疲惫，可是天公不作美，山上的云看起来很厚，有点担心今天能否看到贡嘎主峰。一行人吃过了早餐（那个饼子在烤过以后非常好吃，不过忘记了叫什么名字）便搭车前往子梅垭口了，车子到了海拔 4400 米的地方便上不去了，上面全是雪，今天我和其他的几个打算在子梅垭口露营的人背的都是重装，到子梅垭口 200 米的海拔走起来还是有点累的，到达子梅垭口的时候能见度已经非常地差了，人稍微站远一点就看不到了，在子梅垭口待了一会儿，我们又遇到了昨天的那两个重装的哥们了，那两个哥们昨天就已经上来了，没有看到贡嘎主峰，然后下山了，今天又上来了，还是没有看到，只能说运气真不好。</p>

<p><img src="http://pic.yupoo.com/khotyn/CR5hnMdS/medish.jpg" alt="image" /></p>

<p>因为今天的风比较大，所以我们只能选择了在老子梅垭口扎营，老子梅垭口离子梅垭口大概有几百米的路程，那个有一个小木屋，挡风很好，我们把帐篷搭载了小木屋的里面，木屋里面还有一些木头，领队小胖把木头砸碎，准备生个火出来给大家暖和暖和，这时候，来了一个藏族人，看到我们整准备取火，便说那些木头是他的，不能烧，我们很无奈，只能表示不烧了，接着他又表示：“这些木头不是我的，也不是书记的，这些木头是贡嘎寺的，任何人向你们要钱，你们千万都不能给。我理解你们现在挺冷的，烧一点也是可以的，大家要相互理解嘛，但是不能烧太多。”，我们听了以后很无奈，只能连声称是。</p>

<p><img src="http://pic.yupoo.com/khotyn/CR5jdI0N/medish.jpg" alt="image" /></p>

<p>火烧起来以后驱走了不少的寒气，手脚都暖和了许多，外面已经开始下雪，能见度还是很低，老驴米兰给我们讲了他去过的一些地方：格列，木里，七藏沟，年保玉则，稻城，亚丁，雨崩等地方，还给我们看了很多照片，真美，不过四川这边的山水大多数秋天的时候最美，要全部都走一边得花好几年呢。</p>

<p><img src="http://pic.yupoo.com/khotyn/CR5n04ZN/medish.jpg" alt="image" /></p>

<h3>Day Five</h3>

<p>昨晚睡得非常难受，头都快爆炸了，在海拔 4600 的地方露营果然是自找麻烦。早上起来，外面的天气没有丝毫地好转，昨晚下了一晚上的雪，路上的脚印已经消失地无影无踪了，不知道下山的路还能不能找到了。简单地吃过早餐，领队小胖开始出去找路，其实只要找到公路就好，顺着公路下山就可以，过了大约 20 分钟，小胖成功找到了公路的位置，我们顺着他的脚印走下去，每走一步雪都没到了膝盖。</p>

<p><img src="http://pic.yupoo.com/khotyn/CR5pRNsJ/medish.jpg" alt="image" /></p>

<p>到了公路后几个人发疯似地往下狂走，深怕这么大的雪下不去到底该怎么办，到了海拔 4100 米左右的地方，视野还是开阔起来，另我们惊奇的是，虽然没有看到贡嘎主峰，但是这雪后的雪山景色也是非常美丽的，让人感觉到真是不虚此行。</p>

<p><img src="http://pic.yupoo.com/khotyn/CR5rkaaF/medish.jpg" alt="image" /></p>

<p>再往下走就到了上子梅村，这个村子比我想象中地要小很多，只有三户人家，不过坐落在世外桃源里面，也算是不错了。</p>

<p><img src="http://pic.yupoo.com/khotyn/CR5sy9rW/medish.jpg" alt="image" /></p>

<p>可能是早上下山的路走地太急，费了不少地体力，下午从上子梅村走到下子梅村的时候有点累，快到下子梅的时候路过一个小学：“驴爱次梅小学”，我们的前面说到的陈老师就在这里面教书。见到陈老师比我想象中的要年轻，聊过以后知道他是 90 年的，今年只有 23 岁，去年刚刚大学毕业，本想只是跑到这边来看一看的，没想到竟然走不成了。这边官方没有小学，想要上小学就只能走很多的路到镇里面去，这个时候住宿是最好的选择，但是很多藏民一年的收入并不能负担起孩子的住宿费用，所以就只能让孩子辍学了。问起他在这里工作生活地一些困难，他说一个是冬天食物不足，这个小山村走出去得一天的时间，小孩子们的课又不能不少，他冬天食物最匮乏的时候曾经抓老鼠吃；另一个就是书记和村长对他的工作不支持，刚开始书记和村长还以为他是来搞投资的，因为在他们的观念里面，一个人不可能无缘无故地就跑到这么个偏僻的地方教书。书记和村长的孩子们都在外面读书，他们不怎么关心其他本村的孩子的教育情况。其实也有很多人对这里的教育进行资助，但是很多善款都被书记和村长贪掉了。这么偏僻的地方其实最缺的就是老师，一个老师一走，学校也就关了。</p>

<p><img src="http://pic.yupoo.com/khotyn/CR5xGkrX/medish.jpg" alt="image" /></p>

<p>晚上，我们邀请了陈老师来和我们一起吃饭，看他吃饭的样子应该是经常受饥饿的，有那种对食物的渴望在。因为第二天就要出去了，所以我们给自己剩了一天的路粮，其他的食物就给陈老师了，希望尽一点自己的绵薄之力。</p>

<p><img src="http://pic.yupoo.com/khotyn/CR5yLZi4/medish.jpg" alt="image" /></p>

<h3>Day Six</h3>

<p>昨晚也睡得很好，不用露营真是太好了，今天早上天气很不错，可是我只能在心里暗骂好天气为什么不早一天到来呢，为了看到贡嘎主峰，我一定要再来一次贡嘎全线穿越。</p>

<p>今天已经是徒步的最后一天了，行程相对比较轻松，我们乘拖拉机到了巴望海（这边的人叫湖为海子，做拖拉机屁股快被颠成两半儿了），本来巴望海也是一个拥有很美景色的地方，但是那些美景只会在秋天才能出现。走过了巴望海，我们徒步走到了界碑石，然后坐车到了草科镇。</p>

<p><img src="http://pic.yupoo.com/khotyn/CR5Ddhlj/medish.jpg" alt="image" /></p>

<p>到草科以后总算是有信号了，赶紧给家里打了电话，住的地方有温泉，吃过晚饭以后泡了一个温泉非常舒服，之后，作为徒步的最后一天，大家一起吃了夜宵，聊得很 High。</p>

<h3>Day Seven</h3>

<p>今天一大早起来，从草科坐车到成都，路途比想象中要顺利，只花了三个小时。中午去九眼桥吃了滋味烤鱼，很不一样的滋味，很好吃，这半的烤鱼烤地很嫩，不像杭州的烤鱼，皮都是焦的。</p>

<p><img src="http://pic.yupoo.com/khotyn/CR5F31iM/medish.jpg" alt="image" /></p>

<p>下午到四川大学逛了一下，里面有一些学生正准备搭车去四川，很有想法。</p>

<p>晚上坐飞机飞回了杭州，飞机晚点，到达杭州已是半夜两点钟。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure 如何判断一个序列中是否存在某个元素]]></title>
    <link href="http://khotyn.github.com/blog/2013/05/09/clojure-element-in-seq/"/>
    <updated>2013-05-09T21:17:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/05/09/clojure-element-in-seq</id>
    <content type="html"><![CDATA[<p>最近一直在看 Clojure，经常碰到的一个问题是怎么判断一个序列中是否存在某个元素。对于这个问题的第一反应就是用<code>contains?</code>来判断，但是<code>contains?</code>的第二个参数是<code>key</code>而不是元素的值，对于 vector 或者 array 这样的数据结构不能做判断：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">user</span><span class="o">=</span>&gt; <span class="o">(</span>contains? <span class="err">&#39;</span><span class="o">(</span>101 102 103 104<span class="o">)</span> 101<span class="o">)</span>
</span><span class='line'><span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>另一个方法就是采用 set 配合 some 来做判断：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">user</span><span class="o">=</span>&gt; <span class="o">(</span>some <span class="c">#{101} &#39;(101 102 103 104))</span>
</span><span class='line'>101
</span></code></pre></td></tr></table></div></figure>


<p><code>some</code> 的函数原型是 <code>(some prev coll)</code>，它会对 coll 中的元素依次应用 prev 进行测试，返回第一个为真的元素，而用一个 set 进行测试，返回就是第一个包含在这个 set 中的元素，因此上面的那段表达式就返回了 101。</p>

<p>这样，只要上面这个表达式返回的不是<code>nil</code>，就表示元素在序列中了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[贡嘎全线徒步穿越 -- Part One]]></title>
    <link href="http://khotyn.github.com/blog/2013/05/07/gongga-hiking-part-one/"/>
    <updated>2013-05-07T22:13:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/05/07/gongga-hiking-part-one</id>
    <content type="html"><![CDATA[<p>清明节在家宅了三天，非常地不舒服，某日在内网看到了贡嘎徒步的召集贴，脑袋一热就报名了，前期买了很多的装备，做了一些准备，期间还四川还发生了地震，差点退缩了，不过最后还是出发了。</p>

<h3>Day One</h3>

<p>前一天从杭州飞到成都，一大早从成都出发，海拔一路上升，到康定进行了一些补给，到了一个叫老榆林的村庄，海拔 3200 米，住在藏人扎西的家里，这边的房子充满了藏族风情，刚进村子就看到了雪山，真的是非常地壮观。</p>

<p><img src="http://pic.yupoo.com/khotyn/CQjRiogI/medish.jpg" alt="image" /></p>

<p>扎西的家的下面就有一条小河穿过，河旁边有几个天然的温泉，其中一个温泉里面，一个女人裸露着上半身带着儿子在洗澡，我们也下到旁边的温泉里面泡脚，温泉充满了硫磺的味道，不过泡地非常地舒服。</p>

<p><img src="http://pic.yupoo.com/khotyn/CQjKjley/medish.jpg" alt="image" /></p>

<p>为了防止高反，领队小胖让我们喝了很多的水，半夜上了好几趟厕所，据说他们爬山的时候有时候就直接拿着喝水的瓶子解决，第二天再用雪水洗洗继续用，非常时刻，非常措施。</p>

<h3>Day Two</h3>

<p>今天正式开始徒步，车子将我们送到了电站，在电站碰到了好多藏人正准备进山挖虫草，现在正是藏人挖虫草的季节，虫草是很多家庭一年唯一的收入。从电站出发到格西草原，一路上很有指环王、魔兽世界的感觉，在森林、灌木中行走，让我怀疑自己是不是身在希尔斯布莱德丘陵，路旁还不时有一些旄牛在吃草，有几只旄牛仔很可爱。</p>

<p><img src="http://pic.yupoo.com/khotyn/CQjVaIYI/medish.jpg" alt="image" /></p>

<p>中午的时候队伍到达了盘盘山垭口的下方，海拔大概在 3800 米，下面是一个非常陡的坡，我们的目的地是 4200 米的露营地，爬坡比想象中的累很多，用了领队的方法，调正呼吸，尽量用深呼吸，放慢自己所有的动作，跟随自己的节奏，不要跟随别人的脚步，才轻松了不少，上了 4000 米以后就完全是另外的一番景象了，没有了森林，也没有了灌木，只有高山草甸。因为是个纯爷们儿的队伍，队伍的行进速度比想象中的要快，在下午三点左右，我们就到达了预计的露营地，看大家体力还不错，就继续开始攀爬，大概下午四点左右的时候到达了 4300 米出的营地，然后开始扎营，后面看来这可能是个错误的决定，最后的这一百米的海拔消耗了大家很多的体力，到达营地搭完帐篷后，每个人都累得不行了，有几个队友还出现了比较严重的高反，头痛地厉害，特别是影风，喊着第二天要回去，实在受不了，我也稍微有点头痛，不过还是可以忍受。</p>

<p>在我们扎营的时候，后面来了两个重装的哥们，没有向导，背后的登山包叠地高高的，好生佩服，他们选择了在我们旁边扎营，大家在一起好照顾嘛。</p>

<p>傍晚的时候天气开始剧变，下方山谷里面的雾气扑面而来，不一会儿，就开始下雪了，帐篷上开始积雪，领队阿甘还在给我们做饭。吃完饭已经是天黑，雪还在继续地下，庆幸的是下的不是雨，要不然还得在帐篷旁边挖倒水沟什么的，麻烦地很。</p>

<p><img src="http://pic.yupoo.com/khotyn/CQjZrq7a/medish.jpg" alt="image" /></p>

<p>吸取了昨天喝了太多的水，半夜得起来好几趟的教训，今天晚上没有喝水，毕竟睡在帐篷里面解决起来可不是很方便啊。</p>

<h3>Day Three</h3>

<p>昨晚一夜没有睡好，不知道到底睡了几个小时，头胀的厉害，口也很喝，真是难受，这一夜特别漫长。</p>

<p>等了很久的样子，感觉天亮啊，打开帐篷一看，啊，满眼是雪，抬头一看，天气好极了，周围雪山的轮廓也清晰极了。</p>

<p><img src="http://pic.yupoo.com/khotyn/CQjYdYbh/medish.jpg" alt="image" /></p>

<p>天空还挂了半轮月亮，太阳，月亮，蓝天，雪山，都一起出现了，看到这美景，身上的疲惫都感觉少了一大半了。</p>

<p><img src="http://pic.yupoo.com/khotyn/CQk0Ulwk/medish.jpg" alt="image" /></p>

<p>早餐大家都没有胃口，喝了一点粥，领队切了很多饼子，大部分都没有吃完。昨天两个重装的哥们已经开始向盘盘山垭口进发，我们收拾好东西随后也进发了。</p>

<p>到盘盘山垭口的路不是很艰难，照样是昨天的方法，在中午左右我们就达到盘盘山垭口了，天气目前也还可以，可惜小贡嘎被云挡住了，希望后面爬子梅垭口的时候可以看到贡嘎主峰。</p>

<p><img src="http://pic.yupoo.com/khotyn/CQk41ndU/medish.jpg" alt="image" /></p>

<p>到达盘盘山垭口，拍了几个照片，发现前面重装的哥们走错路了，领队告诉了他们正确的路，估计他们得多花几个小时走路了，从盘盘山垭口下去一路是下坡，走起来也轻松了很多，不过下山达到山谷后就要开始走土路，下午走了好几个小时，脚就开始痛了，毕竟，登山鞋不适合走这种路，今天本想走到差不多了就在路边扎营的，领队小胖看我们已经非常疲惫，于是骑马到有手机信号的地方叫来了车子，帮我们直接送到了玉龙西村。</p>

<p>达到了玉龙西村的客栈，客栈的主人叫泽西，一坐下他就给我们端上了酥油茶，第一次喝酥油茶，感觉怪怪地，油油地。客栈的女主人也非常热情，帮忙打洗脚水，倒洗澡水，感觉是个非常不错的人。</p>

<p><img src="http://pic.yupoo.com/khotyn/CQkjwr2I/medish.jpg" alt="image" /></p>

<p>这个客栈有电，有热水，中国移动在这儿还偶尔有点信号，感觉又回到了人间。</p>

<p>客栈里面除了我们和泽西的家人，还有三个年轻人，两个男生，一个女生，从和他们交谈的过程中了解到，其中一个男生是清华毕业的学生，在这片区域组织志愿者来教书，这个女生就是他找来的。在这边做教育工作非常不容易，得不到政府、国家的承认，村支书、村长也不支持他们的工作，经常阻扰。从他们口中我们知道了还有一个姓陈的志愿者，瞒着父母跑到这边来，目前在下子梅村，前几天父母已经跑到玉龙西村来打听，刚好我们后面几天就要经过下子梅村，于是他托我们给陈老师带个话，确认陈老师没事儿，然后可以告诉他父母他的近况。</p>

<p>晚上的时候大家商量了明天的行程，照领队的意思我们应该明天上子梅垭口（海拔 4600 米）后就下撤到上子梅村的，但是贡嘎穿越，说白了主要还是希望可以看到贡嘎主峰，如果能够看到日照金山就更好了，最后决定队伍分成两部分，一部分高反不严重的跟着领队小胖在子梅垭口扎营，看日落日出；另一部分跟随领队阿甘下撤到上子梅村。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[杂事儿]]></title>
    <link href="http://khotyn.github.com/blog/2013/03/31/mass/"/>
    <updated>2013-03-31T22:31:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/03/31/mass</id>
    <content type="html"><![CDATA[<h3>一、坚持</h3>

<p>最近颇为得意的几件事儿，便是年后坚持做了几件事儿，每天背一点英语单词，每天写日记。</p>

<p>背单词我是通过「拓词」这个应用来背的，但是这段时间坚持下来，没有特别好的效果，这个背单词的方法不是正确的方法，背了以后你只能照着「拓词」给出的答案来选，而很难直接给出单词的意思，更不用说对单词的用法进行应用了。另外，「拓词」本身的服务质量也不稳定，计时不准确，App 闪退等问题也比较严重，准备找一种更好的方式来拓展我的词汇量。</p>

<p>写日记我是通过「Day One」这款 App 来记的，我买了 Mac 版和 iOS 版，三个多月使用下来非常棒，「Day One」支持 Markdown，整个应用做的也十分精美，让人看了就有写日记的冲动，特别有意思的时候它有时候会弹出一些话来让你写日记，比如，下面这句：</p>

<blockquote><p>Keep a diary, and someday it&#8217;ll keep you.</p></blockquote>

<p>其实日记是你最私密的东西，在里面，你可以写任何的在其他社交网络上不敢写的东西，可以把你最真实的感情写在里面，让你直面最真实的自己，而当你失落的时候，这些日记就是过去的你，会在背后支持着你。</p>

<p>一直以来，无论是上学的时候，还是工作的时候，总会有不断的计划冒出来，无论当时下多么大的决心，总是到一定阶段的时候放弃了。但是，最近发现，有些决心确实比另外一些更加坚定，持续地更久。其实，我一直以来内心都藏有一种恐惧，害怕自己会变成一个平庸的人，每天上班下班，完成着交给的工作，无所作为，而正是这种恐惧，成为的内心最强大的东西。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure 学习笔记：生命游戏]]></title>
    <link href="http://khotyn.github.com/blog/2013/03/23/clojure-game-of-life/"/>
    <updated>2013-03-23T16:49:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/03/23/clojure-game-of-life</id>
    <content type="html"><![CDATA[<p>本周继续在看「Clojure Programming」这本书，这本书的第三章讲的是 Clojure 的集合和数据结构，作为这章的结束，作者举了一个「生命游戏」的例子来讲解 Clojure 数据结构的使用，作者一共提供了三种方式来解这个生命游戏，其中前两种方式比较好理解，最后一种方式对我来说理解起来比较困难，不过经过几个小时的推敲，总算是基本搞明白了，这里就将我理解的过程记录一下。</p>

<p>关于什么是「生命游戏」，大家可以直接看维基百科：<a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Game of Life</a>。简单地来说，生命游戏的规则就是在一个二维数组里面，有一些元素是“活着的”，有一些元素是“死亡的”，这个二维数组随着每一代的进化，有些元素会死去，有些元素会活过来，具体变化的规则如下：</p>

<ul>
<li>如果一个元素现在是“活着”的，并且它的邻居里面（周围的 8 个元素）活着的元素的数量少于 2 个，那么这个元素在下一代就会死去。</li>
<li>如果一个元素现在是“活着”的，并且它的邻居里面活着的元素的数量等于 2 个或者 3 个，那么这个元素在下一代会依旧活着。</li>
<li>如果一个元素现在是“活着”的，并且它的邻居里面活着的元素大于 3 个，那么这个元素在下一代周就会死去。</li>
<li>如果一个元素是“死”的，并且它的邻居里面有三个元素是活着的，那么下一代这个元素就会复活。</li>
</ul>


<p>如果我们对这些规则进行简化，就可以得出以下的结论：</p>

<ul>
<li>如果一个元素的邻居有 3 个是活着的，那么无论如何，它在下一代中肯定是活着的。</li>
<li>如果一个元素的邻居有 2 个是活着的，那么下一代中的死活状态和本代是一样的。</li>
<li>如果是其他的情况，那么这个元素在下一代肯定会死去。</li>
</ul>


<p>根据这些规则，「Clojure Programming」这本书给出的代码如下（是的，一共才 11 行代码，不得不感慨 Clojure 真是精简，用 Java 写起来这得多少啊）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; 生命游戏</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">neighbours</span>
</span><span class='line'>  <span class="p">[[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">dx</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="nv">dy</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="ss">:when</span> <span class="p">(</span><span class="nb">not= </span><span class="mi">0</span> <span class="nv">dx</span> <span class="nv">dy</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">[(</span><span class="nb">+ </span><span class="nv">dx</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">dy</span> <span class="nv">y</span><span class="p">)]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">step</span>
</span><span class='line'>  <span class="s">&quot;Yields the next state of the world&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">for </span><span class="p">[[</span><span class="nv">loc</span> <span class="nv">n</span><span class="p">]</span> <span class="p">(</span><span class="nf">frequencies</span> <span class="p">(</span><span class="nb">mapcat </span><span class="nv">neighbours</span> <span class="nv">cells</span><span class="p">))</span>
</span><span class='line'>             <span class="ss">:when</span> <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">cells</span> <span class="nv">loc</span><span class="p">)))]</span>
</span><span class='line'>         <span class="nv">loc</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个源代码的前面一个方法比较简单，就是给定一个元素的座标，计算其邻居的各个元素的座标，主要的代码在第二个方法 step 上。</p>

<p>第二个函数接受的参数是一个当前活着的元素座标的列表，结果是下一代存活的元素的集合。先看第二个函数的 for 循环，这个 for 里面有一个</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nb">mapcat </span><span class="nv">neighbours</span> <span class="nv">cells</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个 <code>mapcat</code> 方法其实是 map 和 concat 两个函数结合，其定义如下：</p>

<blockquote><p>Returns the result of applying concat to the result of applying map
to f and colls.  Thus function f should return a collection.</p></blockquote>

<p>相当于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">concat </span><span class="p">(</span><span class="nb">map </span><span class="nv">neighbours</span> <span class="nv">cells</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这段代码里面这段函数起到的作用就是将当前所有活着的元素的邻居收到一个集合里面。</p>

<p>收集完成以后，函数对这个集合进行了 frequencies 操作，这个 <code>frequencies</code> 就是统计集合内每一个不同的元素出现的数量。最后对 <code>frequencies</code> 的结果进行解构，就得到 for 循环里面的 loc 和 n 的值，其中：loc 就是当前活着的元素的某个邻居的座标，n 就是这个邻居作为邻居出现次数。</p>

<p>但是，这里有一个点需要注意的，如果一个元素 A 是另一个元素 B 的邻居，那么这个元素 A 的邻居也就包含了 B。换句话说，两个元素总是互为邻居的，也就是，n 是这个元素作为邻居出现的次数，<strong>同时也是这个元素周围活着的邻居数量</strong>。</p>

<p>这样，for 循环的后面还有的 <code>:when</code> 就可以根据规则对 n 的值进行判断了：</p>

<ul>
<li>如果 n 为 3，无论如何这个元素在下一代都会活着，所以这个元素的座标就作为结果返回了（就是最后的 <code>loc</code> 那段代码）。</li>
<li>如果 n 为 2，那么需要进行进一步的判断，如果当前元素在 <code>cells</code> 中，也就是说当前元素原来是活着的，根据规则，它下一代依旧会活着，它的座标也会被返回。</li>
</ul>


<p>最后，所有符合上面的条件的元素都会被返回，这个函数最后就返回了下一代中所有的存活的元素的座标了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure 学习笔记：开始]]></title>
    <link href="http://khotyn.github.com/blog/2013/03/17/learning-clojure-partone/"/>
    <updated>2013-03-17T20:44:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/03/17/learning-clojure-partone</id>
    <content type="html"><![CDATA[<h3>一、 为什么学 Clojure</h3>

<p>Clojure 一直是我想去学习的一门语言，从去年开始就想学，但是我一直忍着没学，没学的原因一方面是想看一看自己是不是三分钟热度，过了一段时间就不再对它感兴趣了。另一方面，我更想去多学一些计算机底层的技术，因为我自认为基础并不太好，未来会成为个人发展的一个障碍。</p>

<p>但是，从现在看来，我似乎对 Clojure 并不是脑子一热就想去学，而有一些更深层的原因。我想学 Clojure 一个主要的原因是因为最近一段时间一直在思考语言的抽象维度，表达能力的问题，对这个问题我虽然有一些感觉，但是因为了解的语言非常有限，所以一直都没有抓到问题的本质，找不到问题的答案是什么，而多了解一门不同类型的语言或许可以在一定程度上帮助我思考这个问题，如果这门语言和 Java 越不同，能给我带来的思维的转换就越大，显然 Lisp 会是很好的选择。而 Clojure 正是基于 JVM 的一种 Lisp 方言，对做 Java 开发的我来说再好不过。</p>

<h3>二、Clojure 是一门什么样的语言</h3>

<p>面对这个问题，我的脑子中一下子塞入了各种名词：</p>

<ul>
<li>不变量</li>
<li>函数式编程</li>
<li>S 表达式</li>
<li>一堆括号</li>
<li>宏</li>
</ul>


<p>现在对 Clojure 的认识还很模糊，这个问题我希望能够一直带在整个学习过程中，希望在经过一段时间的学习以后可以回答这个问题。</p>

<h3>三、环境安装</h3>

<p>在 Mac 下可以直接通过 brew 来安装：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install clojure</span></code></pre></td></tr></table></div></figure>


<p>Clojure 官网也提供了其他的安装方式：<a href="http://clojure.org/getting_started">http://clojure.org/getting_started</a></p>

<p>编辑器我选择是 Intellij IDEA，安装上一个 La Clojure 的插件即可，这个插件提供了代码高亮、格式化等功能，并且针对 Clojure 括号略多的情况，给括号提供了彩虹色的高亮，非常贴心。另外 La Clojure 内置的 REPL 在语法高亮、光标的移动方面都比 Clojure 自带的要好。</p>

<h3>四、学习资料</h3>

<p>关于 Clojure 的书比较著名的有三本：</p>

<ul>
<li><a href="http://book.douban.com/subject/4743790/">The Joy of Clojure</a></li>
<li><a href="http://book.douban.com/subject/7915128/">Programming Clojure</a></li>
<li><a href="http://book.douban.com/subject/6715378/">Clojure Programming</a></li>
</ul>


<p>目前这三本书中 The Joy of Clojure 正在翻译中，Programming Clojure 和 Clojure Programming 已经翻译好，可以在各大网站上预订了，想看中文版的朋友可以考虑去买纸质书。</p>

<p>我选择了 Clojure Programming 这本书，没什么原因，刚好之前下载了这本书的英文版，看着看着就一直再看了。</p>

<h3>五、下一篇</h3>

<p>这第一篇笔记没有什么关于 Clojure 的具体内容，主要作用在于提醒自己学习要不忘初衷，下一篇中我会开始整理出一些具体内容出来，敬请期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[北壁]]></title>
    <link href="http://khotyn.github.com/blog/2013/03/10/northwand/"/>
    <updated>2013-03-10T11:20:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/03/10/northwand</id>
    <content type="html"><![CDATA[<p>这是一部登山者必看的电影，根据真实故事改编，讲述了几个登山者挑战艾格峰北壁的故事，历史上曾有多人试图从北坡爬上艾格峰，但是在 1938 年之前都失败了，这部电影讲述的就是其中最著名的一个悲剧。</p>

<p>电影的精彩之处在于基本还原了故事的事实，特别是最后只有 Toni 一个人幸存下来，悬在峭壁上一夜，等待援救，最后因为绳结无法通过下降器而没法下降到救援队的地方，悬挂在半空中最后冻死的场景，只是事实比电影还要残酷。</p>

<p>刚好我也找到了当年 Toni 挂在半空中死去的照片：</p>

<p><img src="http://www.wspinanie.pl/serwis/200806/12eiger_historia4.jpg" alt="image" /></p>

<p>对比电影海报中照片：</p>

<p><img src="http://pic.yupoo.com/khotyn/CHrkhZ6L/vUPFo.jpg" alt="image" /></p>

<p>相比于喜剧，悲剧总是更能够对后人起到惊醒的作用，如果 Andy 在上山完成 Hinterstoisser Traverse 后把绳子留在那里，或许最后几个人都能够活下来，当然，这只是事后的假设。无论是马拉松还是登山，在挑战自我的之前做好充分地准备，迎难而上的同时需要懂得知难而退，给自己留一条后路，毕竟，活着回来比什么都重要。但是，说永远比做要容易，迎难而上，知难而退，本身就是矛盾的一对词，我想我们能做的保持地理智，期望在那一刻来临的时候做出正确地选择。</p>
]]></content>
  </entry>
  
</feed>
