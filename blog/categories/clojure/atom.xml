<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | 码工作坊]]></title>
  <link href="http://khotyn.github.com/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://khotyn.github.com/"/>
  <updated>2013-09-07T16:28:32+08:00</updated>
  <id>http://khotyn.github.com/</id>
  <author>
    <name><![CDATA[khotyn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[成就达成：4clojure 题目全破！]]></title>
    <link href="http://khotyn.github.com/blog/2013/06/21/4clojure/"/>
    <updated>2013-06-21T22:09:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/06/21/4clojure</id>
    <content type="html"><![CDATA[<p>经过了一个多月的努力，终于将 <a href="http://www.4clojure.com/">4clojure.com</a> 上面的的题目全部解出了，经过这段时间不断地用 clojure，对 Clojure 也有了一些基本的认识，目前让我觉得 clojure 强大的地方在于：</p>

<ul>
<li>和命令式语言完全不同的编程方式，编程过程就像是不断地数据转换的过程，它给你的感觉就像是进入了一个完全不同的世界一样。</li>
<li>“惰性求值 + 无限序列”很好很强大~，比如在产生斐波那契数列或者是素数序列的时候都非常有用。</li>
</ul>


<p>也说说几点不满意的地方：</p>

<ul>
<li>括号比较多，不过这个也是没有办法，有良好的编译器的话这个问题也不算是问题啦。</li>
<li>异常比较难看懂，不知道是不是我是新手的原因，觉得 clojure 的异常不容易懂，clojure 的代码里面常常一行包括非常多的代码，做了很多的事情，单单看异常还看不错出错的地方在哪里。</li>
</ul>


<p>总之，经过这段时间在 <a href="http://www.4clojure.com/">4clojure.com</a> 上的学习，算是对 clojure 的基本语法，核心函数等东西有了一个基本的掌握，后面会尝试用 clojure 做一些实际的东西，至于做什么，还没有想好。</p>

<p>另外，我已经将我的 4clojure 题目的答案都放到了 github 上，地址是：<a href="https://github.com/khotyn/4clojure-answer">https://github.com/khotyn/4clojure-answer</a>， 如果大家在解题的过程中遇到了什么困难，可以看看我的答案，当然，我的很多答案都是有臭又长，大家有更精简的答案欢迎一起交流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure 如何判断一个序列中是否存在某个元素]]></title>
    <link href="http://khotyn.github.com/blog/2013/05/09/clojure-element-in-seq/"/>
    <updated>2013-05-09T21:17:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/05/09/clojure-element-in-seq</id>
    <content type="html"><![CDATA[<p>最近一直在看 Clojure，经常碰到的一个问题是怎么判断一个序列中是否存在某个元素。对于这个问题的第一反应就是用<code>contains?</code>来判断，但是<code>contains?</code>的第二个参数是<code>key</code>而不是元素的值，对于 vector 或者 array 这样的数据结构不能做判断：</p>

<p><code>bash
user=&gt; (contains? '(101 102 103 104) 101)
false
</code></p>

<p>另一个方法就是采用 set 配合 some 来做判断：</p>

<p><code>bash
user=&gt; (some #{101} '(101 102 103 104))
101
</code></p>

<p><code>some</code> 的函数原型是 <code>(some prev coll)</code>，它会对 coll 中的元素依次应用 prev 进行测试，返回第一个为真的元素，而用一个 set 进行测试，返回就是第一个包含在这个 set 中的元素，因此上面的那段表达式就返回了 101。</p>

<p>这样，只要上面这个表达式返回的不是<code>nil</code>，就表示元素在序列中了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure 学习笔记：生命游戏]]></title>
    <link href="http://khotyn.github.com/blog/2013/03/23/clojure-game-of-life/"/>
    <updated>2013-03-23T16:49:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/03/23/clojure-game-of-life</id>
    <content type="html"><![CDATA[<p>本周继续在看「Clojure Programming」这本书，这本书的第三章讲的是 Clojure 的集合和数据结构，作为这章的结束，作者举了一个「生命游戏」的例子来讲解 Clojure 数据结构的使用，作者一共提供了三种方式来解这个生命游戏，其中前两种方式比较好理解，最后一种方式对我来说理解起来比较困难，不过经过几个小时的推敲，总算是基本搞明白了，这里就将我理解的过程记录一下。</p>

<p>关于什么是「生命游戏」，大家可以直接看维基百科：<a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Game of Life</a>。简单地来说，生命游戏的规则就是在一个二维数组里面，有一些元素是“活着的”，有一些元素是“死亡的”，这个二维数组随着每一代的进化，有些元素会死去，有些元素会活过来，具体变化的规则如下：</p>

<ul>
<li>如果一个元素现在是“活着”的，并且它的邻居里面（周围的 8 个元素）活着的元素的数量少于 2 个，那么这个元素在下一代就会死去。</li>
<li>如果一个元素现在是“活着”的，并且它的邻居里面活着的元素的数量等于 2 个或者 3 个，那么这个元素在下一代会依旧活着。</li>
<li>如果一个元素现在是“活着”的，并且它的邻居里面活着的元素大于 3 个，那么这个元素在下一代周就会死去。</li>
<li>如果一个元素是“死”的，并且它的邻居里面有三个元素是活着的，那么下一代这个元素就会复活。</li>
</ul>


<p>如果我们对这些规则进行简化，就可以得出以下的结论：</p>

<ul>
<li>如果一个元素的邻居有 3 个是活着的，那么无论如何，它在下一代中肯定是活着的。</li>
<li>如果一个元素的邻居有 2 个是活着的，那么下一代中的死活状态和本代是一样的。</li>
<li>如果是其他的情况，那么这个元素在下一代肯定会死去。</li>
</ul>


<p>根据这些规则，「Clojure Programming」这本书给出的代码如下（是的，一共才 11 行代码，不得不感慨 Clojure 真是精简，用 Java 写起来这得多少啊）：</p>

<p>```clojure
;; 生命游戏
(defn neighbours
  [[x y]]
  (for [dx [-1 0 1] dy [-1 0 1] :when (not= 0 dx dy)]</p>

<pre><code>[(+ dx x) (+ dy y)]))
</code></pre>

<p>(defn step
  "Yields the next state of the world"
  [cells]
  (set (for [[loc n] (frequencies (mapcat neighbours cells))</p>

<pre><code>         :when (or (= n 3) (and (= n 2) (cells loc)))]
     loc)))
</code></pre>

<p>```</p>

<p>这个源代码的前面一个方法比较简单，就是给定一个元素的座标，计算其邻居的各个元素的座标，主要的代码在第二个方法 step 上。</p>

<p>第二个函数接受的参数是一个当前活着的元素座标的列表，结果是下一代存活的元素的集合。先看第二个函数的 for 循环，这个 for 里面有一个</p>

<p><code>clojure
mapcat neighbours cells
</code></p>

<p>这个 <code>mapcat</code> 方法其实是 map 和 concat 两个函数结合，其定义如下：</p>

<blockquote><p>Returns the result of applying concat to the result of applying map
to f and colls.  Thus function f should return a collection.</p></blockquote>

<p>相当于</p>

<p><code>clojure
(concat (map neighbours cells))
</code></p>

<p>在这段代码里面这段函数起到的作用就是将当前所有活着的元素的邻居收到一个集合里面。</p>

<p>收集完成以后，函数对这个集合进行了 frequencies 操作，这个 <code>frequencies</code> 就是统计集合内每一个不同的元素出现的数量。最后对 <code>frequencies</code> 的结果进行解构，就得到 for 循环里面的 loc 和 n 的值，其中：loc 就是当前活着的元素的某个邻居的座标，n 就是这个邻居作为邻居出现次数。</p>

<p>但是，这里有一个点需要注意的，如果一个元素 A 是另一个元素 B 的邻居，那么这个元素 A 的邻居也就包含了 B。换句话说，两个元素总是互为邻居的，也就是，n 是这个元素作为邻居出现的次数，<strong>同时也是这个元素周围活着的邻居数量</strong>。</p>

<p>这样，for 循环的后面还有的 <code>:when</code> 就可以根据规则对 n 的值进行判断了：</p>

<ul>
<li>如果 n 为 3，无论如何这个元素在下一代都会活着，所以这个元素的座标就作为结果返回了（就是最后的 <code>loc</code> 那段代码）。</li>
<li>如果 n 为 2，那么需要进行进一步的判断，如果当前元素在 <code>cells</code> 中，也就是说当前元素原来是活着的，根据规则，它下一代依旧会活着，它的座标也会被返回。</li>
</ul>


<p>最后，所有符合上面的条件的元素都会被返回，这个函数最后就返回了下一代中所有的存活的元素的座标了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure 学习笔记：开始]]></title>
    <link href="http://khotyn.github.com/blog/2013/03/17/learning-clojure-partone/"/>
    <updated>2013-03-17T20:44:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/03/17/learning-clojure-partone</id>
    <content type="html"><![CDATA[<h3>一、 为什么学 Clojure</h3>

<p>Clojure 一直是我想去学习的一门语言，从去年开始就想学，但是我一直忍着没学，没学的原因一方面是想看一看自己是不是三分钟热度，过了一段时间就不再对它感兴趣了。另一方面，我更想去多学一些计算机底层的技术，因为我自认为基础并不太好，未来会成为个人发展的一个障碍。</p>

<p>但是，从现在看来，我似乎对 Clojure 并不是脑子一热就想去学，而有一些更深层的原因。我想学 Clojure 一个主要的原因是因为最近一段时间一直在思考语言的抽象维度，表达能力的问题，对这个问题我虽然有一些感觉，但是因为了解的语言非常有限，所以一直都没有抓到问题的本质，找不到问题的答案是什么，而多了解一门不同类型的语言或许可以在一定程度上帮助我思考这个问题，如果这门语言和 Java 越不同，能给我带来的思维的转换就越大，显然 Lisp 会是很好的选择。而 Clojure 正是基于 JVM 的一种 Lisp 方言，对做 Java 开发的我来说再好不过。</p>

<h3>二、Clojure 是一门什么样的语言</h3>

<p>面对这个问题，我的脑子中一下子塞入了各种名词：</p>

<ul>
<li>不变量</li>
<li>函数式编程</li>
<li>S 表达式</li>
<li>一堆括号</li>
<li>宏</li>
</ul>


<p>现在对 Clojure 的认识还很模糊，这个问题我希望能够一直带在整个学习过程中，希望在经过一段时间的学习以后可以回答这个问题。</p>

<h3>三、环境安装</h3>

<p>在 Mac 下可以直接通过 brew 来安装：</p>

<p><code>
brew install clojure
</code></p>

<p>Clojure 官网也提供了其他的安装方式：<a href="http://clojure.org/getting_started">http://clojure.org/getting_started</a></p>

<p>编辑器我选择是 Intellij IDEA，安装上一个 La Clojure 的插件即可，这个插件提供了代码高亮、格式化等功能，并且针对 Clojure 括号略多的情况，给括号提供了彩虹色的高亮，非常贴心。另外 La Clojure 内置的 REPL 在语法高亮、光标的移动方面都比 Clojure 自带的要好。</p>

<h3>四、学习资料</h3>

<p>关于 Clojure 的书比较著名的有三本：</p>

<ul>
<li><a href="http://book.douban.com/subject/4743790/">The Joy of Clojure</a></li>
<li><a href="http://book.douban.com/subject/7915128/">Programming Clojure</a></li>
<li><a href="http://book.douban.com/subject/6715378/">Clojure Programming</a></li>
</ul>


<p>目前这三本书中 The Joy of Clojure 正在翻译中，Programming Clojure 和 Clojure Programming 已经翻译好，可以在各大网站上预订了，想看中文版的朋友可以考虑去买纸质书。</p>

<p>我选择了 Clojure Programming 这本书，没什么原因，刚好之前下载了这本书的英文版，看着看着就一直再看了。</p>

<h3>五、下一篇</h3>

<p>这第一篇笔记没有什么关于 Clojure 的具体内容，主要作用在于提醒自己学习要不忘初衷，下一篇中我会开始整理出一些具体内容出来，敬请期待。</p>
]]></content>
  </entry>
  
</feed>
