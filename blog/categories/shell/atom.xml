<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | 小径分岔的花园]]></title>
  <link href="http://khotyn.github.com/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://khotyn.github.com/"/>
  <updated>2013-12-07T19:52:28+08:00</updated>
  <id>http://khotyn.github.com/</id>
  <author>
    <name><![CDATA[khotyn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「Sed & Awk」阅读笔记之 Sed 高级命令]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/30/sed-part-two/"/>
    <updated>2013-07-30T21:41:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/30/sed-part-two</id>
    <content type="html"><![CDATA[<p>上一篇文章中，我介绍了一下 <a href="../../../../2013/07/28/sed-and-awk-part-one/">sed 的基础</a>，包括执行方式、地址选择器以及基本命令，在这一篇文章中，我们继续来了解一下 sed 的高级命令，之所以称它们为高级命令，是因为这些命令会改变 sed 的执行流，废话不说，我们来看看这些命令吧：</p>

<h3 id="section">高级命令</h3>

<h4 id="n-next">N (Next)</h4>

<p>这里要介绍的第一个命令是 <code>N</code>，它和我们前面介绍过的 <code>n</code> 命令很像，也是要读取下一行的内容，不同的是，<code>N</code> 读取下一行的内容并且将这些内容附加到 pattern space 当前的内容后面。这样，当你需要连着处理多行内容的时候，<code>N</code> 命令就会特别有用，比如，我们有下面一段文本：</p>

<p><code>
one two three four
one two three 
four three two
three four
</code></p>

<p>如果我们要把 <code>two three four</code> 替换成 <code>2 3 4</code>，注意例子中的 <code>two three four</code> 可能在不同的行中，那么我们就可以用 <code>N</code> 命令来处理：</p>

<p><code>
N
s/\n/ /
s/two three four/2 3 4/
</code></p>

<p>输出的内容为：</p>

<p><code>
one 2 3 4 one two three
four three 2 3 4
</code></p>

<p>这个结果不是我们想要的，不过的确是符合了上面的 sed 脚本的执行结果：</p>

<ol>
  <li>首先，sed 脚本读取了文本的第一行，这个时候 pattern space 中的内容为 <code>one two three four</code></li>
  <li>然后 sed 脚本执行 N 命令，将下一行读取并附加到当前的 pattern space 内容的后面，这个时候，pattern space 中的内容就变为 <code>one two three four\none two three</code></li>
  <li>下一个命令，将换行符 <code>\n</code> 替换成一个空格，pattern space 中的内容为 <code>one two three four one two three</code></li>
  <li>然后下一个命令，将 pattern space 中的 <code>two three four</code> 替换成 <code>2 3 4</code>，这个时候 pattern space 中的内容为 <code>one 2 3 4 one two three</code></li>
  <li>到达脚本的结尾，输出 pattern space 中的内容，也就是我们输出内容的第一行。</li>
  <li>然后 sed 脚本读取文本的下一行，注意因为之前第二行已经被 <code>N</code> 命令读取了，所以 sed 脚本开始读取第三行，依旧按照前面的命令执行，最后就输出了输出内容中的第二行。</li>
</ol>

<p>虽然这个结果不是我们想要的，不过算是了解了 N 的作用了。</p>

<h4 id="d-delete">D (Delete)</h4>

<p>同样，前面我们介绍过 <code>d</code> 命令，它用来删除 pattern space 中的内容，并且读取下一行到 pattern space 中，sed 脚本也随之从头开始执行。<code>D</code> 命令和 <code>d</code> 命令稍微有点不同，<code>D</code> 命令会删除 pattern space 中的第一行的内容，它不会从文本中读取新的行进来，当然 sed 脚本还是会从头开始执行，如果我们有这么一个文本：</p>

<p>```
blank
blank</p>

<p>blank</p>

<p>blank</p>

<p>blank</p>

<p>blank
```</p>

<p>这个文本中的有些段落之间有多个空行，我们希望把多余的空行去掉，也就是如果段落之间有多个空行，就删掉只剩下一个，我们的 sed 脚本可以这么写：</p>

<p>```
/^$/{
	N
	/^\n$/D
}</p>

<p>```</p>

<p>这个脚本先匹配出空行，然后读取空行的下一行，如果两行都是空行的话，就把 pattern space 中的第一个空行删除掉，然后继续读取下一行到 pattern space 中，结果就是把多余的空行都删除掉，只剩下一个空行了。</p>

<h4 id="p-print">P (Print)</h4>

<p><code>P</code> 命令和 <code>p</code> 命令也稍微不同，<code>P</code> 命令不像 <code>p</code> 命令那样会把 pattern space 中的所有内容打印出来，它只会将 pattern space 的第一行打印出来，这里就不做过多的介绍了。</p>

<h4 id="h-hold-h-hold-g-get-g-get-x-exchange">h (hold), H (Hold), g (get), G (Get), x (exchange)</h4>

<p>这里面有五个命令，之所以一起介绍是因为，这五个命令都是操作 hold space 的，之前我们已经知道了 pattern space 了，hold space 可以认为就是一个内容的临时存放点，你可以将 pattern space 中的内容放到 hold space 中，等到需要使用的时候再将 hold space 中的内容拿回到 pattern space 中，我们来看一下这五个命令的作用吧：</p>

<ul>
  <li>h：将 pattern space 中的内容拷贝到 hold space 中，hold space 中原来的内容会被覆盖。</li>
  <li>H：将 pattern space 中的内容添加到 hold space 当前内容的后面。</li>
  <li>g：将 hold space 中的内容拷贝到 pattern space 中，pattern space 中原来的内容将会被覆盖。</li>
  <li>G：将 hold space 中的内容添加到 pattern space 中目前的内容后面。</li>
  <li>x：交换 pattern space 和 hold space 中的内容。</li>
</ul>

<p>下面我们来看一个简单的例子：</p>

<p>```
1</p>

<p>2</p>

<p>11</p>

<p>22</p>

<p>111</p>

<p>222
```</p>

<p>现在我们要将上面的 1 和 2 的位置调换，就是先出现 2 再出现 1，我们的脚本可以这么写：</p>

<p><code>
/1/{
	h
	d
}
/2/{
	G
}
</code></p>

<p>这段脚本先匹配 1 所在的行，然后放到 hold space 中，将 pattern space 中的内容清除掉，然后匹配到 2 所在的行，将 hold space 中的内容添加到 pattern space 后面，这样，pattern space 中就是先有 2，再有 1 了。</p>

<p>最后，我们得到的结果就是：</p>

<p><code>
2
1
22
11
222
111
</code></p>

<h4 id="b">b</h4>

<p><code>b</code> 命令是一个跳转命令，它是无条件的，它的语法是这样的：</p>

<p><code>
[address]b [label]
</code></p>

<p>[label] 是要跳转到的标签，你可以在 sed 脚本中用 <code>:</code> 开头来表示一个标签，比如下面的：</p>

<p><code>
:start
s/start/end/g
b start
</code></p>

<p>如果 <code>b</code> 后面不带参数，那么就表示直接跳到脚本的末尾了。</p>

<h4 id="t">t</h4>

<p>除了 <code>b</code> 这样一个跳转命令以外，sed 还有一个 <code>t</code> 的条件跳转命令，如果在当前行有一个替换被成功执行了，那么 <code>t</code> 就会跳转到特定的标签上，它的语法 <code>b</code> 是类似的。</p>

<p><code>
[address]t [label]
</code></p>

<p>看下面这段代码：</p>

<p><code>
:begin
s/start/end/
t begin
</code></p>

<p>这条 <code>t</code> 命令只有在当前行的 start 成功被替换成 end 的时候才会跳转到 :begin 标签那里。</p>

<h3 id="section-1">总结</h3>

<p>sed 的高级命令相对于基本命令来说不怎么常用，但是在处理特定的问题的时候，这些命令还是很有用的。不过，不管怎么说，sed 都不是一门完备的语言，所以其适用的问题域也是比较有限的，sed 最大的优势在于逐行处理文本上，用适当的工具处理适当的问题，才能发挥出工具最大的威力。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Sed & awk」阅读笔记之 sed 基础]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/28/sed-and-awk-part-one/"/>
    <updated>2013-07-28T16:39:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/28/sed-and-awk-part-one</id>
    <content type="html"><![CDATA[<p>之前写的一篇文章有提到采用 sed 来<a href="../../../../blog/2013/07/24/match-line-not-contain-a-string/">匹配不包含连续字符串的行</a>，平时在做日志分析的时候也经常要用到 sed，但是仅仅用了 sed 的字符串替换的功能，没有系统地去学习过 sed 用法，这次找到一本叫<a href="http://book.douban.com/subject/1741933/">「sed &amp; awk」</a>的书，便花时间对 sed 做了系统的学习。</p>

<h3 id="sed-">sed 的执行方式</h3>

<p>要了解 sed，必须了解 sed 的执行方式，sed 是一个行处理器，脱胎于 <a href="http://www.gnu.org/software/ed/manual/ed_manual.html">ed</a>（ed 是一个行编辑器，awk 和 grep 也是基于 ed 的），简单地说，sed 的执行方式是这样的：<strong>sed 会从输入的文本中读取一行，放到 pattern space 中，然后用 sed 脚本去处理，处理完后继续读取下一行，继续处理。</strong></p>

<p>假设我们有下面一段文本需要处理：</p>

<p><code>
John Daggett, 341 King Road, Plymouth MA
Alice Ford, 22 East Broadway, Richmond VA
Orville Thomas, 11345 Oak Bridge Road, Tulsa OK
Terry Kalkas, 402 Lans Road, Beaver Falls PA
Eric Adams, 20 Post Road, Sudbury MA
Hubert Sims, 328A Brook Road, Roanoke VA
Amy Wilde, 334 Bayshore Pkwy, Mountain View CA
Sal Carpenter, 73 6th Street, Boston MA
</code></p>

<p>我们要把文本中的 CA 替换成 California，OK 替换成 Oklahoma，于是我们写了下面一段 sed 脚本：</p>

<p><code>
s/CA/California/
s/OK/Oklahoma/
</code></p>

<p>那么 sed 的执行方式是这样的：</p>

<ol>
  <li>先读取第一行 <code>John Daggett, 341 King Road, Plymouth MA</code> 到 pattern space</li>
  <li>然后执行脚本的第一行命令，将其中的 CA 替换成 California。</li>
  <li>然后执行脚本的第二行命令，将其中的 OK 替换成 Oklahoma。</li>
  <li>文本的第一行处理完毕，继续读取文本的下一行。</li>
  <li>继续第 2 步和第 3 步。</li>
</ol>

<p>当然，这只是大部分情况下 sed 的执行方式，sed 的基本命令都是按照这种方式来执行的，一些高级命令可以改变 sed 的执行流。不过在了解这些 sed 命令之前，我们先了解下 sed 的地址选择器，它是很多命令的组成部分。</p>

<h3 id="sed--1">sed 的地址选择器</h3>

<p>默认的情况，sed 脚本会对文本的每一行做处理，但是有时候我们只希望我们的命令作用于特定的几行，这个时候，我们就可以用 sed 的地址选择器，sed 的地址选择器可以是一个正则表达式（sed 的正则表达式总是放在两个 <code>/</code> 中间），行号，或者地址符号（<em>这个是什么东西？我也不清楚</em>），具体的使用方式如下：</p>

<ul>
  <li>如果没有指定地址选择器，那么命令默认会应用在每一行上。</li>
  <li>如果只有一个地址选择器，那么命令会作用在每一个符合这个地址选择器的行上。</li>
  <li>如果是两个用 <code>,</code> 分割的地址，那么命令会先作用到第一个符合第一个地址选择器的行上，然后继续作用于后续的行，直到（包括）第一个符合第二个地址选择器的行为止。</li>
  <li>地址选择器后面可以跟上一个 <code>!</code>，表示反向选择。</li>
</ul>

<p>另外在一个地址选择器中，你可以用一对 <code>{}</code> 将多个命令包含在其中，下面我们来看一个例子：</p>

<p>```
/^.TS/,/^.TE/{
     /^$/d
     s/^.ps 10/.ps 8/
     s/^.vs 12/.vs 10/
}</p>

<p>```</p>

<p>这个 sed 脚本的第一行就是一个地址选择器，由 <code>,</code> 分开的两个地址选择器组成，都是正则表达式形式的，表示后面 <code>{}</code> 中的命令会从第一个以 <code>.TS</code> 开头的行一直作用到第一个以 <code>.TE</code> 开头的行为止。</p>

<h3 id="sed--2">sed 的基本命令</h3>

<p>了解完 sed 的地址选择器后，我们就可以继续了解 sed 的基本命令了。</p>

<h4 id="substitution">替换（substitution）</h4>

<p>sed 的文本替换命令是我最常用的命令，它的语法是这样的：</p>

<p><code>
[address]s/pattern/replacement/flags
</code></p>

<p>它由这几个部分组成：</p>

<ul>
  <li>最前面是一个地址选择器，是可选的。</li>
  <li>然后后面是一个命令 <code>s</code>，表示是替换命令。</li>
  <li>后面紧跟一个正则表达式，表示要被替换的文本。</li>
  <li>再后面是希望替换成的文本。</li>
  <li>最后是标记位。</li>
</ul>

<p>其中标记位可以是：</p>

<ul>
  <li>n：一个从 1 到 512 的数字，表示只替换第 n 个符合 pattern 子串。</li>
  <li>g：默认情况下，替换命令只会替换一行中第一个符合 pattern 的子串，加上 <code>g</code> 以后会将行中所有符合 pattern 的子串都进行替换。</li>
  <li>p：将 pattern space 中的内容打印出来。</li>
  <li>w <em>file</em> ：将 pattern space 中的内容写到文件中。</li>
</ul>

<p>举一个例子，假设我们要将第一个例子中的最后一行的 MA 换成 Massachusetts，就可以这样写：</p>

<p><code>
$s/MA/Massachusetts/
</code></p>

<p>其中的 <code>$</code> 是一个地址选择器，表示最后一行。</p>

<p>替换命令的替换文本基本上就是一个字符串，但是还是有一些特殊字符：<code>\</code>，<code>&amp;</code> 和 <code>\n</code>，其中：</p>

<ul>
  <li><code>\</code>：转义，转义特殊字符。</li>
  <li><code>&amp;</code>：代表要被替换的文本，也就是符合 pattern 的子串。</li>
  <li><code>\n</code>：当前面的正则表达式中有捕获部分的时候（即，正则表达式的 <code>()</code> 语法），可以在替换文本中用这种反向引用的方式进行引用。</li>
</ul>

<p>这些特殊字符在当你需要将匹配的文本中的某些部分放到替换文本中的时候会特别有用。</p>

<h4 id="delete">删除（delete）</h4>

<p>删除命令很简单，它的语法是：</p>

<p><code>
[address]d
</code></p>

<p>前面可以带一个地址选择器，后面是一个 d，表示删除命令，举一个简单的例子，假设我们要筛选出不包含 <code>abc</code> 的行，可以这样写：</p>

<p><code>
/abc/d
</code></p>

<p>把包含 abc 的行全部都删除掉，这样就筛选出了不包含 <code>abc</code> 的行。</p>

<h4 id="appendinsertchange">追加，插入和变化（append，insert，change）</h4>

<p>这三个命令的作用分别是：insert 将提供的文本插入到 pattern space 的当前行前面，append 将提供的文本追加到 pattern space 的当前行后面，change 命令替换 pattern space 中的内容，之所以将这三个命令放到一起说，是因为这三个命令需要将提供的文本放在命令的第二行，它们的语法分别是这样的：</p>

<p>append</p>

<pre><code>[line-address]a\
text
</code></pre>

<p>insert</p>

<pre><code>[line-address]i\

text
</code></pre>

<p>changae</p>

<pre><code>[address]c\

text
</code></pre>

<p>来一个例子，我们有下面一段文本：</p>

<p><code>
I want to see @f1(what will happen) if we put the
font change commands @f1(on a set of lines).
If I understand things (correctly), the @f1(third) line causes problems. (No?).
Is this really the case, or is it (maybe) just something else?
Let's test having two on a line @f1(here) and @f1(there) as
well as one that begins on one line and ends @f1(somewhere
on another line).
What if @f1(it is here) on the line?
Another @f1(one).
</code></p>

<p>假设为了阅读的美观，我们希望段落之间能够空出一行来，段落结束的标记我们暂且简单地假设以 <code>.</code> 结尾，我们要做的就是在每一个以 <code>.</code> 结尾的行后面再插入一行，除了最后一行之外，那么我们的 sed 脚本就可以这么写：</p>

<p>```
$!{
	/.$/a\
	\</p>

<p>}
```</p>

<p>来说明一下这段脚本，第一行是一个地址选择器，表示选择除最后一行以外的行，因为我们不希望在最后一个段落后面也加上一个空行，然后里面的命令是对所有的以 <code>.</code> 结尾的行运用 a 命令去追加一个空行。</p>

<h4 id="list">列出（list）</h4>

<p>列出命令和打印命令其实很像，不同的是列出命令会将不可见字符给列出来，比如 windows 下的换行符，假设我们有下面一段文本（<code>^M</code> 可以用 Ctrl+V，然后 Ctrl+M 来输入）：</p>

<p><code>
^M^M
^M
^M^M^M
</code></p>

<p>上面一段文本用 <code>sed -n 'l'</code> 输出的内容是：</p>

<p><code>
\r\r$
\r$
\r\r\r$
</code></p>

<p>而用 <code>sed -n 'p'</code> 输出的内容是三个空空的行。</p>

<p>列出命令将不可见字符打印出来了，而打印命令则没有。</p>

<h4 id="transform">转换（transform）</h4>

<p>转换命令和替换命令听起来是一样，但是它们还是不同的，转换命令就像是多个 <code>tr</code> 命令用管道连在一起作用一样，它的语法是：</p>

<p><code>
[address]y/abc/xyz/
</code></p>

<p>转换命令的一个使用的场景就是大小写的转换：</p>

<p><code>
y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/
</code></p>

<p>上面这个命令会将文本中所有的小写字母转换成大写字母。</p>

<h4 id="print">打印（print）</h4>

<p>打印命令其实就是一个简单的 <code>p</code>，将 pattern space 中的内容打印出来，比如：</p>

<p><code>
$!p
</code></p>

<p>表示将除最后一行以外的内容全部打印出来。需要注意的是，默认情况下 sed 会将 pattern space 中的内容都打印出来，要关闭这个功能，可以加上一个 <code>-n</code> 参数，就像我在介绍列出命令的时候做的那样。</p>

<h4 id="section">打印行号</h4>

<p>打印行号也就是一个简单的 <code>=</code> 号，大家可以去试一下，这里不再多讲了。</p>

<h4 id="next">下一个（next）</h4>

<p>next 命令是一个 <code>n</code>，它的作用是将 pattern space 中的内容立即输出，然后将下一行读入到 pattern space 中，然后继续执行接下来的命令，比如：</p>

<pre><code>/H1/{

n

/^$/d

}
</code></pre>

<p>就是先匹配到含有 H1 的行，然后将这一行打印出来，接着读取下一行到 pattern space，如果是空的话，就删除掉。</p>

<h4 id="readwrite">读取和写入文件（read，write）</h4>

<p>sed 的读取文件的功能可以将文件中的内容追加到 pattern space 后面，前面那个在段落后面添加空行的例子我们可以这么做：首先创建一个只包含一个空行的文件叫做 temp，接着我们就可以用下面的命令来达到我们的目的了：</p>

<p><code>
$!{
    /\.$/r temp
}
</code></p>

<p>sed 的写入文件的功能和读取文件的功能类似，语法是：</p>

<p><code>
[address]w file
</code></p>

<p>表示将 pattern space 中的内容写入到文件。</p>

<h4 id="quit">退出（quit）</h4>

<p>sed 的退出命令是让 sed 停止读取新的行，也停止输出，基本上就是让 sed 退出了，它的命令的语法是：</p>

<p><code>
[line-address]q
</code></p>

<p>它只能作用在单行的地址选择器上。</p>

<h3 id="section-1">总结</h3>

<p>sed 的基本命令相对来说还是比较简单的，最主要的还是要用好地址选择器，在下一篇中，我会介绍一些 sed 的高级命令。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再论如何匹配不包含连续字符串的行]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/24/match-line-not-contain-a-string/"/>
    <updated>2013-07-24T22:35:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/24/match-line-not-contain-a-string</id>
    <content type="html"><![CDATA[<p>在前一篇文章中，我讨论过如何使用<a href="http://blog.khotyn.com/blog/2013/07/24/zero-width-assert/">使用零宽断言来匹配不包含连续字符串的行</a>，这个方法采用了零宽断言这种不怎么常见的正则表达式用法，虽然行之有效，但是总归是个麻烦的方法，而且，零宽断言很多的正则表达式解释器都不支持，用 grep 的话，得加上 -P 参数，让 grep 采用 Perl 的方式解释正则表达式，更加遗憾的一点是 -P 参数似乎只有在 GNU 的版本中才有，在我的 Mac 上的 BSD 版本的 grep 中，并没有这个参数。</p>

<p>所幸的是今天无聊翻了翻 grep 的 man page，发现了几个更加方便的方法也更加通用的办法，在这里和大家分享一下：</p>

<h3 id="grep--invert-match">grep 的 invert match</h3>

<p>今天翻 grep 的 man page，发现了一个 <code>-v</code> 参数，它的说明是这样的：</p>

<blockquote>
  <p>Selected lines are those not matching any of the specified patterns.</p>
</blockquote>

<p>正是我们想要，可以传入一个正则表达式，它帮你匹配不符合这个正则表达式的行，而且 <code>-v</code> 参数各个 grep 的版本都支持，无需担心换个系统就不能用的情况。</p>

<h3 id="sed--pattern-">采用 sed 来删除符合某个 pattern 的行</h3>

<p>其实不用 grep，用 sed 也可以做到这个需求，sed 本身就是一个强大的行处理工具，sed 可以用如下的方式把符合某个 pattern 的行给删除掉：</p>

<p><code>
sed '/pattern/D'
</code></p>

<p>怎么样？也是非常方便的吧，它可以做到和 grep 一样的功能，非常有效。</p>

<h3 id="sed--pattern--1">采用 sed 来打印不符合某个 pattern 的行</h3>

<p>要用 sed 来解决这个问题，其实不止上面一个方法，还可以用以下的方法来做：</p>

<p><code>
sed -n '/pattern/!p'
</code></p>

<p>解释一下这段 sed 脚本的作用，首先是 <code>-n</code> 参数，大家知道 sed 的默认将处理和没有处理过的行都定向到输出流上，而 <code>-n</code> 参数是用来关闭这个功能，我们当然不希望 sed 将所有的行都打印出来。然后脚本的开始是一个行的选择器，前面是一个正则表达式（sed 的正则表达式都是放在两个斜杠之间的），后面的是一个<code>!</code>号，这样就表示选择反向选择，即选择不符合 pattern 的行，然后最后是一个 <code>p</code> 命令，把这样的行打印出来，这里的 pattern 当然可以是需求中的那个连续的字符串，这样，我们就达到了需求的目的了。</p>

<p>总结一下，推荐大家还是用 grep 的 invert match 或者 sed 来完成这个功能，零宽断言在解决这个问题上感觉有点杀鸡焉用牛刀（<strong>零宽断言还有很多适用的场景，不仅仅可以用来解决这个问题</strong>）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cURL 使用简介]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/18/curl/"/>
    <updated>2013-07-18T22:05:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/18/curl</id>
    <content type="html"><![CDATA[<p><a href="http://curl.haxx.se/">cURL</a> 这个神器相信很多人都已经用过，简单地说，cURL 就是一个和服务器端通信的工具，至于用什么协议，cURL 支持各种各样的协议，包括 HTTP，FTP，SMTP 等等协议，可以说是应有尽有。</p>

<p>cURL 的可用的参数非常非常多，你能想到的基本上都有，不过一般使用的就那么几个参数吧，这里就介绍下我常常用到的两个：</p>

<h3 id="post-">使用 Post 提交数据</h3>

<p>有些服务器端限制了你只能用 POST 的方式提交数据，这个时候如果你就不能通过在 URL 上加上参数的方式来提交数据了，cURL 提供了一个 <code>-d</code> 参数来让你可以用 POST 的方式把数据提交上去，例如：</p>

<p><code>
curl http://ka.178.com/receive/index -d "activity_id=3403"
</code></p>

<p>这个请求只用了一个参数，多个参数可以 <code>&amp;</code> 符号作链接。</p>

<h3 id="cookie-">附带 Cookie 到请求上</h3>

<p>使用 cURL 的另一个经常需要做的事情就是需要拿到用户的登录信息，这些登录信息往往放在 cookie 里面，这样你就需要把 cookie 信息附加在请求上提交到服务器，让服务器认为你是处于登录的状态，cURL 提供了一个 <code>--cookie</code> 的参数让你可以附上 cookie：</p>

<p><code>
curl http://ka.178.com/receive/index -cookie "__utma=2582276614.13325.133516.3;"
</code></p>

<p>如果嫌 <code>--cookie</code> 太长，可以用 <code>-b</code>，<code>-b</code> 是 <code>--cookie</code> 的简写。</p>

<h3 id="section">显示出请求的头信息</h3>

<p>对于有一些请求，比如那些返回 302 状态码的请求，cURL 默认情况下是不会输出任何内容的，这种请求下，我们就不知道它是返回了 200 而响应体里面没有任何内容还是因为是 302 而没有任何内容呢，这个时候我们就可以通过 <code>-D</code>（<code>--dump-header</code>）参数来显示请求的响应头，不过 <code>-D</code> 参数后面要加上一个文件，如果我们想直接输出到终端，那么就可以这么干：</p>

<p><code>
curl -D /dev/stdout http://xxxxx.com/xxxx.html
</code></p>

<p>直接将内容输出到设备 stdout 下就可以（感谢 Unix，一切皆文件！）。</p>
]]></content>
  </entry>
  
</feed>
