<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Regex | 小径分岔的花园]]></title>
  <link href="http://khotyn.github.com/blog/categories/regex/atom.xml" rel="self"/>
  <link href="http://khotyn.github.com/"/>
  <updated>2018-03-24T16:44:20+08:00</updated>
  <id>http://khotyn.github.com/</id>
  <author>
    <name><![CDATA[khotyn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[再论如何匹配不包含连续字符串的行]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/24/match-line-not-contain-a-string/"/>
    <updated>2013-07-24T22:35:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/24/match-line-not-contain-a-string</id>
    <content type="html"><![CDATA[<p>在前一篇文章中，我讨论过如何使用<a href="http://blog.khotyn.com/blog/2013/07/24/zero-width-assert/">使用零宽断言来匹配不包含连续字符串的行</a>，这个方法采用了零宽断言这种不怎么常见的正则表达式用法，虽然行之有效，但是总归是个麻烦的方法，而且，零宽断言很多的正则表达式解释器都不支持，用 grep 的话，得加上 -P 参数，让 grep 采用 Perl 的方式解释正则表达式，更加遗憾的一点是 -P 参数似乎只有在 GNU 的版本中才有，在我的 Mac 上的 BSD 版本的 grep 中，并没有这个参数。</p>

<p>所幸的是今天无聊翻了翻 grep 的 man page，发现了几个更加方便的方法也更加通用的办法，在这里和大家分享一下：</p>

<h3 id="grep--invert-match">grep 的 invert match</h3>

<p>今天翻 grep 的 man page，发现了一个 <code>-v</code> 参数，它的说明是这样的：</p>

<blockquote>
  <p>Selected lines are those not matching any of the specified patterns.</p>
</blockquote>

<p>正是我们想要，可以传入一个正则表达式，它帮你匹配不符合这个正则表达式的行，而且 <code>-v</code> 参数各个 grep 的版本都支持，无需担心换个系统就不能用的情况。</p>

<h3 id="sed--pattern-">采用 sed 来删除符合某个 pattern 的行</h3>

<p>其实不用 grep，用 sed 也可以做到这个需求，sed 本身就是一个强大的行处理工具，sed 可以用如下的方式把符合某个 pattern 的行给删除掉：</p>

<p><code>
sed '/pattern/D'
</code></p>

<p>怎么样？也是非常方便的吧，它可以做到和 grep 一样的功能，非常有效。</p>

<h3 id="sed--pattern--1">采用 sed 来打印不符合某个 pattern 的行</h3>

<p>要用 sed 来解决这个问题，其实不止上面一个方法，还可以用以下的方法来做：</p>

<p><code>
sed -n '/pattern/!p'
</code></p>

<p>解释一下这段 sed 脚本的作用，首先是 <code>-n</code> 参数，大家知道 sed 的默认将处理和没有处理过的行都定向到输出流上，而 <code>-n</code> 参数是用来关闭这个功能，我们当然不希望 sed 将所有的行都打印出来。然后脚本的开始是一个行的选择器，前面是一个正则表达式（sed 的正则表达式都是放在两个斜杠之间的），后面的是一个<code>!</code>号，这样就表示选择反向选择，即选择不符合 pattern 的行，然后最后是一个 <code>p</code> 命令，把这样的行打印出来，这里的 pattern 当然可以是需求中的那个连续的字符串，这样，我们就达到了需求的目的了。</p>

<p>总结一下，推荐大家还是用 grep 的 invert match 或者 sed 来完成这个功能，零宽断言在解决这个问题上感觉有点杀鸡焉用牛刀（<strong>零宽断言还有很多适用的场景，不仅仅可以用来解决这个问题</strong>）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用零宽断言来匹配不包含连续字符串的行]]></title>
    <link href="http://khotyn.github.com/blog/2013/07/24/zero-width-assert/"/>
    <updated>2013-07-24T16:34:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/07/24/zero-width-assert</id>
    <content type="html"><![CDATA[<p>最近在工作中遇到一个问题，有 N 个字符串，需要用正则表达式去过滤掉不包含某一个特定连续字符串(比如abc)的字符串。</p>

<p>在网上搜罗了一大把，找到了在 Perl 5 的正则表达式中有零宽断言这个东西，非常强大，先来了解下零宽断言倒是是什么？</p>

<p>简单的说，零宽断言是查找在某些内容之前或者之后的东西，这样解释起来可能比较抽象，我们来具体看下几种零宽断言：</p>

<ul>
  <li>(?=exp)：这个零宽断言用来断言自身出现的位置之后能够匹配到表达式 exp，考虑下面这一个正则表达式 q(?=u)，这个正则表达式表示匹配后面的字符是 u 的 q</li>
  <li>(?!exp)：这个零宽断言用来断言自身出现的位置之后不能够匹配到表达式 exp，看下面这一个正则表达式 q(?!u)，这个正则表达式表示匹配后面的字符不是 u 的 q</li>
  <li>(?&lt;=exp)：这个零宽断言用来断言自身出现的位置之前能够匹配到表达式 exp</li>
  <li>(?&lt;!exp)：这个零宽断言用来断言自身出现的位置之前不能够匹配到表达式 exp</li>
</ul>

<p>在理解零宽断言的时候需要注意的一点是它是一种断言，也就是说零宽断言只会告诉你匹不匹配，但是不会“消费”掉字符串内的内容，我用下面的这一个例子来解释这个情况：</p>

<p>我们有一个正则表达式 <code>k(?=h)otyn</code>，用它去匹配 khotyn，乍看一下这个匹配是会成功的，但是由于零宽断言只做断言，而不会”<strong>消费</strong>“掉匹配到的字符串，所以事实上，这个正则表达式匹配是一个后面是 h 的 k，并且这个 k 的后面是 otyn，这样这个正则表达式无论什么字符串都会匹配失败(正确的应该是 <code>k(?=h)hotyn</code>，不过这样加不加零宽断言并没有意义)。</p>

<p>在理解零宽断言以后，我们来看一下如何来匹配出不包含“abc”的字符串，下面是我写出的结果：</p>

<p><code>
((?!abc).)+
</code></p>

<p>首先我们看这个正则表达式里面的 <code>(?!abc).</code> 部分，这个部分断言一个空字符后面不能够匹配到字符串abc，并且这个空字符串后面是一个任意字符。</p>

<p>我们来看下下面这一段代码：</p>

<p><code>java
Pattern pattern = new Perl5Compiler().compile("((?!abc).)+");  
Perl5Matcher matcher = new Perl5Matcher();  
System.out.println(matcher.matches("abc", pattern));  
System.out.println(matcher.matches("abdas dfas", pattern));  
</code></p>

<p>这段代码的执行结果是：</p>

<p><code>
false
true
</code>
第一个匹配失败是因为在字符 ‘a’ 前面的空字符后面匹配到了字符串 “abc”，因此断言失败，从而匹配失败。</p>

<p>第二个匹配成功是因为没有任何一个空字符后面有出现 “abc” ，因为匹配成功。</p>

<p>最后加上 + 号的原因是因为能够做到完全匹配，因为任何一个字符只要其本身不是 ‘a’，并且后面不是 ‘bc’，那么就是能够匹配 “(?!abc).” 的，因此，只要一个字符串里面不包含 abc，那么它就能够完全匹配 ((?abc).)+</p>

<p><strong>PS：这片文章其实是前几年写的，之前的博客被关闭了，数据丢了，幸好当时在 Iteye 上还有一份，于是就迁移过来。这几年我经常用这个方式来分析线上服务器的日志，可以说，有了零宽断言，省去了非常多的麻烦~，定位问题的速度也快了不少，零宽断言的确是一个非常犀利的东西。</strong></p>
]]></content>
  </entry>
  
</feed>
