<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 小径分岔的花园]]></title>
  <link href="http://khotyn.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://khotyn.github.com/"/>
  <updated>2018-03-21T16:38:34+08:00</updated>
  <id>http://khotyn.github.com/</id>
  <author>
    <name><![CDATA[khotyn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JVM 对 NoClassDefFoundError 的“缓存”]]></title>
    <link href="http://khotyn.github.com/blog/2015/02/15/jvm-noclassdeffounterror-cache/"/>
    <updated>2015-02-15T20:44:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2015/02/15/jvm-noclassdeffounterror-cache</id>
    <content type="html"><![CDATA[<h2 id="section">问题</h2>

<p>今天在排查一个线上的问题，线上的一个应用在初始化一个类的静态字段的时候出现了 <code>NoClassDefFoundError</code>，并且在导致 <code>NoClassDefFoundError</code> 出现的根本原因消失后，后续再次尝试初始化这个类的时候，持续出现了 <code>NoClassDefFoundError</code>。</p>

<p>于是怀疑 JVM 是不是对一个类的 <code>NoClassDefFoundError</code> 做了缓存，在第一次加载这个类出现 <code>NoClassDefFoundError</code> 以后，后续再尝试加载就直接抛出 <code>NoClassDefFoundError</code>。</p>

<h2 id="section-1">实验</h2>

<p>为了证实自己的猜想，尝试设计了一个简单的实验，一个涉及三个类</p>

<p><code>java
public class Test1 {
    static Test2 test2 = new Test2();
}
</code></p>

<p><code>java
public class Test2 {
}
</code></p>

<p>```java
public class Test {
    public static void main(String… args) throws Exception {
        while(true) {
            System.out.println(“================================”);
            try {
                new Test1(); // 尝试实例化 Test1，触发 NoClassDefFoundError
            } catch (Throwable e) {
                e.printStackTrace();</p>

<pre><code>            try {
                Test.class.getClassLoader().loadClass("Test2"); // 尝试加载 Test2，用于证实当将 
                                                                // Test2.class 拷贝到 ClassPath 下的时候，
                                                                // Test2 就可以加载到了。
            } catch (Throwable ex) {
                ex.printStackTrace();
            }
        }
        Thread.sleep(3000);
    }
} } ```
</code></pre>

<p>上述类的的作用是：Test2 是一个空的类，Test1 里面有一个 Test2 的静态成员。Test 是程序的主入口，在一个无限循环内部，不断地尝试去实例化 Test1，并且在加载 Test1 出现异常的时候，尝试加载一下 Test2。</p>

<p>实验的步骤是：</p>

<ol>
  <li>编译以上类，运行 <code>javac Test.java</code></li>
  <li>将生成出的 Test2.class 重命名成 Test2.class.bak</li>
  <li>运行 <code>java Test</code>，这个时候程序去加载 Test1 的时候，就会出现 <code>NoClassDefFoundError</code>，并且在尝试加载 Test2 的时候，会出现 <code>ClassNotFoundException</code>。</li>
  <li>将第二步重命名的 Test2.class.bak 该回成 Test2.class，这个时候程序去加载 Test1 的时候，就会出现 <code>NoClassDefFoundError</code>，在加载 Test2 的时候，不会出现 <code>ClassNotFoundException</code>。</li>
</ol>

<p>实验的第二步的目的是为了程序在加载 Test1 的时候因为找不到 Test2 出现 <code>NoClassDefFoundError</code>，第四步是为了和第二步做对照，说明在后续程序可以加载到 Test2 的时候，在实例化 Test1 的时候，依旧出现 <code>NoClassDefFoundError</code></p>

<p>在我的机器上，按照上面的方式去操作，结果如下：</p>

<p><img src="/images/cnf.png" alt="NoClassDefFoundError" /></p>

<p>结果正如预期，即使在后面 Test2 在 ClassPath 下的时候，<code>NoClassDefFoundError</code> 依旧出现，所以 JVM 里面肯定有地方对 <code>NoClassDefFoundError</code> 做了缓存。</p>

<h2 id="jvm-">JVM 里面的实现</h2>

<p>带着这个疑问，请教了部门里面的 JVM 专家，这个猜测得到了证实，并且他给出了 JVM 内部具体处理这段逻辑的代码，处理的代码在 JDK 的 <code>instanceKlass.cpp</code> 这个文件里面：</p>

<p><code>java
bool instanceKlass::link_class_impl(
     instanceKlassHandle this_oop, bool throw_verifyerror, TRAPS) {
   // check for error state
   if (this_oop-&gt;is_in_error_state()) {
     ResourceMark rm(THREAD);
     THROW_MSG_(vmSymbols::java_lang_NoClassDefFoundError(),
                this_oop-&gt;external_name(), false);
   }
   // return if already verified
   if (this_oop-&gt;is_linked()) {
     return true;
   }
</code></p>

<p>并且在 <code>instanceClass.hpp</code> 这个文件中，定义了类的 <code>_init_state</code>，其中，<code>is_in_error_state</code> 这个方法的定义如下：</p>

<p><code>cpp
bool is_in_error_state() const           { return _init_state == initialization_error; }
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关闭 Tomcat 的 TLD 扫描的功能]]></title>
    <link href="http://khotyn.github.com/blog/2014/01/21/turnoff-tomcat-tld-scan/"/>
    <updated>2014-01-21T19:12:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/01/21/turnoff-tomcat-tld-scan</id>
    <content type="html"><![CDATA[<h3 id="section">背景</h3>

<p>Tomcat 作为 Servlet 规范的实现者，它在应用启动的时候会扫描 Jar 包里面的 .tld 文件，加载里面定义的标签库，但是，我们在开发的时候很多都不是采用 JSP 作为 Web 页面的模板的，很多都是使用  Velocity 之类的模板引擎，自然而然，为了加快应用的启动速度，我们可以把 Tomcat 里面的这个功能给关掉。</p>

<h3 id="section-1">方法</h3>

<p>看 Tomcat 的配置文档，关于 Context 的设置这一块，看到了 <code>processTlds</code> 这个属性可以设置，看下这个属性的说明：</p>

<blockquote>
  <p>Whether the context should process TLDs on startup. The default is true. The false setting is intended for special cases that know in advance TLDs are not part of the webapp.</p>
</blockquote>

<p>只要在 Context 中把这个属性设置成 false，那么我们就可以关闭 Tomcat 的 TLD 扫描功能了，为了让所有的应用都可以关闭这个功能，我们可以将 Tomcat 目录下的 conf/context.xml 修改成如下这样：</p>

<p>```
<?xml version='1.0' encoding='utf-8'?>
<context processtlds="false">
    <watchedresource>WEB-INF/web.xml</watchedresource>
</context></p>

<p>```</p>

<h4 id="section-2">坑</h4>

<p>但是，在 Tomcat 6 中测试的时候，发现这个功能没有生效，无奈只能 Debug Tomcat 的源码，发现 StandardContext 的 init 方法下有如下代码：</p>

<p>```
if (processTlds) {
    this.addLifecycleListener(new TldConfig());
}</p>

<p>super.init();</p>

<p>// Notify our interested LifecycleListeners
lifecycle.fireLifecycleEvent(INIT_EVENT, null);
```</p>

<p>这里需要说明的一点是，我们的默认的 context 配置是在 <code>lifecycle.fireLifecycleEvent(INIT_EVENT, null);</code> 这行代码中被处理的，而在这行代码之前，Tomcat 就已经使用了 <code>processTlds</code>，我们的配置完全没有生效。</p>

<h4 id="workaround">Workaround</h4>

<p>那么，这么解决呢？在 context 中，我们还可以配置一个 JarScanner，这个 JarScanner 会被用来扫描 Jar 包中的 tld 文件，我们可以在默认的 context.xml 中配置一个空的 JarScanner，像下面这样：</p>

<p><code>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;Context processTlds="false"&gt;
    &lt;JarScanner className="com.alipay.sofa.runtime.test.patch.tomcat.NullJarScanner"/&gt;
&lt;/Context&gt;
</code></p>

<p>NullJarScanner 的代码如下：</p>

<p>```
package com.alipay.sofa.runtime.test.patch.tomcat;</p>

<p>import org.apache.tomcat.JarScanner;
import org.apache.tomcat.JarScannerCallback;</p>

<p>import javax.servlet.ServletContext;
import java.util.Set;</p>

<p>/**
 * @author khotyn 14-1-21 下午4:37
 */
public class NullJarScanner implements JarScanner {
    @Override
    public void scan(ServletContext context, ClassLoader classloader, JarScannerCallback callback, Set<string> jarsToSkip) {
        // Do nothing at all.
    }
}</string></p>

<p>```</p>

<p><strong>需要注意的是，Tomcat 7 不会出现上述的问题，你只要在配置中把 processTlds 设置成 false 即可。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 之 default method]]></title>
    <link href="http://khotyn.github.com/blog/2014/01/19/java-8-default-method/"/>
    <updated>2014-01-19T22:13:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/01/19/java-8-default-method</id>
    <content type="html"><![CDATA[<p>如果进度正常，新版本的 Java，Java 8 将在三月份发布，Java 开发人员期待已久的 lambda 也将在 Java 8 中得到支持。目前，Java 8 的早期版本已经可以在 Java 的网站上下载到了，Intellij IDEA 也已经在其最新的版本支持了 Java 8。所以，最近花了点时间了解了一下 Java 8 中新增加的一些特性。</p>

<p>由于 lambda 的引入，Java 8 对原来的集合类做了大幅的更新，让集合操作可以支持 lambda 表达式。在看新的的集合类的代码的时候，发现了 java 8 似乎增加了一个新的方法描述符，比如在 <code>java.lang.Iterable</code> 里面就新加入了下面这个方法：</p>

<p><code>java
default void forEach(Consumer&lt;? super T&gt; action) {
    Objects.requireNonNull(action);
    for (T t : this) {
        action.accept(t);
    }
}
</code></p>

<p>在方法的最前面，是一个 <code>default</code> 描述符。等等，Iterable 不是个接口吗，怎么有具体的实现代码了？</p>

<p>这个 default 就是在 java 8 中新引入的，它可以让你的接口有一个默认的实现，接口的实现类可以不用去实现 default method，比如，下面这段代码，是可以正常编译通过的：</p>

<p>```java
class Impl implements A {</p>

<p>}</p>

<p>interface A {
    default String foo() {
        return “A”;
    }
}
```</p>

<p>引入 default 的带来的一个好处就是在现有的接口上增加方法而不用让其实现修改代码，通过这种机制，Java 8 可以通过平滑的方式在原有的 Java 的 API 上引入 lambda 的支持。</p>

<p>那么，如果一个类实现了两个接口，这两个接口里面有方法签名相同的 default method，那运行的时候到底会选择哪一个？答案是编译不通过，如果出现这种情况，实现类必须实现 default method，以消除歧义，比如下面这样。</p>

<p>```java
class MultiImpl implements A, B {</p>

<pre><code>/**
 * 由于 A，B 中都有 String foo() 接口，不知道要调用哪个，所以实现类必须实现一下
 *
 * @return
 */
@Override
public String foo() {
    return "C";
} }
</code></pre>

<p>interface A {
    default String foo() {
        return “A”;
    }
}</p>

<p>interface B {
    default String foo() {
        return “B”;
    }
}
```</p>

<p>当然，在的实现类中，也可以直接调用某个接口的 default method：</p>

<p><code>java
class MultiImplInvokeSuper implements A, B {
    @Override
    public String foo() {
        return B.super.foo();
    }
}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jvmtop 介绍和实现分析]]></title>
    <link href="http://khotyn.github.com/blog/2013/11/02/jvmtop-impl/"/>
    <updated>2013-11-02T15:36:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/11/02/jvmtop-impl</id>
    <content type="html"><![CDATA[<h3 id="section">简介</h3>

<p>jvmtop 是一个分析工具，顾名思义，它是一个针对 jvm 的 工具，展示的方式和 unix 的 top 命令相似。</p>

<p>jvmtop 的项目地址是：<a href="https://code.google.com/p/jvmtop/">jvmtop</a>，安装 jvmtop 除了项目地址上的方式以外，还可以通过 jenv 安装：<code>jenv install jvmtop</code>。</p>

<p>jvmtop 提供了两个视图，一个是概览视图，可以展示出当前机器的所有的 JVM 的情况，命令是 </p>

<p><code>
jvmtop.sh
</code></p>

<p>显示出的信息类似下面这样：</p>

<p><img src="http://pic.yupoo.com/khotyn/DhvVumOY/medish.jpg" alt="image" /></p>

<p>其中，各个字段的意义分别如下：</p>

<ul>
  <li>PID：进程 ID</li>
  <li>MAIN-CLASS：main 类的名字</li>
  <li>HPCUR：当前被使用的 heap 的大小</li>
  <li>HPMAX：最大可用的 heap 的大小</li>
  <li>NHCUR：当前被使用的非 heap 大小（比如：perm gen）</li>
  <li>NHMAX：最大可用的非 heap 大小</li>
  <li>CPU：CPU 的使用情况</li>
  <li>GC：消耗在 GC 上的时间比例</li>
  <li>VM：JVM 的提供者，大版本号，小版本号，图中的意思是 Apple 提供的 JDK 6U51 版本。</li>
  <li>USERNAME：当前的用户名</li>
  <li>#T：线程数量</li>
  <li>DL：是否有现成发生死锁</li>
</ul>

<p>还有一个视图是详情视图，展示一个 JVM 的详细情况，使用的命令如下：</p>

<p><code>
jvmtop.sh &lt;pid&gt;
</code></p>

<p>显示的信息类似下面这样：</p>

<p><img src="http://pic.yupoo.com/khotyn/Dhw0sotX/dTwsh.png" alt="image" /></p>

<p>其中，各个字段的意义如下：</p>

<ul>
  <li>TID：线程 ID</li>
  <li>NAME：线程名</li>
  <li>STATE：线程状态</li>
  <li>CPU：线程当前的 CPU 占用情况</li>
  <li>TOTALCPU：从线程被创建开始总体的 CPU 占用情况</li>
  <li>BLOCKBY：阻塞这个线程的线程 ID</li>
</ul>

<p>更加详细的用法大家可以用下面的用 <code>jvmtop.sh -h</code> 来查看。</p>

<h3 id="section-1">实现</h3>

<p>jvmtop 的实现相对来说还是比较简单的，整个 jvmtop 才 14 个类。</p>

<p><img src="http://pic.yupoo.com/khotyn/DhwgtqPY/IYHUw.png" alt="image" /></p>

<p>其中 JvmTop.java 是入口类。</p>

<p>jvmtop 在启动后，会首先用 <code>sun.jvmstat.monitor.*</code> 下面的类以及 <code>com.sun.tools.attach.VirtualMachine</code> 获取到当前机器的所有的 JVM，然后通过 attachment api 将 <code>management-agent.jar</code> 这个 agent 加载到目标 JVM 上，这样，通过 JMX，就可以拿到当前的 JVM 的各种信息了，具体各个信息需要用什么样的 MBean 去拿，大家可以看对应的源代码。</p>

<p>其实，如果需要一个 JVM 的静态的信息，比如，PID，MAIN-CLASS，JVM-ARGS 等等静态信息，直接用 <code>sun.jvmstat.monitor.*</code> 下的 API 就可以，只有需要动态信息的时候，我们才需要通过 attachment api 把 JMX 的功能打开，通过各种 MBean 去获取这些信息。如果后续需要实现类似的功能，也可以通过这样的思路去做。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Bean 的布尔类型属性获取问题]]></title>
    <link href="http://khotyn.github.com/blog/2013/09/25/java-bean-boolean/"/>
    <updated>2013-09-25T18:38:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/09/25/java-bean-boolean</id>
    <content type="html"><![CDATA[<h3 id="velocity--java-bean-">Velocity 对 Java Bean 中布尔类型的属性的获取问题</h3>

<p>今天朋友遇到一个问题，是 Velocity 下面一个 <code>Boolean</code> 类型的变量在模板上没有办法输出，我大致简化一下这个问题，现在我们有一个简单的 Java Bean：</p>

<p>```java
public class SimpleBean {
    private Boolean hasKatong = false;</p>

<pre><code>public Boolean isHasKatong() {
    return hasKatong;
}

public void setHasKatong(Boolean hasKatong) {
    this.hasKatong = hasKatong;
} } ```
</code></pre>

<p>然后有一个简单的模板：</p>

<p><code>java
$simpleBean.hasKatong
</code></p>

<p>模板合并的代码如下：</p>

<p><code>java
public static void main(String[] args) throws Exception {
    Properties p = new Properties();
    p.put("resource.loader", "class");
    p.put("class.resource.loader.class",
        "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader");
    Velocity.init(p);
    VelocityContext context = new VelocityContext();
    context.put("simpleBean", new SimpleBean());
    Template template = Velocity.getTemplate("mytemplate.vm");
    StringWriter sw = new StringWriter();
    template.merge(context, sw);
    System.out.println(sw.toString());
}
</code></p>

<p>大家猜测一下这段代码的输出会是什么？可能大多数人都会认为是 <code>false</code>，但是在 Velocity 1.5 下，这段代码不会输出任何东西，反而会有一个 Warning：</p>

<blockquote>
  <p>INFO: Null reference [template ‘mytemplate.vm’, line 1, column 1] : $simpleBean.hasKatong cannot be resolved.</p>
</blockquote>

<p>而在 Velocity 1.7 下，输出就是如大家所预测的那样，是 <code>false</code>。</p>

<p>具体的分析过程并不复杂，Velocity 1.5 和 1.7 在寻找 isXXXX 这样的方法的时候处理稍微有一点不一样，具体在 <code>BooleanPropertyExecutor</code> 这个类上，在找到方法，对方法的返回值的判断上有一点不一样，1.5 是这样的：</p>

<p><code>java
if (isAlive()) {
    if (getMethod().getReturnType() != Boolean.TYPE) {
        setMethod(null);
    }
}
</code></p>

<p>而 1.7 的是这样的：</p>

<p><code>java
if (isAlive())
{
    if( getMethod().getReturnType() != Boolean.TYPE &amp;&amp;
        getMethod().getReturnType() != Boolean.class )
    {
        setMethod(null);
    }
}
</code></p>

<p>可以看到，1.7 中增加了对返回值是 <code>Boolean</code> 的支持，而 1.5 只支持返回值是 <code>boolean</code> 的方法，那么既然知道了问题的根本原因，解决方法就显而易见了，要么将 <code>hasKatong</code> 这个属性的类型从 <code>Boolean</code> 改成 <code>boolean</code>，要么修改下 velocity 的模板，将属性获取直接改成方法调用：<code>$simpleBean.isHasKatong()</code>。</p>

<h3 id="java-bean-">Java Bean 规范对布尔类型属性的定义</h3>

<p>当然，照理说像 velocity 这样的著名开源组件，不应该在这种问题上犯错误，然后我看了一下 Java Bean 的规范：</p>

<p><img src="http://pic.yupoo.com/khotyn/DbKXKmwa/medish.jpg" alt="image" /></p>

<p>其实这段话已经说的很清楚了，只有原生类型的 <code>boolean</code> 的 Accessor 方法才能够用 <strong>is</strong> 前缀，其他的都用 get，其实在 JDK 的 Introspector 的实现中，也是这样处理的。</p>

<p>那么，这么看来，Velocity 1.5 的处理是正确的，那么 1.7 增加对 <code>Boolean</code> 的支持是为什么呢？</p>

<p>其实，Java Bean 的规范在 <code>is</code> 这种 Accessor 的规定上，是有点不怎么符合开发人员的直觉的，很多人都会在这个问题上纠结：<strong><code>Boolean</code> 类型的属性的 Accessor 是不是应该用 is 开头？</strong>，我觉得大部分人的直觉对这个答案的回答应该都是<em>是</em>，所以 Velocity 这样处理只不过是顺着大多数人的直觉的意思罢了，无可厚非。</p>
]]></content>
  </entry>
  
</feed>
