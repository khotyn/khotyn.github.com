<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 小径分岔的花园]]></title>
  <link href="http://khotyn.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://khotyn.github.com/"/>
  <updated>2014-10-19T22:29:16+08:00</updated>
  <id>http://khotyn.github.com/</id>
  <author>
    <name><![CDATA[khotyn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关闭 Tomcat 的 TLD 扫描的功能]]></title>
    <link href="http://khotyn.github.com/blog/2014/01/21/turnoff-tomcat-tld-scan/"/>
    <updated>2014-01-21T19:12:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/01/21/turnoff-tomcat-tld-scan</id>
    <content type="html"><![CDATA[<h3 id="section">背景</h3>

<p>Tomcat 作为 Servlet 规范的实现者，它在应用启动的时候会扫描 Jar 包里面的 .tld 文件，加载里面定义的标签库，但是，我们在开发的时候很多都不是采用 JSP 作为 Web 页面的模板的，很多都是使用  Velocity 之类的模板引擎，自然而然，为了加快应用的启动速度，我们可以把 Tomcat 里面的这个功能给关掉。</p>

<h3 id="section-1">方法</h3>

<p>看 Tomcat 的配置文档，关于 Context 的设置这一块，看到了 <code>processTlds</code> 这个属性可以设置，看下这个属性的说明：</p>

<blockquote>
  <p>Whether the context should process TLDs on startup. The default is true. The false setting is intended for special cases that know in advance TLDs are not part of the webapp.</p>
</blockquote>

<p>只要在 Context 中把这个属性设置成 false，那么我们就可以关闭 Tomcat 的 TLD 扫描功能了，为了让所有的应用都可以关闭这个功能，我们可以将 Tomcat 目录下的 conf/context.xml 修改成如下这样：</p>

<p>```
<?xml version='1.0' encoding='utf-8'?>
<context processtlds="false">
    <watchedresource>WEB-INF/web.xml</watchedresource>
</context></p>

<p>```</p>

<h4 id="section-2">坑</h4>

<p>但是，在 Tomcat 6 中测试的时候，发现这个功能没有生效，无奈只能 Debug Tomcat 的源码，发现 StandardContext 的 init 方法下有如下代码：</p>

<p>```
if (processTlds) {
    this.addLifecycleListener(new TldConfig());
}</p>

<p>super.init();</p>

<p>// Notify our interested LifecycleListeners
lifecycle.fireLifecycleEvent(INIT_EVENT, null);
```</p>

<p>这里需要说明的一点是，我们的默认的 context 配置是在 <code>lifecycle.fireLifecycleEvent(INIT_EVENT, null);</code> 这行代码中被处理的，而在这行代码之前，Tomcat 就已经使用了 <code>processTlds</code>，我们的配置完全没有生效。</p>

<h4 id="workaround">Workaround</h4>

<p>那么，这么解决呢？在 context 中，我们还可以配置一个 JarScanner，这个 JarScanner 会被用来扫描 Jar 包中的 tld 文件，我们可以在默认的 context.xml 中配置一个空的 JarScanner，像下面这样：</p>

<p><code>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;Context processTlds="false"&gt;
    &lt;JarScanner className="com.alipay.sofa.runtime.test.patch.tomcat.NullJarScanner"/&gt;
&lt;/Context&gt;
</code></p>

<p>NullJarScanner 的代码如下：</p>

<p>```
package com.alipay.sofa.runtime.test.patch.tomcat;</p>

<p>import org.apache.tomcat.JarScanner;
import org.apache.tomcat.JarScannerCallback;</p>

<p>import javax.servlet.ServletContext;
import java.util.Set;</p>

<p>/**
 * @author khotyn 14-1-21 下午4:37
 */
public class NullJarScanner implements JarScanner {
    @Override
    public void scan(ServletContext context, ClassLoader classloader, JarScannerCallback callback, Set<string> jarsToSkip) {
        // Do nothing at all.
    }
}</string></p>

<p>```</p>

<p><strong>需要注意的是，Tomcat 7 不会出现上述的问题，你只要在配置中把 processTlds 设置成 false 即可。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 之 default method]]></title>
    <link href="http://khotyn.github.com/blog/2014/01/19/java-8-default-method/"/>
    <updated>2014-01-19T22:13:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/01/19/java-8-default-method</id>
    <content type="html"><![CDATA[<p>如果进度正常，新版本的 Java，Java 8 将在三月份发布，Java 开发人员期待已久的 lambda 也将在 Java 8 中得到支持。目前，Java 8 的早期版本已经可以在 Java 的网站上下载到了，Intellij IDEA 也已经在其最新的版本支持了 Java 8。所以，最近花了点时间了解了一下 Java 8 中新增加的一些特性。</p>

<p>由于 lambda 的引入，Java 8 对原来的集合类做了大幅的更新，让集合操作可以支持 lambda 表达式。在看新的的集合类的代码的时候，发现了 java 8 似乎增加了一个新的方法描述符，比如在 <code>java.lang.Iterable</code> 里面就新加入了下面这个方法：</p>

<p><code>java
default void forEach(Consumer&lt;? super T&gt; action) {
    Objects.requireNonNull(action);
    for (T t : this) {
        action.accept(t);
    }
}
</code></p>

<p>在方法的最前面，是一个 <code>default</code> 描述符。等等，Iterable 不是个接口吗，怎么有具体的实现代码了？</p>

<p>这个 default 就是在 java 8 中新引入的，它可以让你的接口有一个默认的实现，接口的实现类可以不用去实现 default method，比如，下面这段代码，是可以正常编译通过的：</p>

<p>```java
class Impl implements A {</p>

<p>}</p>

<p>interface A {
    default String foo() {
        return “A”;
    }
}
```</p>

<p>引入 default 的带来的一个好处就是在现有的接口上增加方法而不用让其实现修改代码，通过这种机制，Java 8 可以通过平滑的方式在原有的 Java 的 API 上引入 lambda 的支持。</p>

<p>那么，如果一个类实现了两个接口，这两个接口里面有方法签名相同的 default method，那运行的时候到底会选择哪一个？答案是编译不通过，如果出现这种情况，实现类必须实现 default method，以消除歧义，比如下面这样。</p>

<p>```java
class MultiImpl implements A, B {</p>

<pre><code>/**
 * 由于 A，B 中都有 String foo() 接口，不知道要调用哪个，所以实现类必须实现一下
 *
 * @return
 */
@Override
public String foo() {
    return "C";
} }
</code></pre>

<p>interface A {
    default String foo() {
        return “A”;
    }
}</p>

<p>interface B {
    default String foo() {
        return “B”;
    }
}
```</p>

<p>当然，在的实现类中，也可以直接调用某个接口的 default method：</p>

<p><code>java
class MultiImplInvokeSuper implements A, B {
    @Override
    public String foo() {
        return B.super.foo();
    }
}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jvmtop 介绍和实现分析]]></title>
    <link href="http://khotyn.github.com/blog/2013/11/02/jvmtop-impl/"/>
    <updated>2013-11-02T15:36:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/11/02/jvmtop-impl</id>
    <content type="html"><![CDATA[<h3 id="section">简介</h3>

<p>jvmtop 是一个分析工具，顾名思义，它是一个针对 jvm 的 工具，展示的方式和 unix 的 top 命令相似。</p>

<p>jvmtop 的项目地址是：<a href="https://code.google.com/p/jvmtop/">jvmtop</a>，安装 jvmtop 除了项目地址上的方式以外，还可以通过 jenv 安装：<code>jenv install jvmtop</code>。</p>

<p>jvmtop 提供了两个视图，一个是概览视图，可以展示出当前机器的所有的 JVM 的情况，命令是 </p>

<p><code>
jvmtop.sh
</code></p>

<p>显示出的信息类似下面这样：</p>

<p><img src="http://pic.yupoo.com/khotyn/DhvVumOY/medish.jpg" alt="image" /></p>

<p>其中，各个字段的意义分别如下：</p>

<ul>
  <li>PID：进程 ID</li>
  <li>MAIN-CLASS：main 类的名字</li>
  <li>HPCUR：当前被使用的 heap 的大小</li>
  <li>HPMAX：最大可用的 heap 的大小</li>
  <li>NHCUR：当前被使用的非 heap 大小（比如：perm gen）</li>
  <li>NHMAX：最大可用的非 heap 大小</li>
  <li>CPU：CPU 的使用情况</li>
  <li>GC：消耗在 GC 上的时间比例</li>
  <li>VM：JVM 的提供者，大版本号，小版本号，图中的意思是 Apple 提供的 JDK 6U51 版本。</li>
  <li>USERNAME：当前的用户名</li>
  <li>#T：线程数量</li>
  <li>DL：是否有现成发生死锁</li>
</ul>

<p>还有一个视图是详情视图，展示一个 JVM 的详细情况，使用的命令如下：</p>

<p><code>
jvmtop.sh &lt;pid&gt;
</code></p>

<p>显示的信息类似下面这样：</p>

<p><img src="http://pic.yupoo.com/khotyn/Dhw0sotX/dTwsh.png" alt="image" /></p>

<p>其中，各个字段的意义如下：</p>

<ul>
  <li>TID：线程 ID</li>
  <li>NAME：线程名</li>
  <li>STATE：线程状态</li>
  <li>CPU：线程当前的 CPU 占用情况</li>
  <li>TOTALCPU：从线程被创建开始总体的 CPU 占用情况</li>
  <li>BLOCKBY：阻塞这个线程的线程 ID</li>
</ul>

<p>更加详细的用法大家可以用下面的用 <code>jvmtop.sh -h</code> 来查看。</p>

<h3 id="section-1">实现</h3>

<p>jvmtop 的实现相对来说还是比较简单的，整个 jvmtop 才 14 个类。</p>

<p><img src="http://pic.yupoo.com/khotyn/DhwgtqPY/IYHUw.png" alt="image" /></p>

<p>其中 JvmTop.java 是入口类。</p>

<p>jvmtop 在启动后，会首先用 <code>sun.jvmstat.monitor.*</code> 下面的类以及 <code>com.sun.tools.attach.VirtualMachine</code> 获取到当前机器的所有的 JVM，然后通过 attachment api 将 <code>management-agent.jar</code> 这个 agent 加载到目标 JVM 上，这样，通过 JMX，就可以拿到当前的 JVM 的各种信息了，具体各个信息需要用什么样的 MBean 去拿，大家可以看对应的源代码。</p>

<p>其实，如果需要一个 JVM 的静态的信息，比如，PID，MAIN-CLASS，JVM-ARGS 等等静态信息，直接用 <code>sun.jvmstat.monitor.*</code> 下的 API 就可以，只有需要动态信息的时候，我们才需要通过 attachment api 把 JMX 的功能打开，通过各种 MBean 去获取这些信息。如果后续需要实现类似的功能，也可以通过这样的思路去做。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Bean 的布尔类型属性获取问题]]></title>
    <link href="http://khotyn.github.com/blog/2013/09/25/java-bean-boolean/"/>
    <updated>2013-09-25T18:38:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/09/25/java-bean-boolean</id>
    <content type="html"><![CDATA[<h3 id="velocity--java-bean-">Velocity 对 Java Bean 中布尔类型的属性的获取问题</h3>

<p>今天朋友遇到一个问题，是 Velocity 下面一个 <code>Boolean</code> 类型的变量在模板上没有办法输出，我大致简化一下这个问题，现在我们有一个简单的 Java Bean：</p>

<p>```java
public class SimpleBean {
    private Boolean hasKatong = false;</p>

<pre><code>public Boolean isHasKatong() {
    return hasKatong;
}

public void setHasKatong(Boolean hasKatong) {
    this.hasKatong = hasKatong;
} } ```
</code></pre>

<p>然后有一个简单的模板：</p>

<p><code>java
$simpleBean.hasKatong
</code></p>

<p>模板合并的代码如下：</p>

<p><code>java
public static void main(String[] args) throws Exception {
    Properties p = new Properties();
    p.put("resource.loader", "class");
    p.put("class.resource.loader.class",
        "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader");
    Velocity.init(p);
    VelocityContext context = new VelocityContext();
    context.put("simpleBean", new SimpleBean());
    Template template = Velocity.getTemplate("mytemplate.vm");
    StringWriter sw = new StringWriter();
    template.merge(context, sw);
    System.out.println(sw.toString());
}
</code></p>

<p>大家猜测一下这段代码的输出会是什么？可能大多数人都会认为是 <code>false</code>，但是在 Velocity 1.5 下，这段代码不会输出任何东西，反而会有一个 Warning：</p>

<blockquote>
  <p>INFO: Null reference [template ‘mytemplate.vm’, line 1, column 1] : $simpleBean.hasKatong cannot be resolved.</p>
</blockquote>

<p>而在 Velocity 1.7 下，输出就是如大家所预测的那样，是 <code>false</code>。</p>

<p>具体的分析过程并不复杂，Velocity 1.5 和 1.7 在寻找 isXXXX 这样的方法的时候处理稍微有一点不一样，具体在 <code>BooleanPropertyExecutor</code> 这个类上，在找到方法，对方法的返回值的判断上有一点不一样，1.5 是这样的：</p>

<p><code>java
if (isAlive()) {
    if (getMethod().getReturnType() != Boolean.TYPE) {
        setMethod(null);
    }
}
</code></p>

<p>而 1.7 的是这样的：</p>

<p><code>java
if (isAlive())
{
    if( getMethod().getReturnType() != Boolean.TYPE &amp;&amp;
        getMethod().getReturnType() != Boolean.class )
    {
        setMethod(null);
    }
}
</code></p>

<p>可以看到，1.7 中增加了对返回值是 <code>Boolean</code> 的支持，而 1.5 只支持返回值是 <code>boolean</code> 的方法，那么既然知道了问题的根本原因，解决方法就显而易见了，要么将 <code>hasKatong</code> 这个属性的类型从 <code>Boolean</code> 改成 <code>boolean</code>，要么修改下 velocity 的模板，将属性获取直接改成方法调用：<code>$simpleBean.isHasKatong()</code>。</p>

<h3 id="java-bean-">Java Bean 规范对布尔类型属性的定义</h3>

<p>当然，照理说像 velocity 这样的著名开源组件，不应该在这种问题上犯错误，然后我看了一下 Java Bean 的规范：</p>

<p><img src="http://pic.yupoo.com/khotyn/DbKXKmwa/medish.jpg" alt="image" /></p>

<p>其实这段话已经说的很清楚了，只有原生类型的 <code>boolean</code> 的 Accessor 方法才能够用 <strong>is</strong> 前缀，其他的都用 get，其实在 JDK 的 Introspector 的实现中，也是这样处理的。</p>

<p>那么，这么看来，Velocity 1.5 的处理是正确的，那么 1.7 增加对 <code>Boolean</code> 的支持是为什么呢？</p>

<p>其实，Java Bean 的规范在 <code>is</code> 这种 Accessor 的规定上，是有点不怎么符合开发人员的直觉的，很多人都会在这个问题上纠结：<strong><code>Boolean</code> 类型的属性的 Accessor 是不是应该用 is 开头？</strong>，我觉得大部分人的直觉对这个答案的回答应该都是<em>是</em>，所以 Velocity 这样处理只不过是顺着大多数人的直觉的意思罢了，无可厚非。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring 事务的传播特性]]></title>
    <link href="http://khotyn.github.com/blog/2013/09/14/spring-tx-propagation/"/>
    <updated>2013-09-14T18:06:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/09/14/spring-tx-propagation</id>
    <content type="html"><![CDATA[<p>最近工作中涉及到了一个分布式事务的产品，这个产品是在 Spring 的事务上做的，我对其中涉及到的 Spring 的事务的传播特性不是很了解，所以今天花了一个下午的时间认真了解了一下，写了一堆的测试代码。</p>

<p>进入正题，Spring 的事务的传播特性分为以下的七种：</p>

<ul>
  <li>PROPAGATION_REQUIRED</li>
  <li>PROPAGATION_SUPPORTS</li>
  <li>PROPAGATION_MANDATORY</li>
  <li>PROPAGATION_REQUIRES_NEW</li>
  <li>PROPAGATION_NOT_SUPPORTED</li>
  <li>PROPAGATION_NEVER</li>
  <li>PROPAGATION_NESTED</li>
</ul>

<p>下面一种种来解释：</p>

<h4 id="propagationrequired">PROPAGATION_REQUIRED</h4>

<p>默认的事务传播特性，通常情况下我们用这个事务传播特性就可以了。如果当前事务上下文中没有事务，那么就会新创建一个事务。如果当前的事务上下文中已经有一个事务了，那么新开启的事务会开启一个新的逻辑事务范围，但是会和原有的事务共用一个物理事务，我们暂且不关心逻辑事务和物理事务的区别，先看看这样会导致怎样的代码行为：</p>

<p><code>java
@Override
public void txRollbackInnerTxRollbackPropagationRequires() {
    transactionTemplate.execute(new TransactionCallbackWithoutResult() {
        @Override
        protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
            jdbcTemplate.update("insert into user (name, password) values (?, ?)", "Huang",
                "1111112");
            transactionTemplate.execute(new TransactionCallbackWithoutResult() {
                @Override
                protected void doInTransactionWithoutResult(TransactionStatus status) {
                    jdbcTemplate.update("insert into user (name, password) values (?, ?)",
                        "Huang", "1111112");
                    // 内部事务设置了 setRollbackOnly，
                    status.setRollbackOnly();
                }
            });
        }
    });
}
</code></p>

<p>这段代码在一个嵌套的事务内部（内外层的事务都是 PROPAGATION_REQUIRED 的）设置了回滚，那么对于外部的事务来说，它会收到一个 <code>UnexpectedRollbackException</code>，因为内部的事务和外部的事务是共用一个物理事务的，所以显然内部的事务必然会导致外部事务的回滚，但是因为这个回滚并不是外部事务自己设置的，所以外层事务回滚的时候会需要抛出一个 <code>UnexpectedRollbackException</code>，让事务的调用方知道这个回滚并不是外部事务自己想要回滚，是始料未及的。</p>

<p>但是，如果内层的事务不是通过设置 <code>setRollbackOnly()</code> 来回滚，而是抛出了 <code>RuntimeException</code> 来回滚，那么外层的事务接收到了内层抛出的 <code>RuntimeException</code> 也会跟着回滚，这个是可以预料到的行为，所以不会有 <code>UnexpectedRollbackException</code> 。</p>

<h4 id="propagationsupports">PROPAGATION_SUPPORTS</h4>

<p>PROPAGATION_SUPPORTS 的特性是如果事务上下文中已经存在一个事务，那么新的事务（传播特性为 PROPAGATION_SUPPORTS）就会和原来的事务共用一个物理事务，其行为和 PROPAGATION_REQUIRED 一样。但是，如果当前事务上下文中没有事务，那么 PROPAGATION_SUPPORTS 就按无事务的方式执行代码：</p>

<p><code>java
@Override
public void txRollbackInnerTxRollbackPropagationSupports() {
    supportsTransactionTemplate.execute(new TransactionCallbackWithoutResult() {
        @Override
        protected void doInTransactionWithoutResult(TransactionStatus status) {
            jdbcTemplate.update("insert into user (name, password) values (?, ?)", "Huang",
                "1111112");
            throw new CustomRuntimeException();
        }
    });
}
</code></p>

<p>看上面这段代码，虽然我们在事务（PROPAGATION_SUPPORTS 的）中抛出了一个 <code>RuntimeException</code>，但是因为其事务上下文中没有事务存在，所以这段代码实际上是以无事务的方式执行的，因此代码中的 <code>jdbcTemplate.update()</code> 操作也不会被回滚。</p>

<h4 id="propagationmandatory">PROPAGATION_MANDATORY</h4>

<p>PROPAGATION_MANDATORY 要求事务上下文中必须存在事务，如果事务上下文中存在事务，那么其行为和 <code>PROPAGATION_REQUIRED</code> 一样。如果当前事务上下文中没有事务，那么就会抛出 <code>IllegalTransactionStateException</code>，比如下面这段代码就会这样：</p>

<p><code>java
@Override
public void txRollbackInnerTxRollbackPropagationMandatory() {
    mandatoryTransactionTemplate.execute(new TransactionCallbackWithoutResult() {
        @Override
        protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
            jdbcTemplate.update("insert into user (name, password) values (?, ?)", "Huang",
                "1111112");
        }
    });
}
</code></p>

<h4 id="propagationrequiresnew">PROPAGATION_REQUIRES_NEW</h4>

<p>PROPAGATION_REQUIRES_NEW 无论当前事务上下文中有没有事务，都会开启一个新的事务，并且和原来的事务完全是隔离的，外层事务的回滚不会影响到内层的事务，内层事务的回滚也不会影响到外层的事务（<strong>这个说法得稍微打点折扣：因为如果内层抛出 <code>RuntimeException</code> 的话，那么外层还是会收到这个异常并且触发回滚</strong>），我们分析下几段代码：</p>

<p>```java
@Override
public void txRollbackInnerTxRollbackPropagationRequiresNew() {
    transactionTemplate.execute(new TransactionCallbackWithoutResult() {
        @Override
        protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {</p>

<pre><code>        requiresNewTransactionTemplate.execute(new TransactionCallbackWithoutResult() {
            @Override
            protected void doInTransactionWithoutResult(TransactionStatus status) {
                jdbcTemplate.update("insert into user (name, password) values (?, ?)",
                    "Huang", "1111112");
            }
        });

        // 外部事务发生回滚，内部事务应该不受影响还是能够提交
        throw new RuntimeException();
    }
}); } ```
</code></pre>

<p>这段代码外层的事务回滚了，但是不会影响到内层的事务的提交，内层事务不受外层的事务的影响。再看：</p>

<p><code>java
@Override
public void txRollbackInnerTxRollbackPropagationRequiresNew2() {
    transactionTemplate.execute(new TransactionCallbackWithoutResult() {
        @Override
        protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
            jdbcTemplate.update("insert into user (name, password) values (?, ?)", "Huang",
                "1111112");
            // Nested transaction committed.
            requiresNewTransactionTemplate.execute(new TransactionCallbackWithoutResult() {
                @Override
                protected void doInTransactionWithoutResult(TransactionStatus status) {
                    jdbcTemplate.update("insert into user (name, password) values (?, ?)",
                        "Huang", "1111112");
                    // 内部事务发生回滚，但是外部事务不应该发生回滚
                    status.setRollbackOnly();
                }
            });
        }
    });
}
</code></p>

<p>这段代码在内层事务上设置了 <code>setRollbackOnly</code>，内层事务肯定会回滚，但是由于内层事务和外层事务是隔离的，所以外层事务不会被回滚。再看：</p>

<p>```java
@Override
public void txRollbackInnerTxRollbackPropagationRequiresNew3() {
    transactionTemplate.execute(new TransactionCallbackWithoutResult() {
        @Override
        protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
            jdbcTemplate.update(“insert into user (name, password) values (?, ?)”, “Huang”,
                “1111112”);</p>

<pre><code>        requiresNewTransactionTemplate.execute(new TransactionCallbackWithoutResult() {
            @Override
            protected void doInTransactionWithoutResult(TransactionStatus status) {
                jdbcTemplate.update("insert into user (name, password) values (?, ?)",
                    "Huang", "1111112");
                // 内部事务抛出 RuntimeException，外部事务接收到异常，依旧会发生回滚
                throw new RuntimeException();
            }
        });
    }
}); } ```
</code></pre>

<p>这段代码在内层事务抛出了一个 <code>RuntimeException</code>，虽然内层事务和外层事务在事务上是隔离，但是 <code>RuntimeException</code> 显然还会抛到外层去，所以外层事务也会发生回滚。</p>

<h4 id="propagationnotsupported">PROPAGATION_NOT_SUPPORTED</h4>

<p>PROPAGATION_NOT_SUPPORTED 不管当前事务上下文中有没有事务，代码都会在按照无事务的方式执行，看下面这段代码：</p>

<p><code>java
@Override
public void txRollbackInnerTxRollbackPropagationNotSupport() {
    transactionTemplate.execute(new TransactionCallbackWithoutResult() {
        @Override
        protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
            jdbcTemplate.update("insert into user (name, password) values (?, ?)", "Huang",
                "1111112");
            notSupportedTransactionTemplate.execute(new TransactionCallbackWithoutResult() {
                @Override
                protected void doInTransactionWithoutResult(TransactionStatus status) {
                    jdbcTemplate.update("insert into user (name, password) values (?, ?)",
                        "Huang", "1111112");
                }
            });
            // 外部事务回滚，不会把内部的也连着回滚 
            transactionStatus.setRollbackOnly();
        }
    });
}
</code></p>

<p>上面这段代码中虽然外部事务发生了回滚，但是由于内部的事务是 PROPAGATION_NOT_SUPPORTED，根本不在外层的事务范围内，所以内层事务不会发生回滚。</p>

<h4 id="propagationnever">PROPAGATION_NEVER</h4>

<p>PROPAGATION_NEVER 如果当前事务上下文中存在事务，就会抛出 <code>IllegalTransactionStateException</code> 异常，自己也会按照非事务的方式执行</p>

<p><code>java
@Override
public void txRollbackInnerTxRollbackPropagationNever2() {
    transactionTemplate.execute(new TransactionCallbackWithoutResult() {
        @Override
        protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
            jdbcTemplate.update("insert into user (name, password) values (?, ?)", "Huang",
                "1111112");
            neverTransactionTemplate.execute(new TransactionCallbackWithoutResult() {
                @Override
                protected void doInTransactionWithoutResult(TransactionStatus status) {
                    jdbcTemplate.update("insert into user (name, password) values (?, ?)",
                        "Huang", "1111112");
                }
            });
        }
    });
}
</code></p>

<p>比如上面这段代码，在一个 PROPAGATION_REQUIRES 里面嵌入了一个 PROPAGATION_NEVER，内层就会抛出一个 <code>IllegalTransactionStateException</code>，导致外层事务被回滚。</p>

<h4 id="propagationnested">PROPAGATION_NESTED</h4>

<p>PROPAGATION_NESTED 只能应用于像 DataSource 这样的事务，可以通过在一个事务内部开启一个 PROPAGATION_NESTED 而达到一个事务内部有多个保存点的效果，一个内嵌的事务发生回滚，只会回滚到它自己的保存点，外层事务还会继续，比如下面这段代码：</p>

<p>```java
@Override
public void txRollbackInnerTxRollbackPropagationNested() {
    nestedTransactionTemplate.execute(new TransactionCallbackWithoutResult() {
        @Override
        protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
            jdbcTemplate.update(“insert into user (name, password) values (?, ?)”, “Huang”,
                “1111112”);</p>

<pre><code>        nestedTransactionTemplate.execute(new TransactionCallbackWithoutResult() {
            @Override
            protected void doInTransactionWithoutResult(TransactionStatus status) {
                jdbcTemplate.update("insert into user (name, password) values (?, ?)",
                    "Huang", "1111112");
                // 内部事务设置了 rollbackOnly，外部事务应该不受影响，可以继续提交
                status.setRollbackOnly();
            }
        });
    }
}); } ```
</code></pre>

<p>内层的事务发生了回滚，只会回滚其内部的操作，不会影响到外层的事务。</p>

<h3 id="section">总结</h3>

<p>Spring 的事务传播特性种类繁多，大多数都来自于 EJB 的事务，大家可以自己写一些小的程序来测试 Spring 各个事务特性的行为，加深印象，我自己也写了一个工程，通过单元测试去测试各个事务传播特性的行为，大家有兴趣的话，可以下过来跑一下：<a href="https://github.com/khotyn/spring-tx-test">https://github.com/khotyn/spring-tx-test</a></p>
]]></content>
  </entry>
  
</feed>
