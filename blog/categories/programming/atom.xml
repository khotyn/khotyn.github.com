<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | 小径分岔的花园]]></title>
  <link href="http://khotyn.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://khotyn.github.com/"/>
  <updated>2014-01-06T09:57:33+08:00</updated>
  <id>http://khotyn.github.com/</id>
  <author>
    <name><![CDATA[khotyn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Guava 之 EventBus]]></title>
    <link href="http://khotyn.github.com/blog/2013/12/07/google-guava-eventbus/"/>
    <updated>2013-12-07T19:49:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/12/07/google-guava-eventbus</id>
    <content type="html"><![CDATA[<p>Google 的 Guava 库是一个 Java 程序员必须了解的库，它提供了一些非常强大的功能，比如函数式风格的集合操作，Cache Builder 等等的功能，另外 Google Guava 还提供了一个非常方便的观察者模式的实现：EventBus。这篇文章就来介绍一下 EventBus 的使用。</p>

<h3 id="eventbus-">EventBus 对象</h3>

<p>在举例说明 EventBus 的使用方式之前，我们先来看一下 EventBus 对象，EventBus 对象整个负责了观察者模式监听者的注册，事件的分发，所以，在使用 EventBus 的时候，你就省去了非常多的工作，你只要去使用 EventBus 就可以了，不用再去自己实现一个 Publisher 的类，使用 EventBus 的第一步就是你需要一个 EventBus 的实例：</p>

<p><code>java
EventBus eventBus = new EventBus();
</code></p>

<h3 id="section">注册监听者</h3>

<p>使用 EventBus 监听事件，只需要在你的处理事件的方法上添加一个 <code>@Subscribe</code> 注解就可以：</p>

<p><code>java
static class Subscriber {
    @Subscribe
    public void subscribe(Event event) {
        System.out.println(event.getWord());
    }
}
</code></p>

<p>这里的事件对象 <code>Event</code> 可以是任何的对象，可以是 <code>Object</code>，但是也可以是任何你自定义的消息对象。</p>

<p>建立一个类以后，就可以往 EventBus 中注册 Subscriber：</p>

<p><code>java
eventBus.register(new Subscriber());
</code></p>

<h3 id="section-1">分发事件</h3>

<p>在注册完事件后，就可以去分发事件了，分发的代码非常简单：</p>

<p><code>java
eventBus.post(new Event("Hello world"));
</code></p>

<p>这样，所有的注册在 EventBus 中的监听者，只要它的监听方法的参数是 <code>Event</code> 或者 <code>Event</code> 的超类，那么都会收到事件。</p>

<h3 id="section-2">结论</h3>

<p>EventBus 作为一个 In-JVM 的观察者模式的实现，非常使用，使用起来非常简单，可以减少不少的工作，建议在项目中可以多多使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jvmtop 介绍和实现分析]]></title>
    <link href="http://khotyn.github.com/blog/2013/11/02/jvmtop-impl/"/>
    <updated>2013-11-02T15:36:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/11/02/jvmtop-impl</id>
    <content type="html"><![CDATA[<h3 id="section">简介</h3>

<p>jvmtop 是一个分析工具，顾名思义，它是一个针对 jvm 的 工具，展示的方式和 unix 的 top 命令相似。</p>

<p>jvmtop 的项目地址是：<a href="https://code.google.com/p/jvmtop/">jvmtop</a>，安装 jvmtop 除了项目地址上的方式以外，还可以通过 jenv 安装：<code>jenv install jvmtop</code>。</p>

<p>jvmtop 提供了两个视图，一个是概览视图，可以展示出当前机器的所有的 JVM 的情况，命令是 </p>

<p><code>
jvmtop.sh
</code></p>

<p>显示出的信息类似下面这样：</p>

<p><img src="http://pic.yupoo.com/khotyn/DhvVumOY/medish.jpg" alt="image" /></p>

<p>其中，各个字段的意义分别如下：</p>

<ul>
  <li>PID：进程 ID</li>
  <li>MAIN-CLASS：main 类的名字</li>
  <li>HPCUR：当前被使用的 heap 的大小</li>
  <li>HPMAX：最大可用的 heap 的大小</li>
  <li>NHCUR：当前被使用的非 heap 大小（比如：perm gen）</li>
  <li>NHMAX：最大可用的非 heap 大小</li>
  <li>CPU：CPU 的使用情况</li>
  <li>GC：消耗在 GC 上的时间比例</li>
  <li>VM：JVM 的提供者，大版本号，小版本号，图中的意思是 Apple 提供的 JDK 6U51 版本。</li>
  <li>USERNAME：当前的用户名</li>
  <li>#T：线程数量</li>
  <li>DL：是否有现成发生死锁</li>
</ul>

<p>还有一个视图是详情视图，展示一个 JVM 的详细情况，使用的命令如下：</p>

<p><code>
jvmtop.sh &lt;pid&gt;
</code></p>

<p>显示的信息类似下面这样：</p>

<p><img src="http://pic.yupoo.com/khotyn/Dhw0sotX/dTwsh.png" alt="image" /></p>

<p>其中，各个字段的意义如下：</p>

<ul>
  <li>TID：线程 ID</li>
  <li>NAME：线程名</li>
  <li>STATE：线程状态</li>
  <li>CPU：线程当前的 CPU 占用情况</li>
  <li>TOTALCPU：从线程被创建开始总体的 CPU 占用情况</li>
  <li>BLOCKBY：阻塞这个线程的线程 ID</li>
</ul>

<p>更加详细的用法大家可以用下面的用 <code>jvmtop.sh -h</code> 来查看。</p>

<h3 id="section-1">实现</h3>

<p>jvmtop 的实现相对来说还是比较简单的，整个 jvmtop 才 14 个类。</p>

<p><img src="http://pic.yupoo.com/khotyn/DhwgtqPY/IYHUw.png" alt="image" /></p>

<p>其中 JvmTop.java 是入口类。</p>

<p>jvmtop 在启动后，会首先用 <code>sun.jvmstat.monitor.*</code> 下面的类以及 <code>com.sun.tools.attach.VirtualMachine</code> 获取到当前机器的所有的 JVM，然后通过 attachment api 将 <code>management-agent.jar</code> 这个 agent 加载到目标 JVM 上，这样，通过 JMX，就可以拿到当前的 JVM 的各种信息了，具体各个信息需要用什么样的 MBean 去拿，大家可以看对应的源代码。</p>

<p>其实，如果需要一个 JVM 的静态的信息，比如，PID，MAIN-CLASS，JVM-ARGS 等等静态信息，直接用 <code>sun.jvmstat.monitor.*</code> 下的 API 就可以，只有需要动态信息的时候，我们才需要通过 attachment api 把 JMX 的功能打开，通过各种 MBean 去获取这些信息。如果后续需要实现类似的功能，也可以通过这样的思路去做。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代码之美]]></title>
    <link href="http://khotyn.github.com/blog/2013/10/16/beautiful-code/"/>
    <updated>2013-10-16T00:55:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/10/16/beautiful-code</id>
    <content type="html"><![CDATA[<p>今天的工作基本上就是在重构实习生写的 JS 代码，改的昏天暗地，他们基本把整个工程的 JS 代码都放到了一个文件中，代码中一会儿以空格缩进，一会儿以 tab 缩进，到处都是不必要的变量，我的代码洁癖又犯了，忍不住直接进行了重构，对 JS 进行模块化的拆分，每一个模块都有相对独立的功能，改了之后舒畅了很多，就像拿掉了卡在喉咙中鱼刺。</p>

<p>工作这几年以来，我也遇到过几个和我一样，有着或者或少代码洁癖的人，看到 IDE 中出现的警告信息就会感到不舒服（从 Eclipse 转到 Intellij IDEA 以后，洁癖的程度越来越严重了，Intellij IDEA 会对你的代码风格做更彻底的检查），看到以 tab 来做缩进简直就像看到异教徒一样，看到代码中已经被注释掉的废弃代码那肯定得马上删掉。</p>

<p>可惜的是，工作遇到的更多的人，在这方面要随意的多，他们更多追求的是把工作完成，让功能能够跑起来，其实一定程度上来说，他们是对的，他们是更加实用主义的程序员，实用主义能够帮助我们更快地达到自己的目标，而不会被和目标无关的东西所牵绊。但是，我觉得，一个程序员在追求程序的实用主义的时候，也应该去追求程序本身的美感。</p>

<p>或许有人会问，什么是程序的美感，关于这一点，我们可以从很多的侧面去描述：</p>

<ul>
  <li>更人性化的用户体验</li>
  <li>更简洁的架构</li>
  <li>程序内一致的代码风格</li>
  <li>更易读的代码</li>
</ul>

<p>但是，“美”本身是用语言是无法完整描述的，你可以说娜塔丽•波特曼很美，你也可以说加西莫多很多，但是他们之间的差距是如此之大，除了他们都是人之外你都找不到他们的共同点。所以“美”就是“美”，只有你身在其中的时候你才能够感受到。</p>

<p>或许对于很多人而言，“代码美”根本就是个扯淡的东西。其实写代码的过程和做木工的过程是很像的，说白了，都是设计出一样东西，然后拿来用而已。看看下面的无印良品木制家居，不得不承认，它比我们平时从市面上看到的普通的木制家居要舒服地多。同样一段代码也可以比另一段代码看起来更加“舒服”，更加“美”，只是每一个人对这种“美”的感受能力不同而已，有些能够感受到，有些不能感受到（在这一点上，不得不承认，我对“代码美”的感受能力是比较差的）。</p>

<p><img src="http://pic.yupoo.com/khotyn/DePKb6au/13WWB6.png" alt="image" /></p>

<p>想要去培养这种对“程序美”的感受能力，一个很好的方式就是去阅读优秀的开源代码，比如 Tomcat，Dubbo 等等，有时候，当你看到一段不错的代码，一个简洁的有用的架构设计的时候，你会感到来自内心深处的愉悦，这就是“美”的一个侧面。我相信，培养这样的感受能力，是非常有益于身心健康的，并且我也相信那些透露出“美”的代码在某种程度上也是更加优秀的代码（内王而外圣）。</p>

<p>这个世界已经够丑陋了，如果我们已经解决了温饱问题，又有了这么多的自由时间，不如做点“漂亮”点的东西出来，写一些更有用，更“美”的代码出来~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git flow 分支管理模型简介]]></title>
    <link href="http://khotyn.github.com/blog/2013/10/01/git-flow/"/>
    <updated>2013-10-01T10:43:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/10/01/git-flow</id>
    <content type="html"><![CDATA[<p>有一次和 <a href="https://twitter.com/imsoz">@imsoz</a> 在聊天的时候，他给我介绍了一个叫做 Git flow 的分支管理模型，我听了很有兴趣，于是昨天花了一点时间去了解了一下。</p>

<h4 id="git-flow-">Git flow 分支模型</h4>

<p>Git flow 是一个分支模型，它提供了一个经过实践检验的分支管理的模型。整个分支模型的工作图大概是下面这样样子的：</p>

<p><img src="http://nvie.com/img/2009/12/Screen-shot-2009-12-24-at-11.32.03.png" alt="image" /></p>

<p>它包含有两个长期分支和三个支持的分支：</p>

<ul>
  <li>master 分支：使用过 git 的同学应该都这个分支很熟悉，这个分支代表了可以用于生产环境的代码。</li>
  <li>develop 分支：用于开发的分支，或者叫做“集成分支”，这里的代码可以用来做 nightly build。</li>
</ul>

<p>上面两个是长期的分支，这两个分支在开发的过程中会一直存在下去。除了这两个长期分支，还有三个用于支持的分支：</p>

<ul>
  <li>feature 分支：一般上从 develop 分支拉出来，最后要 merge 回 develop 分支，或者废弃掉。feature 分支是用来开发一个在下一次的产品 release 中可能被加上去的特性的，一个 feature 分支在特性开发完毕后就结束了，所以 feature 分支只是短暂地存在。</li>
  <li>release 分支：release 分支用来支持准备一个将要被 release 的产品版本，在这个分支上，我们可能会修改版本号，做一些 release 相关的事情，或者做一些 bug 的 hotfix，release 分支从 develop 分支拉出来，当你认为你的下一次的 release 所需要的特性都已经开发完毕的时候，你就可以从 develop 分支拉出 release 分支来，最后 release 分支需要 merge 回 develop 分支和 master 分支。</li>
  <li>hotfix 分支：顾名思义，hotfix 分支就是当生产环境的代码出现了重大的 bug 的时候需要的分支，这个时候你可以从 master 分支中拉出一个 hotfix 分支，在修复完 bug 后，记得要把 hotfix 的分支合并回到 develop 和 master 分支上。</li>
</ul>

<p>上面就是 Git flow 的整个分支模型，相对来说还是比较简单的，更加具体的说明可以看这篇关于 Git flow 分支模型最原始的 blog：<a href="http://nvie.com/posts/a-successful-git-branching-model/">http://nvie.com/posts/a-successful-git-branching-model/</a></p>

<h4 id="git-flow--1">Git flow 扩展</h4>

<p>但是有一个问题就是上面的这些分支的创建，合并，删除等等操作，都是需要好几步的，比较费时间，费精力，Git flow 还提供了一个 git 的扩展，让我们可以非常方便地在项目中使用上述的分支模型，具体的使用方式作者都已经写在了 github 上，大家可以自己去看：<a href="https://github.com/nvie/gitflow">https://github.com/nvie/gitflow</a>。在 Mac 下可以用 <code>brew install git-flow</code> 来安装。</p>

<p>之前我也了解过 git 的一些使用，并且已经在一些项目中尝试去使用 git，但是在分支管理这一块一直比较头疼，而 Git flow 恰好给我提供了一个现成的经过实践的分支模型，刚好公司后面有一个项目可能也会用到 git，到时候我会尝试下在项目组中推广使用 Git flow，让实践去检验一把。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Bean 的布尔类型属性获取问题]]></title>
    <link href="http://khotyn.github.com/blog/2013/09/25/java-bean-boolean/"/>
    <updated>2013-09-25T18:38:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2013/09/25/java-bean-boolean</id>
    <content type="html"><![CDATA[<h3 id="velocity--java-bean-">Velocity 对 Java Bean 中布尔类型的属性的获取问题</h3>

<p>今天朋友遇到一个问题，是 Velocity 下面一个 <code>Boolean</code> 类型的变量在模板上没有办法输出，我大致简化一下这个问题，现在我们有一个简单的 Java Bean：</p>

<p>```java
public class SimpleBean {
    private Boolean hasKatong = false;</p>

<pre><code>public Boolean isHasKatong() {
    return hasKatong;
}

public void setHasKatong(Boolean hasKatong) {
    this.hasKatong = hasKatong;
} } ```
</code></pre>

<p>然后有一个简单的模板：</p>

<p><code>java
$simpleBean.hasKatong
</code></p>

<p>模板合并的代码如下：</p>

<p><code>java
public static void main(String[] args) throws Exception {
    Properties p = new Properties();
    p.put("resource.loader", "class");
    p.put("class.resource.loader.class",
        "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader");
    Velocity.init(p);
    VelocityContext context = new VelocityContext();
    context.put("simpleBean", new SimpleBean());
    Template template = Velocity.getTemplate("mytemplate.vm");
    StringWriter sw = new StringWriter();
    template.merge(context, sw);
    System.out.println(sw.toString());
}
</code></p>

<p>大家猜测一下这段代码的输出会是什么？可能大多数人都会认为是 <code>false</code>，但是在 Velocity 1.5 下，这段代码不会输出任何东西，反而会有一个 Warning：</p>

<blockquote>
  <p>INFO: Null reference [template ‘mytemplate.vm’, line 1, column 1] : $simpleBean.hasKatong cannot be resolved.</p>
</blockquote>

<p>而在 Velocity 1.7 下，输出就是如大家所预测的那样，是 <code>false</code>。</p>

<p>具体的分析过程并不复杂，Velocity 1.5 和 1.7 在寻找 isXXXX 这样的方法的时候处理稍微有一点不一样，具体在 <code>BooleanPropertyExecutor</code> 这个类上，在找到方法，对方法的返回值的判断上有一点不一样，1.5 是这样的：</p>

<p><code>java
if (isAlive()) {
    if (getMethod().getReturnType() != Boolean.TYPE) {
        setMethod(null);
    }
}
</code></p>

<p>而 1.7 的是这样的：</p>

<p><code>java
if (isAlive())
{
    if( getMethod().getReturnType() != Boolean.TYPE &amp;&amp;
        getMethod().getReturnType() != Boolean.class )
    {
        setMethod(null);
    }
}
</code></p>

<p>可以看到，1.7 中增加了对返回值是 <code>Boolean</code> 的支持，而 1.5 只支持返回值是 <code>boolean</code> 的方法，那么既然知道了问题的根本原因，解决方法就显而易见了，要么将 <code>hasKatong</code> 这个属性的类型从 <code>Boolean</code> 改成 <code>boolean</code>，要么修改下 velocity 的模板，将属性获取直接改成方法调用：<code>$simpleBean.isHasKatong()</code>。</p>

<h3 id="java-bean-">Java Bean 规范对布尔类型属性的定义</h3>

<p>当然，照理说像 velocity 这样的著名开源组件，不应该在这种问题上犯错误，然后我看了一下 Java Bean 的规范：</p>

<p><img src="http://pic.yupoo.com/khotyn/DbKXKmwa/medish.jpg" alt="image" /></p>

<p>其实这段话已经说的很清楚了，只有原生类型的 <code>boolean</code> 的 Accessor 方法才能够用 <strong>is</strong> 前缀，其他的都用 get，其实在 JDK 的 Introspector 的实现中，也是这样处理的。</p>

<p>那么，这么看来，Velocity 1.5 的处理是正确的，那么 1.7 增加对 <code>Boolean</code> 的支持是为什么呢？</p>

<p>其实，Java Bean 的规范在 <code>is</code> 这种 Accessor 的规定上，是有点不怎么符合开发人员的直觉的，很多人都会在这个问题上纠结：<strong><code>Boolean</code> 类型的属性的 Accessor 是不是应该用 is 开头？</strong>，我觉得大部分人的直觉对这个答案的回答应该都是<em>是</em>，所以 Velocity 这样处理只不过是顺着大多数人的直觉的意思罢了，无可厚非。</p>
]]></content>
  </entry>
  
</feed>
