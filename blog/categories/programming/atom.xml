<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | 小径分岔的花园]]></title>
  <link href="http://khotyn.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://khotyn.github.com/"/>
  <updated>2014-11-15T10:13:25+08:00</updated>
  <id>http://khotyn.github.com/</id>
  <author>
    <name><![CDATA[khotyn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[该死的 ^M]]></title>
    <link href="http://khotyn.github.com/blog/2014/11/15/damn-the-carriage-return-character/"/>
    <updated>2014-11-15T08:33:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/11/15/damn-the-carriage-return-character</id>
    <content type="html"><![CDATA[<p><code>^M</code>，神奇的字符！相信很多人写 Shell 脚本的时候都被这个字符坑过，我自己也至少被坑过两次。最近周围的好几个小伙伴又被 <code>^M</code> 坑，花了好几个小时检查脚本的错误，结果发现是 <code>^M</code> 导致的。所以写了这篇文章讲一下什么是 <code>^M</code>，当 <code>^M</code> 出现的时候一般会伴随着什么样的现象，出现了我们可以用什么手段去解决。</p>

<h3 id="m-"><code>^M</code> 是何方神圣</h3>

<p>这个得先从 Windows 和 Unix 下的换行符开始说起，在我的 Intellij IDEA 的右下方的状态栏上，有一块是展示当前文件的换行符的：</p>

<p><img src="http://pic.yupoo.com/khotyn/EcY8fTut/ksIoo.png" alt="Windows 和 Unix 下的文件换行符" /></p>

<p>可以看到在 Windows 下，换行符是 <code>\r\n</code>，在 Unix 下换行符是 <code>\n</code>。如果我们用把一个文件的换行符换成 Windows 的换行符，那么当我们用 <code>cat -v</code> 来看的时候，就可以看到：</p>

<p><img src="http://pic.yupoo.com/khotyn/EcYbafeN/medish.jpg" alt="cat -v 查看文件是否含有 ^M" /> </p>

<p>实际上 <code>^M</code> 就是 Windows 下的换行符中的 <code>\r</code> 部分。因为 Unix 下的换行符是 <code>\n</code>，所以当一个用 Windows 下的换行符的文件放在 Unix 下的时候，单行的最后一个字符就变成了 <code>\r</code>，<code>\r</code> 在 ASCII 码中是 <code>0xD</code>，而 <code>0xD</code> 在 VIM 和 <code>cat -v</code> 则刚好被显示为 <code>^M</code>。</p>

<blockquote>
  <p>刚才之所以用 <code>cat -v</code> 而不用普通的 <code>cat</code> 是因为 <code>^M</code> 是不可见的字符，如果仅仅用 <code>cat</code>，是看不到这个字符的。<code>cat</code> 的 <code>-v</code> 参数的作用就是显示不可打印的字符。</p>
</blockquote>

<h3 id="m--1"><code>^M</code> 会导致什么样的问题？</h3>

<p>我们已经知道了 <code>^M</code> 实际上就是 <code>\r</code>，而 <code>\r</code> 是回车符（Carriage Return），<strong>回车符的作用是将设备的位置重置到当前行的开头</strong>。</p>

<p>知道了 <code>\r</code> 的作用时候，我们来看一个现象：</p>

<p>```
### 有一个普通文件，存放了一个路径，当前行的最后以 ^M 结尾
$ cat -v Main
/home/admin/khotyn.huangt/test/^M</p>

<h3 id="echo-">Echo 一下，神奇了！</h3>
<p>$ echo “<code>cat Main</code>/where am i”
/where am i/khotyn.huangt/test/
```</p>

<p>看到后面那个 echo 命令，它将 Main 文件中的内容提取出来，再在后面加上 <code>/where am i</code> 这个字符串，结果我们看到，<code>/where am i</code> 在打印的结果中跑到最前面去了，这正是 <code>\r</code> 这个字符的作用，因为 <code>cat Main</code> 的执行的结果的最后一个字符是 <code>\r</code>，所以一遇到这个字符，设备指针就直接回到了当前行的开头，所以 <code>\r</code> 后面的 <code>/where am i</code> 就直接显示在了最前面。</p>

<p><strong>所以，当你看到什么奇怪的路径，这个路径中莫名其妙地少了一些字符，出现了一些莫名其妙的字符串的，很可能就是 <code>^M</code> 导致的。</strong></p>

<h3 id="m--2">如何逃离 <code>^M</code> 的魔掌</h3>

<p>当你发现了 <code>^M</code> 导致的问题的时候，最直截了当的方式就是将 <code>^M</code> 从文件中去掉。</p>

<h4 id="section">一、临时解决的几个方法</h4>

<p>如果的机器上安装有 dos2unix，那么恭喜你，直接运行</p>

<p><code>
dos2unix /path/to/file
</code></p>

<p>就可以将一个文件的换行符从 Windows 的转换成 Unix 的。</p>

<p>但是，如果机器上没有装 dos2unix，而你又没法装上去（在一家公司工作总是会有各种各样的让你感觉很丧气的权限控制），那么你可以用 sed 来替换：</p>

<p><code>
sed --in-place='' 's/^M//g' /path/to/file
</code></p>

<blockquote>
  <p>注意：上面的 <code>^M</code> 只是显示的效果，输入的时候需要用组合键输入，先 <code>Ctrl + V</code>，然后马上 <code>Ctrl + M</code> 就可以在终端中输入 <code>^M</code> 了。</p>
</blockquote>

<p>当然，用 <code>tr</code> 之类的命令也可以，不过我一般用 <code>sed</code> 的原因是 <code>sed</code> 加上 <code>--in-place</code> 参数可以做到直接替换原文件，而不用产生临时的文件（危险而高效的操作）。</p>

<h4 id="section-1">二、预防此问题</h4>

<p>不过，前面说的只是当出现问题的时候如何解决，那么如何预防这个问题呢？</p>

<p>第一个方法当然是直接放大招，换个 Mac 啥的，或者把你的机器上的 Windows 格了，装个 Ubuntu 也好啊。真心觉得 Windows 对于程序员来说真的没有啥好处（我好想听说连微软都开源 .Net 了，并且会提供多平台的支持）。</p>

<p>第二个方法嘛，当在 Windows 下使用各种编辑器的时候，尽量将换行符设置成 Unix 的换行符。不要偷懒用 Windows 的换行符，出现了问题就是好几个小时的排查时间。（目前没有发现有什么场景下有必须用到 Windows 下的换行符的，如果有同学知道有这样的场景的话，不吝赐教）。</p>

<h4 id="section-2">三、防止被别人坑</h4>

<p>虽然我个人觉得不应该用 Windows，不过还是有同学的确是喜欢用，或者因为不可抗拒的因素而暂时在使用，为了防止出现这个问题，可以在版本管理软件上做控制，比如 <strong>Git</strong> 就可以设置换行符，当你提交文件的时候，可以将你的所有文本的换行符替换成你设定的换行符，详细可以看 <a href="https://help.github.com/articles/dealing-with-line-endings/">https://help.github.com/articles/dealing-with-line-endings/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intellij IDEA 的一些使用技巧]]></title>
    <link href="http://khotyn.github.com/blog/2014/10/19/intellij-idea-feature/"/>
    <updated>2014-10-19T21:41:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/10/19/intellij-idea-feature</id>
    <content type="html"><![CDATA[<p><strong>所有的这些功能都是在 Intellij IDEA 14 中测试的，其他的版本不一定适用</strong></p>

<h3 id="section">打开类的直接定位到某一行</h3>

<p>在 Mac 下，IDEA 默认的打开类的快捷键是 <code>Command+O</code>，不过这个快捷键也有一些技巧。</p>

<p>第一个是可以在打开类的时候直接跳到某一行，比如下面这样：</p>

<p><img src="http://pic.yupoo.com/khotyn/E8WysuL3/Pv6jh.png" alt="" /></p>

<p>打开 String 这个类的同时直接跳转到 String 的第 40 行。</p>

<h3 id="section-1">到某个类的某个方法</h3>

<p>IDEA 的 Open Symbol 功能可以直接定位到某一个类的某一个方法，默认的快捷键是 <code>Option+Command+O</code>，如下：</p>

<p><img src="http://pic.yupoo.com/khotyn/E8WRrUjB/I2Vom.png" alt="" /></p>

<h3 id="sublime-">像 Sublime 那样多行编辑</h3>

<p>以前要做多行编辑，总是现在 Sublime 里面先做好，然后再拷贝回到 IDEA 里面，现在知道了 IDEA 本身就自带这个功能，快捷键是 <code>Option+Shift+鼠标</code>，直接来看一个 gif 动画看来这个功能吧：</p>

<p><img src="/images/select_multi_line.gif" alt="" /></p>

<h3 id="smart-code-completion">Smart Code Completion</h3>

<p>除了普通的代码补全的功能之外，IDEA 还提供了智能的不全功能，我们看下对比：</p>

<p>下面是基本的补全功能：</p>

<p><img src="/images/basic_completion.gif" alt="" /></p>

<p>这个是智能的补全功能：</p>

<p><img src="/images/smart_completion.gif" alt="" /></p>

<p>可以看到智能补全可以直接推断类型，把不符合类型的提示直接全部过滤，让我们可以更加高效地编写代码。</p>

<h3 id="section-2">草稿</h3>

<p>工作的时候我们经常会创建一些临时文件，在 IDEA 14 中，加入了一个非常有用的创建草稿的功能，Mac 下的快捷键是 <code>Command+Shift+N</code>，你可以在一个工程里面随意创建任意数量的草稿。</p>

<p>上面的这些是前几天参加 QCon 的时候听 IDEA 的一个 Session 知道的一些技巧。个人认为这个 Session 比很多其他的 Session 都更加有料</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guice 集合注入]]></title>
    <link href="http://khotyn.github.com/blog/2014/08/16/guice-collection-inject/"/>
    <updated>2014-08-16T18:47:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/08/16/guice-collection-inject</id>
    <content type="html"><![CDATA[<p>Guice 的初学者在使用 Guice 往一个类中注入一个集合注入的时候，肯定有感觉到非常地不自然（这里的不自然我觉得一定程度上是不符合 Guice 给人的初印象），由于最近在项目中也在使用 Guice，所以在这里对 Guice 的集合注入做一个记录。</p>

<h4 id="guice--guice-multibindings">一、使用 Guice 的扩展 guice-multibindings</h4>

<p>Guice 的文档上关于 Guice 注入的最简单的例子应该就是：</p>

<p><code>java
bind(Interface.java).to(Implementation.java);
</code></p>

<p>我们希望在使用 Guice 做集合注入的时候肯定也是希望使用类似的 API 做注入，不过可惜的是，Guice 的核心里面并没有提供类似的 API 让我们可以使用来注入集合。</p>

<p>所幸的是，Guice 提供了一个扩展的包 <code>guice-multibindings</code> 使用和 Guice 最原始的 API 类似的方式来做注入。</p>

<p>需要使用这个扩展的包，使用 Maven 的话，可以在项目中加入如下的依赖：</p>

<p>```</p>
<dependency>
    <groupid>com.google.inject.extensions</groupid>
    <artifactid>guice-multibindings</artifactid>
    <version>3.0</version>
</dependency>
<p>```</p>

<p><code>guice-multibindings</code> 主要使用了两种方式来注入，一种是注入一个 Set：</p>

<p><code>java
Multibinder&lt;CheckHandler&gt; checkAdapter = Multibinder.newSetBinder(binder(), CheckHandler.class);
checkAdapter.addBinding().to(InstalledCheckHandler.class);
</code></p>

<p>首先创建一个 <code>checkAdapter</code>，然后往这个 Multibinder 中，我们可以添加任意多的 <code>CheckHandler</code> 的实现。</p>

<p>另一种方式是注入一个 Map：</p>

<p><code>java
MapBinder&lt;String, CheckHandler&gt; mapBinder = MapBinder.newMapBinder(binder(), String.class, CheckHandler.class);
mapBinder.addBinding("Hello").to(InstalledCheckHandler.class);
</code></p>

<p>Map 的注入方式和 Set 的注入方式非常类似。不过奇怪的一点是，Guice 并没有提供注入 List 的方法，<strong>这是值得思考的一点</strong>。</p>

<h4 id="provides-">二、使用 <code>@Provides</code> 来注入</h4>

<p>看了第一种方法，我们可以看到，上面的这种方法并不能注入一个 List，不过，我们还是有办法来注入一个 List 的，就是使用一个 <code>@Provides</code> 注解，比如在我们的 Guice Module 的类里面加入一下的代码：</p>

<p>```java
@Provides
List<bindingadapter> provideBindingAdapter() {
    List<bindingadapter> bindingAdapters = new ArrayList<bindingadapter>();
    List&lt;OsgiServiceHolder<bindingadapter>&gt; bindingAdapterHolders = OsgiFrameworkUtils
        .getServices(bundleContext, BindingAdapter.class);</bindingadapter></bindingadapter></bindingadapter></bindingadapter></p>

<pre><code>for (OsgiServiceHolder&lt;BindingAdapter&gt; bindingAdapterHolder : bindingAdapterHolders) {
    final BindingAdapter bindingAdapter = bindingAdapterHolder.getService();

    if (bindingAdapter != null) {
        bindingAdapters.add(bindingAdapter);
    }
}

return bindingAdapters;
</code></pre>

<p>}
```</p>

<p>这样，我们就可以从其他的地方拿到对应的类的实例，然后放到一个 List 中，通过 Guice 注入给其他的类了。</p>

<p>上面的这两种方式其实各有优劣。一般情况下，我觉得选择第一种就可以了，毕竟，第一种方法的类的实例是由 Guice 来生成的。选择第二种方式的场景我觉得可能有：</p>

<ul>
  <li>类的实例是从其他的地方来的，比如上面的例子中，是从 OSGi 来的。</li>
  <li>简单类型的类，比如一个 String 的 List。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用 JUnit 的 Rule 对 Log4j 的输出进行测试]]></title>
    <link href="http://khotyn.github.com/blog/2014/08/14/use-junit-rule-to-assert-log4j-output/"/>
    <updated>2014-08-14T22:07:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/08/14/use-junit-rule-to-assert-log4j-output</id>
    <content type="html"><![CDATA[<p>最近在写框架的测试代码的时候，有需求要对 Log4j 的输出进行测试（<strong>依赖 Log4j 的输出来进行测试，这一点本身可能得深思一下</strong>），之前也有对 stdout 和 stderr 进行测试，用了一个叫做 <code>system-rule</code> 的包：</p>

<p>```xml</p>
<dependency>
    <groupid>com.github.stefanbirkner</groupid>
    <artifactid>system-rules</artifactid>
    <version>1.5.0</version>
</dependency>
<p>```</p>

<p>利用这个包中类，只需要在测试用例中加上一个 JUnit Rule，就可以获取到 stdout 和 stderr 中的内容，然后对其进行测试。现在我也想对 Log4j 的输出采用类似的方式进行测试，于是扩展了 JUnit 的 Rule，就有了以下这一段代码：</p>

<p>```java
/**
 * 此 Rule 用于对 Log4j 进行测试
 *
 * @author khotyn 8/14/14 9:18 PM
 */
public class Log4jRule extends ExternalResource {
    private String       logName;
    private List<string> loggerMessages = new ArrayList<string>();</string></string></p>

<pre><code>public Log4jRule(String loggerName) {
    this.logName = loggerName;
}

public Log4jRule(Class className) {
    this.logName = className.getName();
}

public List&lt;String&gt; getLoggerMessages() {
    return loggerMessages;
}

public String getLogMessageAsString() {
    String result = "";

    for (String loggerMessage : loggerMessages) {
        result += loggerMessage;
        result += "\n";
    }

    return result;
}

@Override
protected void before() throws Throwable {
    Logger logger = LogManager.getLogger(logName);
    logger.addAppender(new AppenderSkeleton() {
        @Override
        protected void append(LoggingEvent event) {
            loggerMessages.add(event.getMessage().toString());
        }

        @Override
        public void close() {

        }

        @Override
        public boolean requiresLayout() {
            return false;
        }
    });
} } ```
</code></pre>

<p>整段代码非常简单，继承了 JUnit 的 <code>ExternalResource</code> 类，然后在 <code>before</code> 方法中，给对应的 Logger 加上了一个 Appender，在 Appender 中，将日志内容收集到一个 List 中，然后拿到这个 List 就可以拿到日志的输出了。</p>

<p>使用的时候非常简单：</p>

<p>```java
public class SampleTest {
    @Rule
    public Log4jRule log4jRule = new Log4jRule(SampleTest.class);</p>

<pre><code>@Test
public void test() {
  	// .........
    Assert.assertTrue(log4jRule.getLogMessageAsString().contains(
        "Hello, world"));
} } ```
</code></pre>

<p>通过 </p>

<p><code>java
log4jRule.getLogMessageAsString()
</code></p>

<p>可以拿到一个 String 格式的日志输出，或者通过：</p>

<p><code>java
log4jRule.getLoggerMessages()
</code></p>

<p>来获得一个日志输出的内容的 List，List 中的没一行就是日志中的一行</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些关于单元测试的思考]]></title>
    <link href="http://khotyn.github.com/blog/2014/03/31/unittest/"/>
    <updated>2014-03-31T09:06:00+08:00</updated>
    <id>http://khotyn.github.com/blog/2014/03/31/unittest</id>
    <content type="html"><![CDATA[<p>最近在开发公司的集成测试框架，有一些关于单元测试的体会，写一个博客记录一下想法。</p>

<h4 id="section">为什么要写单元测试？</h4>

<p>这个问题，已经有无数的关于技术的书、文章去阐述了，不断地强调单元测试的重要性。比如单元测试可以让你在软件开发的早期阶段发现 Bug，而不必到集成测试的时候才发现等等。不过，对于我来说，在切实地戳到我的痛点之前，我一直都没有去重视这些关于单元测试的忠告（虽然在心中记着，但是实际上并不是很在意）。</p>

<p>在写公司的集成测试框架的时候，有那么好几次，在调整了现有的功能，或者修复了某个 Bug 之后，<strong>因为懒惰，也因为跑一次完整的单元测试所需要的耗时较长</strong>，我侥幸地认为这些修改应该没有问题，直接打包交付。结果是，墨菲定律出现了，果然，没有经过测试的修改引发了新的 Bug，我不得不重新修改代码，然后厚着脸皮让用户重新试一次。</p>

<p>人总是不靠谱的，我们懒惰，我们存在侥幸心理，坏事儿总是在我们最不希望发生的时候发生。写单元测试不能防止我们懒惰，防止我们存在侥幸心理。但是一次成本低廉的单元测试会让我们觉得：“反正运行一次但单元测试不会耗费很多时间，不如跑一次吧”，它在一定程度上降低我们犯错的几率。</p>

<p>单元测试对于重构的意义也非常重大。很多有意思的程序员都有洁癖，会想着去修改某一段「恶心」的代码。我有过这样几次经历，在把一段「恶心」的代码修改地赏心悦目后，最后上线后发现引入了一个 Bug，心里暗骂一句 WTF，然后一脸黑线地把 Bug 修改了，想想如果当时有单元测试，那么会给我多大的勇气，让我可以肆无忌惮地去重构代码，这是多么爽的一件事情。</p>

<h4 id="section-1">好的单元测试应该是怎样的？</h4>

<p>一个好的单元测试，我觉得最重要的一点就是运行成本得低，也就是说一个单元测试越快越好。运行一次单元测试的成本越低，你才会越愿意去运行单元测试。如果运行一次单元测试得 10 分钟 20 分钟，那么我想很多人的侥幸心理又会出来了。</p>

<h4 id="section-2">我是怎样写单元测试的？</h4>

<p>我一般是这样写单元测试的，先想清楚模块的边界，有哪几种可能的输入，这些输入对应的可能输出是什么，然后以最快的速度堆积代码把功能先实现出来，接着写单元测试，把测试用例全部跑过。接下来马上着手重构之前写的代码，不断重构，不断地跑单元测试，知道重构后的代码让自己满意为止。</p>
]]></content>
  </entry>
  
</feed>
